--
-- PostgreSQL database dump
--

-- Dumped from database version 9.6.16
-- Dumped by pg_dump version 12.3

-- Started on 2020-08-17 12:26:48

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 6264 (class 1262 OID 16393)
-- Name: bloomsegment; Type: DATABASE; Schema: -; Owner: silpgadmin
--

CREATE DATABASE bloomsegment WITH TEMPLATE = template0 ENCODING = 'UTF8' LC_COLLATE = 'English_United States.1252' LC_CTYPE = 'English_United States.1252';


ALTER DATABASE bloomsegment OWNER TO silpgadmin;

\connect bloomsegment

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 91 (class 2615 OID 28106)
-- Name: bloomapp; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA bloomapp;


ALTER SCHEMA bloomapp OWNER TO segment;

--
-- TOC entry 92 (class 2615 OID 49354)
-- Name: bloomlibrary_org; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA bloomlibrary_org;


ALTER SCHEMA bloomlibrary_org OWNER TO segment;

--
-- TOC entry 64 (class 2615 OID 1853636)
-- Name: bloomlibrary_test; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA bloomlibrary_test;


ALTER SCHEMA bloomlibrary_test OWNER TO segment;

--
-- TOC entry 65 (class 2615 OID 49353)
-- Name: bloomreader; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA bloomreader;


ALTER SCHEMA bloomreader OWNER TO segment;

--
-- TOC entry 93 (class 2615 OID 106259)
-- Name: bloomreaderbeta; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA bloomreaderbeta;


ALTER SCHEMA bloomreaderbeta OWNER TO segment;

--
-- TOC entry 22 (class 2615 OID 49352)
-- Name: bloomreadertest; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA bloomreadertest;


ALTER SCHEMA bloomreadertest OWNER TO segment;

--
-- TOC entry 61 (class 2615 OID 1908505)
-- Name: common; Type: SCHEMA; Schema: -; Owner: silpgadmin
--

CREATE SCHEMA common;


ALTER SCHEMA common OWNER TO silpgadmin;

--
-- TOC entry 78 (class 2615 OID 21459)
-- Name: hearthis; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA hearthis;


ALTER SCHEMA hearthis OWNER TO segment;

--
-- TOC entry 12 (class 2615 OID 49351)
-- Name: pdfdropletapp; Type: SCHEMA; Schema: -; Owner: segment
--

CREATE SCHEMA pdfdropletapp;


ALTER SCHEMA pdfdropletapp OWNER TO segment;

--
-- TOC entry 3 (class 3079 OID 428519)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- TOC entry 6275 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 2 (class 3079 OID 1979748)
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- TOC entry 6276 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry, geography, and raster spatial types and functions';


--
-- TOC entry 4 (class 3079 OID 428508)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- TOC entry 6277 (class 0 OID 0)
-- Dependencies: 4
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- TOC entry 1959 (class 1255 OID 1966624)
-- Name: get_book_stats(character varying, character varying, date, date); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_book_stats(p_bookid character varying, p_bookinstanceid character varying, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date) RETURNS TABLE(bookid character varying, totalreads integer, bloomreaderreads integer, bloomlibraryreads integer, totaldownloads integer, shelldownloads integer, libraryviews integer, devicecount integer)
    LANGUAGE plpgsql
    AS $$

-- For now, just ignoring timestamp because we don't have a use case in which we are filtering for it yet,
-- and it is likey a performance drag.

DECLARE

BEGIN
        SELECT  count(*),
                count(distinct pr.device_unique_id) 
        INTO    bloomReaderReads, 
                deviceCount
        FROM    common.mv_pages_read pr
        WHERE   pr.source = 'bloomreader' AND
                pr.book_instance_id = p_bookInstanceId --AND
                --pr.time_utc BETWEEN p_from AND (p_to + interval '1 day')
        ;

        SELECT  count(*)
                INTO libraryViews
        FROM    common.mv_book_detail bd
        WHERE   bd.book_id = p_bookId --AND
                --bd.timestamp BETWEEN p_from AND (p_to + interval '1 day')
        ;

        DROP TABLE IF EXISTS downloads;
        CREATE TEMP TABLE downloads AS
        SELECT  d.event_type, 
                count(d.event_type) AS cnt
        FROM    common.mv_download_book d
        WHERE   d.book_id = p_bookId --AND
                --d.timestamp BETWEEN p_from AND (p_to + interval '1 day')
        GROUP BY d.event_type;
        SELECT  cnt
        INTO    bloomLibraryReads
        FROM    downloads 
        WHERE   event_type = 'read';
        SELECT  cnt
        INTO    shellDownloads
        FROM    downloads 
        WHERE   event_type = 'shell';
        SELECT  cnt
        INTO    totalDownloads
        FROM    downloads 
        WHERE   event_type <> 'read';

        RETURN QUERY

        SELECT  p_bookId,
                COALESCE(bloomLibraryReads, 0) + COALESCE(bloomReaderReads, 0) AS totalReads,
                COALESCE(bloomReaderReads, 0),
                COALESCE(bloomLibraryReads, 0),
                COALESCE(totalDownloads, 0),
                COALESCE(shellDownloads, 0),
                COALESCE(libraryViews, 0),
                COALESCE(deviceCount, 0)
        ;


--     RETURN QUERY
    
--     WITH    downloads AS 
--             (SELECT d.event_type, 
--                     count(d.event_type) AS cnt
--             FROM    bloomlibrary_org.v_download_book d
--             WHERE   d.book_id = p_bookId --AND
--                     --d.timestamp BETWEEN p_from AND (p_to + interval '1 day')
--             GROUP BY d.event_type
--             ),
--             bloomReaderOpens AS
--             (SELECT count(*) AS cnt,
--                     count(distinct o.device_unique_id) deviceCount
--             FROM    bloomreader.v_book_or_shelf_opened o
--             WHERE   o.book_instance_id = p_bookInstanceId --AND
--                     --o.time_utc BETWEEN p_from AND (p_to + interval '1 day')
--             ),
--             bookDetailViews AS
--             (SELECT count(*) AS cnt
--             FROM    bloomlibrary_org.v_book_detail bd
--             WHERE   bd.book_id = p_bookId --AND
--                     --bd.timestamp BETWEEN p_from AND (p_to + interval '1 day')
--             )
--     SELECT  cast (p_bookId AS TEXT),
--             cast (COALESCE((SELECT cnt FROM bloomReaderOpens), 0) + COALESCE((SELECT cnt FROM downloads WHERE event_type = 'read'), 0) AS INT) AS totalReads,
--             cast (COALESCE((SELECT SUM(cnt) FROM downloads WHERE event_type <> 'read'), 0) AS INT) AS totalDownloads,
--             cast (COALESCE((SELECT cnt FROM bloomReaderOpens), 0) AS INT) AS bloomReaderReads,
--             cast (COALESCE((SELECT bloomReaderOpens.deviceCount FROM bloomReaderOpens), 0) AS INT) AS deviceCount,
--             cast (COALESCE((SELECT cnt FROM downloads WHERE event_type = 'shell' OR event_type IS NULL), 0) AS INT) AS shellDownloads,
--             cast (COALESCE((SELECT cnt FROM bookDetailViews), 0) AS INT) AS libraryViews
--     ;
END; $$;


ALTER FUNCTION common.get_book_stats(p_bookid character varying, p_bookinstanceid character varying, p_from date, p_to date) OWNER TO silpgadmin;

--
-- TOC entry 1960 (class 1255 OID 1972801)
-- Name: get_reading_overview(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_overview(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookcount bigint, languagecount bigint, topiccount bigint, devicemobilecount bigint, devicecount bigint, devicepccount bigint, downloadsepubcount bigint, downloadsbloompubcount bigint, downloadspdfcount bigint, downloadsshellbookscount bigint, readsbloomreadercount bigint, bloomreaderreadcount bigint, readswebcount bigint, readsappscount bigint)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
    RETURN QUERY

        WITH    downloads AS
                (SELECT d.event_type, 
                        count(d.event_type) AS cnt
                FROM    common.mv_download_book d,
                        temp_book_ids b
                WHERE   d.book_id = b.book_id AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to
                GROUP BY d.event_type),
                downloadDistinctIds AS
                (SELECT DISTINCT d.book_instance_id
                FROM    common.mv_download_book d,
                        temp_book_ids b
                WHERE   d.book_id = b.book_id AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to),
                bloomReaderReads AS
                (SELECT r.book_instance_id,
                        r.device_unique_id,
                        r.book_language_code
                FROM    common.mv_pages_read r,
                        temp_book_ids b
                WHERE   r.source = 'bloomreader' AND
                        r.book_instance_id = b.book_instance_id AND
                        r.date_local >= p_from AND 
                        r.date_local <= p_to)
        SELECT  (SELECT COUNT(DISTINCT u.book_instance_id)
                FROM    (SELECT downloadDistinctIds.book_instance_id from downloadDistinctIds
                        UNION ALL
                        SELECT DISTINCT bloomReaderReads.book_instance_id from bloomReaderReads) u) AS bookCount,
                COUNT(DISTINCT r.book_language_code) AS languageCount,
                (SELECT COUNT(DISTINCT topic)
                FROM    common.mv_download_book d,
                        temp_book_ids b
                WHERE   d.book_id = b.book_id AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to) AS topicCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceMobileCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceCount,
                CAST(0 AS BIGINT) AS devicePCCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'epub'), 0) AS downloadsEpubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'bloompub'), 0) AS downloadsBloomPubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'pdf'), 0) AS downloadsPdfCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'shell'), 0) AS downloadsShellbooksCount,
                COUNT(*) AS readsBloomReaderCount,
                COUNT(*) AS bloomReaderReadCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'read'), 0) AS readsWebCount,
                CAST(0 AS BIGINT) AS readsAppsCount
        FROM    bloomReaderReads r
        ;

ELSE
        RETURN QUERY    


        WITH    downloads AS
                (SELECT d.event_type, 
                        count(d.event_type) AS cnt
                FROM    common.mv_download_book d
                WHERE   (p_branding IS NULL OR d.book_branding = p_branding) AND
                        (p_country IS NULL OR d.country = p_country) AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to
                GROUP BY d.event_type),
                downloadDistinctIds AS
                (SELECT DISTINCT d.book_instance_id
                FROM    common.mv_download_book d
                WHERE   (p_branding IS NULL OR d.book_branding = p_branding) AND
                        (p_country IS NULL OR d.country = p_country) AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to),
                bloomReaderReads AS
                (SELECT r.book_instance_id,
                        r.device_unique_id,
                        r.book_language_code
                FROM    common.mv_pages_read r
                WHERE   r.source = 'bloomreader' AND
                        (p_branding IS NULL OR r.book_branding = p_branding) AND
                        (p_country IS NULL OR r.country = p_country) AND
                        r.date_local >= p_from AND 
                        r.date_local <= p_to)
        SELECT  (SELECT COUNT(DISTINCT u.book_instance_id)
                FROM    (SELECT downloadDistinctIds.book_instance_id from downloadDistinctIds
                        UNION ALL
                        SELECT DISTINCT bloomReaderReads.book_instance_id from bloomReaderReads) u) AS bookCount,
                COUNT(DISTINCT r.book_language_code) AS languageCount,
                (SELECT COUNT(DISTINCT topic)
                FROM    common.mv_download_book d
                WHERE   (p_branding IS NULL OR d.book_branding = p_branding) AND
                        (p_country IS NULL OR d.country = p_country) AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to) AS topicCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceMobileCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceCount,
                CAST(0 AS BIGINT) AS devicePCCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'epub'), 0) AS downloadsEpubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'bloompub'), 0) AS downloadsBloomPubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'pdf'), 0) AS downloadsPdfCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'shell'), 0) AS downloadsShellbooksCount,
                COUNT(*) AS readsBloomReaderCount,
                COUNT(*) AS bloomReaderReadCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'read'), 0) AS readsWebCount,
                CAST(0 AS BIGINT) AS readsAppsCount
        FROM    bloomReaderReads r
        ;

END IF;
END; $$;


ALTER FUNCTION common.get_reading_overview(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1464 (class 1255 OID 1920004)
-- Name: get_reading_overview2(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_overview2(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookcount bigint, devicecount bigint, languagecount bigint, bloomreaderreadcount bigint, downloadsshellbooks bigint, downloadsshellbooks1 bigint, downloadsshellbooks2 bigint)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
    RETURN QUERY
        -- TODO: Download date needs to be considered.

        SELECT
                bloomReader.*,
                blorg1.downloadsShellbooks + blorg2.downloadsShellbooks AS downloadsShellbooks,
                blorg1.downloadsShellbooks,
                blorg2.downloadsShellbooks
        FROM (
                SELECT  COUNT(DISTINCT r.book_instance_id) AS bookCount,
                        COUNT(DISTINCT r.device_unique_id) AS deviceCount,
                        COUNT(DISTINCT r.book_language_code) AS languageCount,
                        COUNT(*) AS bloomReaderReadCount
                FROM    common.mv_pages_read r,
                        temp_book_ids b
                WHERE   r.book_instance_id = b.book_instance_id AND
                        r.date_local >= p_from AND 
                        r.date_local <= p_to
        ) AS bloomReader
        CROSS JOIN (
                -- From Legacy BLORG
                -- I don't think Legacy BLORG lets you determine EPub, PDF, BR downloads from download_book
                SELECT COUNT(*) AS downloadsShellbooks
                FROM temp_book_ids b
                INNER JOIN bloomlibrary_org.download_book d
                        ON b.book_id = d.book
                WHERE   d."timestamp"::DATE >= p_from AND
                        d."timestamp"::DATE <= p_to
        ) AS blorg1
        CROSS JOIN (
                SELECT
                COUNT(*) FILTER (WHERE event = 'shell' ) AS downloadsShellbooks
                FROM temp_book_ids b
                INNER JOIN bloomlibrary_test.download_book d
                        ON b.book_instance_id = d.book_instance_id
                WHERE   d."timestamp"::DATE >= p_from AND
                        d."timestamp"::DATE <= p_to
        ) AS blorg2
        ;
ELSE
        RETURN QUERY    

        -- This works on BR and BR Beta, but not BLORG.
        SELECT
                bloomReader.*,
                blorg1.downloadsShellbooks + blorg2.downloadsShellbooks AS downloadsShellbooks,
                blorg1.downloadsShellbooks AS downloadsShellbooks1,
                blorg2.downloadsShellbooks AS downloadsShellbooks1
        FROM (
                SELECT  COUNT(DISTINCT book_instance_id) AS bookCount,
                        COUNT(DISTINCT device_unique_id) AS deviceCount,
                        COUNT(DISTINCT book_language_code) AS languageCount,
                        COUNT(*) AS bloomReaderReadCount
                FROM    common.mv_pages_read r
                WHERE   (p_branding IS NULL OR r.book_branding = p_branding) AND
                        (p_country IS NULL OR r.country = p_country) AND
                        r.date_local >= p_from AND 
                        r.date_local <= p_to
        ) AS bloomReader
        CROSS JOIN (
                SELECT COUNT(*) AS downloadsShellbooks
                FROM bloomlibrary_org.download_book d
                LEFT OUTER JOIN public.countryregioncitylu c
                        ON d.location_uid = c.loc_uid
                WHERE   (p_branding IS NULL OR d.book_title IN (
                        -- The download_book table doesn't seem to have any way to recover the branding or book_instance_id.
                        -- We'll just have to make a best effort based on book_title, even though it's theoretically not 100% accurate.
                        SELECT DISTINCT book_title
                        FROM    common.mv_pages_read r
                        WHERE   r.book_branding = p_branding AND
                                r.country = p_country AND        
                                r.date_local >= p_from AND 
                                r.date_local <= p_to
                        )) AND
                        (p_country IS NULL OR c.country_name = p_country) AND
                        d."timestamp"::DATE >= p_from AND
                        d."timestamp"::DATE <= p_to
        ) AS blorg1
        CROSS JOIN (
                SELECT
                COUNT(*) FILTER (WHERE event = 'shell' ) AS downloadsShellbooks
                FROM bloomlibrary_test.download_book d
                WHERE   (p_branding IS NULL OR book_instance_id IN (
                                SELECT book_instance_id
                                FROM common.mv_pages_read
                                WHERE book_branding = p_branding
                        )) AND
                -- TODO: DownloadBook should check the country  too. I guess you could use context_locale's suffix for that.
                --       Or try to get the location from context_ip.
                --
                -- Timestamp: The associated time zone seems to always be in UTC. Can't see a way to recover the browser's timezone from the DB schema.
                        "timestamp"::DATE >= p_from AND
                        "timestamp"::DATE <= p_to
        ) AS blorg2
        ;

END IF;
END; $$;


ALTER FUNCTION common.get_reading_overview2(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1953 (class 1255 OID 1981879)
-- Name: get_reading_overview_test(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_overview_test(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookcount bigint, languagecount bigint, topiccount bigint, devicemobilecount bigint, devicecount bigint, devicepccount bigint, downloadsepubcount bigint, downloadsbloompubcount bigint, downloadspdfcount bigint, downloadsshellbookscount bigint, readsbloomreadercount bigint, bloomreaderreadcount bigint, readswebcount bigint, readsappscount bigint)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
    RETURN QUERY

        WITH    downloads AS
                (SELECT d.event_type, 
                        count(d.event_type) AS cnt
                FROM    common.mv_download_book d,
                        temp_book_ids b
                WHERE   d.book_id = b.book_id AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to
                GROUP BY d.event_type),
                downloadDistinctIds AS
                (SELECT DISTINCT d.book_instance_id
                FROM    common.mv_download_book d,
                        temp_book_ids b
                WHERE   d.book_id = b.book_id AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to),
                bloomReaderReads AS
                (SELECT r.book_instance_id,
                        r.device_unique_id,
                        r.book_language_code
                FROM    common.mv_pages_read r,
                        temp_book_ids b
                WHERE   r.book_instance_id = b.book_instance_id AND
                        r.date_local >= p_from AND 
                        r.date_local <= p_to)
        SELECT  (SELECT COUNT(DISTINCT u.book_instance_id)
                FROM    (SELECT downloadDistinctIds.book_instance_id from downloadDistinctIds
                        UNION ALL
                        SELECT DISTINCT bloomReaderReads.book_instance_id from bloomReaderReads) u) AS bookCount,
                COUNT(DISTINCT r.book_language_code) AS languageCount,
                (SELECT COUNT(DISTINCT topic)
                FROM    common.mv_download_book d,
                        temp_book_ids b
                WHERE   d.book_id = b.book_id AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to) AS topicCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceMobileCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceCount,
                CAST(0 AS BIGINT) AS devicePCCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'epub'), 0) AS downloadsEpubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'bloompub'), 0) AS downloadsBloomPubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'pdf'), 0) AS downloadsPdfCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'shell'), 0) AS downloadsShellbooksCount,
                COUNT(*) AS readsBloomReaderCount,
                COUNT(*) AS bloomReaderReadCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'read'), 0) AS readsWebCount,
                CAST(0 AS BIGINT) AS readsAppsCount
        FROM    bloomReaderReads r
        ;

ELSE
        RETURN QUERY    


        WITH    downloads AS
                (SELECT d.event_type, 
                        count(d.event_type) AS cnt
                FROM    common.mv_download_book d
                WHERE   (p_branding IS NULL OR d.book_branding = p_branding) AND
                        (p_country IS NULL OR d.country = p_country) AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to
                GROUP BY d.event_type),
                downloadDistinctIds AS
                (SELECT DISTINCT d.book_instance_id
                FROM    common.mv_download_book d
                WHERE   (p_branding IS NULL OR d.book_branding = p_branding) AND
                        (p_country IS NULL OR d.country = p_country) AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to),
                bloomReaderReads AS
                (SELECT r.book_instance_id,
                        r.device_unique_id,
                        r.book_language_code
                FROM    common.mv_pages_read r
                WHERE   (p_branding IS NULL OR r.book_branding = p_branding) AND
                        (p_country IS NULL OR r.country = p_country) AND
                        r.date_local >= p_from AND 
                        r.date_local <= p_to)
        SELECT  (SELECT COUNT(DISTINCT u.book_instance_id)
                FROM    (SELECT downloadDistinctIds.book_instance_id from downloadDistinctIds
                        UNION ALL
                        SELECT DISTINCT bloomReaderReads.book_instance_id from bloomReaderReads) u) AS bookCount,
                COUNT(DISTINCT r.book_language_code) AS languageCount,
                (SELECT COUNT(DISTINCT topic)
                FROM    common.mv_download_book d
                WHERE   (p_branding IS NULL OR d.book_branding = p_branding) AND
                        (p_country IS NULL OR d.country = p_country) AND
                        -- we would normally use date_local,
                        -- but the web events don't include timezone
                        d.time_utc >= p_from AND 
                        d.time_utc <= p_to) AS topicCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceMobileCount,
                COUNT(DISTINCT r.device_unique_id) AS deviceCount,
                CAST(0 AS BIGINT) AS devicePCCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'epub'), 0) AS downloadsEpubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'bloomPub'), 0) AS downloadsBloomPubCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'pdf'), 0) AS downloadsPdfCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'shell'), 0) AS downloadsShellbooksCount,
                COUNT(*) AS readsBloomReaderCount,
                COUNT(*) AS bloomReaderReadCount,
                COALESCE((SELECT cnt
                FROM    downloads
                WHERE   event_type = 'read'), 0) AS readsWebCount,
                CAST(0 AS BIGINT) AS readsAppsCount
        FROM    bloomReaderReads r
        ;

END IF;
END; $$;


ALTER FUNCTION common.get_reading_overview_test(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1436 (class 1255 OID 1909634)
-- Name: get_reading_perbook_base_events(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_perbook_base_events(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookinstanceid text, booktitle text, bookbranding text, language text, started bigint, finished bigint)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
        RETURN QUERY    

        SELECT  mv.book_instance_id AS bookInstanceId,
                max(book_title),
                max(mv.book_branding),
                max(book_language_code),
                CAST(sum(mv.started) AS BIGINT), 
                CAST(sum(mv.finished) AS BIGINT)
        FROM    common.mv_reading_perbook_events mv,
                temp_book_ids b
        WHERE   mv.book_instance_id = b.book_instance_id AND
                mv.date_local >= p_from AND 
                mv.date_local <= p_to
        GROUP BY mv.book_instance_id
        ;

ELSE
        RETURN QUERY    

        SELECT  mv.book_instance_id AS bookInstanceId,
                max(book_title),
                max(mv.book_branding),
                max(book_language_code),
                CAST(sum(mv.started) AS BIGINT), 
                CAST(sum(mv.finished) AS BIGINT)
        FROM    common.mv_reading_perbook_events mv
        WHERE   (p_branding IS NULL OR mv.book_branding = p_branding) AND
                (p_country IS NULL OR mv.country = p_country) AND        
                mv.date_local >= p_from AND 
                mv.date_local <= p_to
        GROUP BY mv.book_instance_id
        ;
END IF;
END; $$;


ALTER FUNCTION common.get_reading_perbook_base_events(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1962 (class 1255 OID 1992228)
-- Name: get_reading_perbook_comprehension_events(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_perbook_comprehension_events(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookinstanceid text, booktitle text, bookbranding text, numquestionsinbook bigint, numquizzestaken bigint, meanpctcorrect numeric, medianpctcorrect numeric)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
    RETURN QUERY

        SELECT  c.book_instance_id AS bookInstanceId,
                MODE() WITHIN GROUP (ORDER BY book_title) AS book_title,
                book_branding,
                MODE() WITHIN GROUP (ORDER BY question_count) AS numQuestionsInBook,
                count(*) AS numQuizzesTaken,
                round(avg(percent_right), 0) AS meanPctQuestionsCorrect,
                round(public.median(CAST(percent_right AS NUMERIC)), 0) AS medianPctQuestionsCorrect
        FROM    common.mv_comprehension c,
                temp_book_ids b
        WHERE   c.book_instance_id = b.book_instance_id AND
                date_local >= p_from AND 
                date_local <= p_to
        group by c.book_instance_id,
                c.book_branding;

ELSE
        RETURN QUERY    

        SELECT  book_instance_id AS bookInstanceId,
                MODE() WITHIN GROUP (ORDER BY book_title) AS book_title,
                book_branding,
                MODE() WITHIN GROUP (ORDER BY question_count) AS numQuestionsInBook,
                count(*) AS numQuizzesTaken,
                round(avg(percent_right), 0) AS meanPctQuestionsCorrect,
                round(public.median(CAST(percent_right AS NUMERIC)), 0) AS medianPctQuestionsCorrect
        FROM    common.mv_comprehension
        WHERE   book_instance_id is not null AND
                (p_branding IS NULL OR book_branding = p_branding) AND
                (p_country IS NULL OR country = p_country) AND        
                date_local >= p_from AND 
                date_local <= p_to
        group by book_instance_id,
                book_branding;
END IF;
END; $$;


ALTER FUNCTION common.get_reading_perbook_comprehension_events(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1954 (class 1255 OID 1994094)
-- Name: get_reading_perbook_download_events(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_perbook_download_events(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookinstanceid text, booktitle text, bookbranding text, shelldownloads bigint, pdfdownloads bigint, epubdownloads bigint, bloompubdownloads bigint)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
    RETURN QUERY    

    SELECT
        book_instance_id AS bookInstanceId,
        MODE() WITHIN GROUP (ORDER BY book_title) AS bookTitle,
        MODE() WITHIN GROUP (ORDER BY book_branding) AS bookBranding,
        count(CASE WHEN event_type = 'shell' OR event_type = NULL THEN 1 END) AS shellDownloads,
        count(CASE WHEN event_type = 'pdf' THEN 1 END) AS pdfDownloads,
        count(CASE WHEN event_type = 'epub' THEN 1 END) AS epubDownloads,
        count(CASE WHEN event_type = 'bloompub' THEN 1 END) AS bloompubDownloads
    FROM    common.mv_download_book
    WHERE
        book_instance_id IN (SELECT book_instance_id FROM temp_book_ids) AND
        -- we would normally use date_local,
        -- but the web events don't include timezone
        time_utc >= p_from AND 
        time_utc <= p_to
    GROUP BY book_instance_id
    ; 

ELSE
    RETURN QUERY    

    SELECT
        book_instance_id AS bookInstanceId,
        MODE() WITHIN GROUP (ORDER BY book_title) AS bookTitle,
        MODE() WITHIN GROUP (ORDER BY book_branding) AS bookBranding,
        count(CASE WHEN event_type = 'shell' OR event_type = NULL THEN 1 END) AS shellDownloads,
        count(CASE WHEN event_type = 'pdf' THEN 1 END) AS pdfDownloads,
        count(CASE WHEN event_type = 'epub' THEN 1 END) AS epubDownloads,
        count(CASE WHEN event_type = 'bloompub' THEN 1 END) AS bloompubDownloads
    FROM    common.mv_download_book
    WHERE
        (p_branding IS NULL OR book_branding = p_branding) AND
        (p_country IS NULL OR country = p_country) AND
        -- we would normally use date_local,
        -- but the web events don't include timezone
        time_utc >= p_from AND 
        time_utc <= p_to
    GROUP BY book_instance_id
    ; 
END IF;
END; $$;


ALTER FUNCTION common.get_reading_perbook_download_events(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1958 (class 1255 OID 2002867)
-- Name: get_reading_perbook_events(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_perbook_events(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookinstanceid text, booktitle text, bookbranding text, language text, started bigint, finished bigint, shelldownloads bigint, pdfdownloads bigint, epubdownloads bigint, bloompubdownloads bigint, numquestionsinbook bigint, numquizzestaken bigint, meanpctquestionscorrect numeric, medianpctquestionscorrect numeric)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN
    RETURN QUERY    

    SELECT
            COALESCE(reads.bookInstanceId, comp.bookInstanceId, downloads.bookInstanceId) AS bookInstanceId,
            COALESCE(reads.bookTitle, comp.bookTitle, downloads.bookTitle) AS bookTitle,
            COALESCE(reads.bookBranding, comp.bookBranding, downloads.bookBranding) AS bookBranding,
            reads.language, 
            reads.started , 
            reads.finished,
            downloads.shellDownloads,
            downloads.pdfDownloads,
            downloads.epubDownloads,
            downloads.bloompubDownloads,
            comp.numQuestionsInBook,
            comp.numQuizzesTaken,
            comp.meanPctCorrect,
            comp.medianPctCorrect
    FROM common.get_reading_perbook_base_events(p_useBookIds, p_from, p_to, p_branding, p_country) reads

    FULL OUTER JOIN common.get_reading_perbook_comprehension_events(p_useBookIds, p_from, p_to, p_branding, p_country) comp
            ON reads.bookInstanceId = comp.bookInstanceId

    -- Full outer join, because it should be possible for a book to be downloaded but not read.
    FULL OUTER JOIN common.get_reading_perbook_download_events(p_useBookIds, p_from, p_to, p_branding, p_country) downloads
        ON reads.bookInstanceId = downloads.bookInstanceId

    ;
END; $$;


ALTER FUNCTION common.get_reading_perbook_events(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1957 (class 1255 OID 2002150)
-- Name: get_reading_perbook_events_exp(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_perbook_events_exp(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(bookinstanceid text, booktitle text, bookbranding text, language text, started bigint, finished bigint, shelldownloads bigint, pdfdownloads bigint, epubdownloads bigint, bloompubdownloads bigint, numquestionsinbook bigint, numquizzestaken bigint, meanpctquestionscorrect numeric, medianpctquestionscorrect numeric)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN
    RETURN QUERY    

    SELECT
            COALESCE(reads.bookInstanceId, comp.bookInstanceId, downloads.bookInstanceId) AS bookInstanceId,
            COALESCE(reads.bookTitle, comp.bookTitle, downloads.bookTitle) AS bookTitle,
            COALESCE(reads.bookBranding, comp.bookBranding, downloads.bookBranding) AS bookBranding,
            reads.language, 
            reads.started , 
            reads.finished,
            downloads.shellDownloads,
            downloads.pdfDownloads,
            downloads.epubDownloads,
            downloads.bloompubDownloads,
            comp.numQuestionsInBook,
            comp.numQuizzesTaken,
            comp.meanPctCorrect,
            comp.medianPctCorrect
    FROM common.get_reading_perbook_base_events(p_useBookIds, p_from, p_to, p_branding, p_country) reads

    FULL OUTER JOIN common.get_reading_perbook_comprehension_events(p_useBookIds, p_from, p_to, p_branding, p_country) comp
            ON reads.bookInstanceId = comp.bookInstanceId

    -- Full outer join, because it should be possible for a book to be downloaded but not read.
    FULL OUTER JOIN common.get_reading_perbook_download_events(p_useBookIds, p_from, p_to, p_branding, p_country) downloads
        ON reads.bookInstanceId = downloads.bookInstanceId

    ;
END; $$;


ALTER FUNCTION common.get_reading_perbook_events_exp(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1380 (class 1255 OID 1908747)
-- Name: get_reading_perday_events(boolean, date, date, text, text); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.get_reading_perday_events(p_usebookids boolean, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date, p_branding text DEFAULT NULL::text, p_country text DEFAULT NULL::text) RETURNS TABLE(datelocal date, bookbranding text, country character varying, bloomreadersessions bigint)
    LANGUAGE plpgsql
    AS $$

DECLARE

BEGIN

IF p_useBookIds
THEN
    RETURN QUERY
    
    -- SELECT  b.book_id,
    --         d.book_instance_id,
    --         d.book_title,
    --         d.time_utc
    -- FROM    temp_book_ids b,
    --         bloomreader.v_book_or_shelf_opened d
    -- WHERE   b.book_instance_id = d.book_instance_id
    -- ;
    
    -- SELECT  i.book_id,
    --         d.book_instance_id,
    --         d.book_title,
    --         DATE_TRUNC(d.timestamp) AS date_local
    --         --d.timestamp
    -- FROM    temp_book_ids i,
    --         bloomlibrary_test.v_download_book d
    -- WHERE   i.book_id = d.book_id
    -- GROUP BY date_local
    -- ;

    -- SELECT  count(i.book_id),
    --         d.timestamp::date AS date_local
    -- FROM    temp_book_ids i,
    --         bloomlibrary_test.v_download_book d
    -- WHERE   i.book_id = d.book_id
    -- GROUP BY date_local
    -- ;

    select  mv.date_local,
            mv.book_branding,
            mv.country,
            CAST(sum(mv.number_sessions) AS BIGINT) as number_sessions
    from    common.mv_reading_perday_events mv,
            temp_book_ids b
    WHERE   mv.book_instance_id = b.book_instance_id AND
            mv.date_local >= p_from AND 
            mv.date_local <= p_to
    group by mv.date_local,
            mv.book_branding,
            mv.country;

    -- SELECT  date_local,
    --         book_branding,
    --         country,
    --         number_sessions
    -- FROM    bloomreader.v_sessions_per_day,
    -- ;

    -- SELECT  p_bookId,
    --         p_bookInstanceId,
    --         bookTitle,
    --         date_local
    -- ;
ELSE
        RETURN QUERY    

        SELECT  mv.date_local,
                mv.book_branding,
                mv.country,
                mv.number_sessions
        FROM    common.mv_reading_perday_events_by_branding_and_country mv
        WHERE   (p_branding IS NULL OR mv.book_branding = p_branding) AND
                (p_country IS NULL OR mv.country = p_country) AND        
                mv.date_local >= p_from AND 
                mv.date_local <= p_to
        ;
END IF;
END; $$;


ALTER FUNCTION common.get_reading_perday_events(p_usebookids boolean, p_from date, p_to date, p_branding text, p_country text) OWNER TO silpgadmin;

--
-- TOC entry 1461 (class 1255 OID 1963064)
-- Name: refresh_materialized_views(); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.refresh_materialized_views() RETURNS void
    LANGUAGE plpgsql
    AS $$

BEGIN

    REFRESH MATERIALIZED VIEW common.mv_book_detail;
    REFRESH MATERIALIZED VIEW common.mv_download_book;
    REFRESH MATERIALIZED VIEW common.mv_pages_read;
    REFRESH MATERIALIZED VIEW common.mv_comprehension;
    REFRESH MATERIALIZED VIEW common.mv_reading_perbook_events;
    REFRESH MATERIALIZED VIEW common.mv_reading_perday_events;
    REFRESH MATERIALIZED VIEW common.mv_reading_perday_events_by_branding_and_country;

END; $$;


ALTER FUNCTION common.refresh_materialized_views() OWNER TO silpgadmin;

--
-- TOC entry 1336 (class 1255 OID 1957707)
-- Name: refresh_mv_comprehension(); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.refresh_mv_comprehension() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
REFRESH MATERIALIZED VIEW common.mv_comprehension;
RETURN NULL;
END;
$$;


ALTER FUNCTION common.refresh_mv_comprehension() OWNER TO silpgadmin;

--
-- TOC entry 1339 (class 1255 OID 1957688)
-- Name: refresh_mv_pages_read(); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.refresh_mv_pages_read() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
REFRESH MATERIALIZED VIEW common.mv_pages_read;
RETURN NULL;
END;
$$;


ALTER FUNCTION common.refresh_mv_pages_read() OWNER TO silpgadmin;

--
-- TOC entry 1342 (class 1255 OID 1957792)
-- Name: refresh_mv_reading_perbook_events(); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.refresh_mv_reading_perbook_events() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
REFRESH MATERIALIZED VIEW common.mv_reading_perbook_events;
RETURN NULL;
END;
$$;


ALTER FUNCTION common.refresh_mv_reading_perbook_events() OWNER TO silpgadmin;

--
-- TOC entry 1345 (class 1255 OID 1957796)
-- Name: refresh_mv_reading_perday_events(); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.refresh_mv_reading_perday_events() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
REFRESH MATERIALIZED VIEW common.mv_reading_perday_events;
RETURN NULL;
END;
$$;


ALTER FUNCTION common.refresh_mv_reading_perday_events() OWNER TO silpgadmin;

--
-- TOC entry 1332 (class 1255 OID 1957797)
-- Name: refresh_mv_reading_perday_events_by_branding_and_country(); Type: FUNCTION; Schema: common; Owner: silpgadmin
--

CREATE FUNCTION common.refresh_mv_reading_perday_events_by_branding_and_country() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
REFRESH MATERIALIZED VIEW common.mv_reading_perday_events_by_branding_and_country;
RETURN NULL;
END;
$$;


ALTER FUNCTION common.refresh_mv_reading_perday_events_by_branding_and_country() OWNER TO silpgadmin;

--
-- TOC entry 1318 (class 1255 OID 1890899)
-- Name: _final_median(numeric[]); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public._final_median(numeric[]) RETURNS numeric
    LANGUAGE sql IMMUTABLE
    AS $_$
   SELECT AVG(val)
   FROM (
     SELECT val
     FROM unnest($1) val
     ORDER BY 1
     LIMIT  2 - MOD(array_upper($1, 1), 2)
     OFFSET CEIL(array_upper($1, 1) / 2.0) - 1
   ) sub;
$_$;


ALTER FUNCTION public._final_median(numeric[]) OWNER TO silpgadmin;

--
-- TOC entry 590 (class 1255 OID 43963)
-- Name: bigint_to_inet(bigint); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bigint_to_inet(bigint) RETURNS inet
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
SELECT (($1>>24&255)||'.'||($1>>16&255)||'.'||($1>>8&255)||'.'||($1>>0&255))::inet
$_$;


ALTER FUNCTION public.bigint_to_inet(bigint) OWNER TO silpgadmin;

--
-- TOC entry 1566 (class 1255 OID 1969984)
-- Name: bl_find_location_uid_4_book_detail_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bl_find_location_uid_4_book_detail_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomlibrary_org.book_detail  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.bl_find_location_uid_4_book_detail_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1565 (class 1255 OID 1969983)
-- Name: bl_find_location_uid_4_book_or_shelf_opened_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bl_find_location_uid_4_book_or_shelf_opened_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomlibrary_org.book_or_shelf_opened  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.bl_find_location_uid_4_book_or_shelf_opened_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1567 (class 1255 OID 1970009)
-- Name: bl_find_location_uid_4_download_book_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bl_find_location_uid_4_download_book_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomlibrary_org.download_book  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.bl_find_location_uid_4_download_book_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1568 (class 1255 OID 1979671)
-- Name: bl_find_location_uid_4_open_collection_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bl_find_location_uid_4_open_collection_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomlibrary_org.open_collection  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.bl_find_location_uid_4_open_collection_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1564 (class 1255 OID 1969970)
-- Name: bl_find_location_uid_4_pages_read_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bl_find_location_uid_4_pages_read_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomlibrary_org.pages_read  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.bl_find_location_uid_4_pages_read_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1569 (class 1255 OID 1979675)
-- Name: bl_find_location_uid_4_search_failed_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.bl_find_location_uid_4_search_failed_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomlibrary_org.search_failed  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.bl_find_location_uid_4_search_failed_fctn() OWNER TO silpgadmin;

--
-- TOC entry 658 (class 1255 OID 720041)
-- Name: br_find_location_uid_4_application_opened_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.br_find_location_uid_4_application_opened_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreader.application_opened  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.br_find_location_uid_4_application_opened_fctn() OWNER TO silpgadmin;

--
-- TOC entry 770 (class 1255 OID 751715)
-- Name: br_find_location_uid_4_book_or_shelf_opened_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.br_find_location_uid_4_book_or_shelf_opened_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreader.book_or_shelf_opened  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.br_find_location_uid_4_book_or_shelf_opened_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1362 (class 1255 OID 1903368)
-- Name: br_find_location_uid_4_comprehension_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.br_find_location_uid_4_comprehension_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreader.comprehension  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.br_find_location_uid_4_comprehension_fctn() OWNER TO silpgadmin;

--
-- TOC entry 949 (class 1255 OID 720114)
-- Name: br_find_location_uid_4_pages_read_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.br_find_location_uid_4_pages_read_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreader.pages_read  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.br_find_location_uid_4_pages_read_fctn() OWNER TO silpgadmin;

--
-- TOC entry 954 (class 1255 OID 751792)
-- Name: br_find_location_uid_4_questions_correct_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.br_find_location_uid_4_questions_correct_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreader.questions_correct  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.br_find_location_uid_4_questions_correct_fctn() OWNER TO silpgadmin;

--
-- TOC entry 952 (class 1255 OID 720195)
-- Name: brb_find_location_uid_4_app_installed_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.brb_find_location_uid_4_app_installed_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;											
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreaderbeta.application_installed  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.brb_find_location_uid_4_app_installed_fctn() OWNER TO silpgadmin;

--
-- TOC entry 948 (class 1255 OID 720066)
-- Name: brb_find_location_uid_4_application_opened_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.brb_find_location_uid_4_application_opened_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreaderbeta.application_opened  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.brb_find_location_uid_4_application_opened_fctn() OWNER TO silpgadmin;

--
-- TOC entry 852 (class 1255 OID 751714)
-- Name: brb_find_location_uid_4_book_or_shelf_opened_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.brb_find_location_uid_4_book_or_shelf_opened_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreaderbeta.book_or_shelf_opened  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.brb_find_location_uid_4_book_or_shelf_opened_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1360 (class 1255 OID 1903302)
-- Name: brb_find_location_uid_4_comprehension_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.brb_find_location_uid_4_comprehension_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreaderbeta.comprehension  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.brb_find_location_uid_4_comprehension_fctn() OWNER TO silpgadmin;

--
-- TOC entry 950 (class 1255 OID 720143)
-- Name: brb_find_location_uid_4_pages_read_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.brb_find_location_uid_4_pages_read_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreaderbeta.pages_read  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.brb_find_location_uid_4_pages_read_fctn() OWNER TO silpgadmin;

--
-- TOC entry 955 (class 1255 OID 751793)
-- Name: brb_find_location_uid_4_questions_correct_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.brb_find_location_uid_4_questions_correct_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreaderbeta.questions_correct  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.brb_find_location_uid_4_questions_correct_fctn() OWNER TO silpgadmin;

--
-- TOC entry 625 (class 1255 OID 257927)
-- Name: country_name_func_br(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.country_name_func_br() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE country_temp varchar(50);
DECLARE xyz CURSOR FOR SELECT * from bloomreader.pages_read AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	country_temp :='';
	SELECT b.country_name FROM public.ip2location AS b 
           WHERE (SELECT ip2int(d.context_ip) FROM bloomreader.pages_read AS d 
               	  WHERE d.id = xyz_row.id ) 
           BETWEEN b.ip_from and b.ip_to into country_temp;
	
   	UPDATE bloomreader.pages_read  SET country_name = country_temp
               WHERE id = xyz_row.id;

	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.country_name_func_br() OWNER TO silpgadmin;

--
-- TOC entry 624 (class 1255 OID 257917)
-- Name: country_name_func_brb(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.country_name_func_brb() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE country_temp varchar(50);
DECLARE xyz CURSOR FOR SELECT * from bloomreaderbeta.pages_read AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	country_temp :='';
	SELECT b.country_name FROM public.ip2location AS b 
           WHERE (SELECT ip2int(d.context_ip) FROM bloomreaderbeta.pages_read AS d 
               	  WHERE d.id = xyz_row.id ) 
           BETWEEN b.ip_from and b.ip_to into country_temp;
	
   	UPDATE bloomreaderbeta.pages_read  SET country_name = country_temp
               WHERE id = xyz_row.id;

	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.country_name_func_brb() OWNER TO silpgadmin;

--
-- TOC entry 611 (class 1255 OID 257260)
-- Name: country_name_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.country_name_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE country_temp varchar(50);
DECLARE xyz CURSOR FOR SELECT * from bloomreadertest.pages_read AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	country_temp :='';
	SELECT b.country_name FROM public.ip2location AS b 
           WHERE (SELECT ip2int(d.context_ip) FROM bloomreadertest.pages_read AS d 
               	  WHERE d.id = xyz_row.id ) 
           BETWEEN b.ip_from and b.ip_to into country_temp;
	
   	UPDATE bloomreadertest.pages_read  SET country_name = country_temp
               WHERE id = xyz_row.id;

	RETURN NEXT xyz_row.id;		
END LOOP;

/*OPEN xyz;
   LOOP
   FETCH xyz INTO xyz_row;
       EXIT WHEN NOT FOUND;
	   IF xyz_row.id IS NOT NULL THEN
	   EXECUTE update_query;
	   RETURN NEXT xyz_row.id;
	   END IF;
      END LOOP;
  CLOSE xyz;
*/
END;
$$;


ALTER FUNCTION public.country_name_function() OWNER TO silpgadmin;

--
-- TOC entry 797 (class 1255 OID 434417)
-- Name: empty_to_null(text); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.empty_to_null(input_text text) RETURNS text
    LANGUAGE plpgsql
    AS $$  
BEGIN
	IF input_text ='' or input_text IS NULL THEN 
	   input_text := NULL;
	END IF;
	RETURN input_text;			
END;
$$;


ALTER FUNCTION public.empty_to_null(input_text text) OWNER TO silpgadmin;

--
-- TOC entry 641 (class 1255 OID 311474)
-- Name: extract(character varying, character, integer); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public."extract"(ip character varying, delimiter character, idx integer) RETURNS character varying
    LANGUAGE plpgsql IMMUTABLE
    AS $$

DECLARE
  ipint int8;
  iptemp text;
  string character varying;
BEGIN
RETURN
	CASE idx
		WHEN 0 THEN ip
	ELSE
		(
		SELECT string
		FROM
		(
			SELECT SUBSTRING(ip from n for strpos( delimiter, ip + delimiter, n ) - n ), n + 1 - LENGTH(REPLACE(LEFT(ip, n), delimiter, ''))
			WHERE SUBSTRING(delimiter + ip from n for 1) = delimiter
			AND n < LENGTH(ip) + 1) AS T(string, idx)
		)
	END;
END;

$$;


ALTER FUNCTION public."extract"(ip character varying, delimiter character, idx integer) OWNER TO silpgadmin;

--
-- TOC entry 1955 (class 1255 OID 1994827)
-- Name: find_closest_city_and_location_uid_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_closest_city_and_location_uid_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE geoid bigint;
BEGIN
	IF NEW.latitude IS NOT NULL AND NEW.longitude IS NOT NULL THEN
		-- search for towns within 1 degree (~69 miles/111 km near the equator)
		SELECT public.NearestTownOf500(NEW.latitude,NEW.longitude,1.0) INTO geoid;
		IF geoid IS NULL THEN
			-- if nothing found, search twice as far for any towns
			SELECT public.NearestTownOf500(NEW.latitude,NEW.longitude,2.0) INTO geoid;
		END IF;
		IF geoid IS NOT NULL THEN
			NEW.city_center_id := geoid;
		END IF;
	END IF;
	--
	-- The rest of this method is essentially unchanged from before, using the ip address
	-- to get the location.
	--
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b
		WHERE (SELECT public.ip2ipv4(ip_address_temp))
		BETWEEN b.ipv4_from and b.ipv4_to
		INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN
		country_code_temp := '-';
	END IF;
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN
		country_name_temp := '-';
	END IF;
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN
		hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN
		hold_city := '-';
	END IF;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		WHERE i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
		counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p
		( loc_uid, country_code, country_name, region, city  )
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	NEW.location_uid := loc_uid_temp;
	--
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_closest_city_and_location_uid_fctn() OWNER TO silpgadmin;

--
-- TOC entry 775 (class 1255 OID 479075)
-- Name: find_location_uid_4_app_installed_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_app_installed_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;											
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomreader.application_installed  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_app_installed_fctn() OWNER TO silpgadmin;

--
-- TOC entry 940 (class 1255 OID 710333)
-- Name: find_location_uid_4_change_content_languages_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_change_content_languages_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_content_languages  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_change_content_languages_fctn() OWNER TO silpgadmin;

--
-- TOC entry 942 (class 1255 OID 710363)
-- Name: find_location_uid_4_change_page_layout_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_change_page_layout_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_page_layout  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_change_page_layout_fctn() OWNER TO silpgadmin;

--
-- TOC entry 944 (class 1255 OID 710383)
-- Name: find_location_uid_4_change_picture_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_change_picture_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_picture  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_change_picture_fctn() OWNER TO silpgadmin;

--
-- TOC entry 834 (class 1255 OID 710393)
-- Name: find_location_uid_4_change_video_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_change_video_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_video  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_change_video_fctn() OWNER TO silpgadmin;

--
-- TOC entry 844 (class 1255 OID 710404)
-- Name: find_location_uid_4_create_bloom_pack_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_create_bloom_pack_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.create_bloom_pack  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_create_bloom_pack_fctn() OWNER TO silpgadmin;

--
-- TOC entry 897 (class 1255 OID 479040)
-- Name: find_location_uid_4_create_book_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_create_book_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;											
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.create_book  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_create_book_fctn() OWNER TO silpgadmin;

--
-- TOC entry 846 (class 1255 OID 710418)
-- Name: find_location_uid_4_create_new_vernacular_collection_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_create_new_vernacular_collection_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;											
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.create_new_vernacular_collection  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_create_new_vernacular_collection_fctn() OWNER TO silpgadmin;

--
-- TOC entry 898 (class 1255 OID 479028)
-- Name: find_location_uid_4_created_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_created_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.created  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_created_fctn() OWNER TO silpgadmin;

--
-- TOC entry 843 (class 1255 OID 710438)
-- Name: find_location_uid_4_created_new_source_collection_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_created_new_source_collection_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;											
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.created_new_source_collection  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_created_new_source_collection_fctn() OWNER TO silpgadmin;

--
-- TOC entry 849 (class 1255 OID 710452)
-- Name: find_location_uid_4_delete_page_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_delete_page_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;											
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.delete_page  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_delete_page_fctn() OWNER TO silpgadmin;

--
-- TOC entry 900 (class 1255 OID 478968)
-- Name: find_location_uid_4_launch_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_launch_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;																			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.launch  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_launch_fctn() OWNER TO silpgadmin;

--
-- TOC entry 901 (class 1255 OID 719925)
-- Name: find_location_uid_4_print_pdf_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_print_pdf_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.print_pdf  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_print_pdf_fctn() OWNER TO silpgadmin;

--
-- TOC entry 860 (class 1255 OID 719800)
-- Name: find_location_uid_4_register_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_register_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;																			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.register  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_register_fctn() OWNER TO silpgadmin;

--
-- TOC entry 879 (class 1255 OID 719897)
-- Name: find_location_uid_4_upload_book_success_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_upload_book_success_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.upload_book_success  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_upload_book_success_fctn() OWNER TO silpgadmin;

--
-- TOC entry 916 (class 1255 OID 719956)
-- Name: find_location_uid_4_users_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_4_users_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;			
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) 
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.users  
	SET location_uid = loc_uid_temp
	WHERE id = NEW.id;
	--	
	NEW.location_uid := loc_uid_temp;
	--	
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_4_users_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1961 (class 1255 OID 2023708)
-- Name: find_location_uid_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_location_uid_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b
		WHERE (SELECT public.ip2ipv4(ip_address_temp))
		BETWEEN b.ipv4_from and b.ipv4_to
		INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN
		country_code_temp := '-';
	END IF;
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN
		country_name_temp := '-';
	END IF;
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN
		hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN
		hold_city := '-';
	END IF;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		WHERE i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
		counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p
		( loc_uid, country_code, country_name, region, city  )
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	NEW.location_uid := loc_uid_temp;
	--
RETURN NEW;
END;
$$;


ALTER FUNCTION public.find_location_uid_fctn() OWNER TO silpgadmin;

--
-- TOC entry 939 (class 1255 OID 710316)
-- Name: find_missing_users(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.find_missing_users() RETURNS SETOF record
    LANGUAGE plpgsql
    AS $_$
DECLARE err_constraint varchar(100);
DECLARE counter bigint;
DECLARE country_temp text;
DECLARE temp_id varchar(1024);
DECLARE full_name text;
DECLARE concat_name text;
DECLARE f_name text;
DECLARE l_name text;
DECLARE ip_temp text;
DECLARE loc_id bigint;
DECLARE xyz CURSOR FOR SELECT DISTINCT ON(a.user_id) USER_ID, a.user_name,
	substring(trim(a.user_name) FROM '^([^ ]+)') AS first_name,
	substring(trim(a.user_name) FROM '([^ ]+)$') AS last_name
	FROM   bloomapp.change_video AS a
	WHERE a.user_id NOT IN (select  b.user_id FROM bloomapp.register AS b)
    ORDER BY a.user_id;
DECLARE xyz_row RECORD;
BEGIN
FOR xyz_row IN xyz
    LOOP
	temp_id := NULL;
	full_name := NULL;
	f_name := NULL;
	l_name := NULL;
	SELECT b.id, b.first_name ||' '||b.last_name AS user_name
	FROM bloomapp.users AS b 
		WHERE b.id = xyz_row.USER_ID
		INTO temp_id, full_name ;

	IF temp_id IS NULL THEN
		RAISE 'Missing user ID: %', temp_id USING ERRCODE = 'missing';
		RAISE NOTICE 'Name (%)', full_name;
	END IF;

	RETURN NEXT xyz_row;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$_$;


ALTER FUNCTION public.find_missing_users() OWNER TO silpgadmin;

--
-- TOC entry 829 (class 1255 OID 447110)
-- Name: fixdata_createbook(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.fixdata_createbook() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE counter bigint;
DECLARE country_temp text;
DECLARE ip_temp text;
DECLARE loc_id bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.create_book AS a
		WHERE a.location_uid IS NOT NULL
		ORDER BY a.location_uid, a.user_id, a.timestamp;
DECLARE xyz_row RECORD;
BEGIN
FOR xyz_row IN xyz
    LOOP
	counter := 0;
	loc_id := NULL;
	country_temp := NULL;
	ip_temp := NULL;
	SELECT b.ip, b.location_uid, b.country
	FROM bloomreadertest.clone_create_book AS b 
		WHERE b.timestamp = xyz_row.timestamp
		AND b.user_id = xyz_row.user_id
		INTO ip_temp, loc_id, country_temp;
	UPDATE bloomapp.create_book AS c 
  		SET ip = ip_temp, location_uid = loc_id, country = country_temp
			WHERE c.timestamp = xyz_row.timestamp
			AND c.user_id = xyz_row.user_id;

	RETURN NEXT xyz_row.user_id;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.fixdata_createbook() OWNER TO silpgadmin;

--
-- TOC entry 774 (class 1255 OID 446860)
-- Name: fixdata_createnewvernacularcollection(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.fixdata_createnewvernacularcollection() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE counter bigint;
DECLARE country_temp text;
DECLARE ip_temp text;
DECLARE loc_id bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.create_new_vernacular_collection AS a
		WHERE a.location_uid IS NOT NULL
		ORDER BY a.location_uid, a.user_id, a.timestamp;
DECLARE xyz_row RECORD;
BEGIN
FOR xyz_row IN xyz
    LOOP
	counter := 0;
	loc_id := NULL;
	country_temp := NULL;
	ip_temp := NULL;
	SELECT b.ip, b.location_uid, b.country
	FROM bloomreadertest.clone_create_new_vernacular_collection AS b 
		WHERE b.timestamp = xyz_row.timestamp
		AND b.user_id = xyz_row.user_id
		INTO ip_temp, loc_id, country_temp;
	UPDATE bloomapp.create_new_vernacular_collection AS c 
  		SET ip = ip_temp, location_uid = loc_id, country = country_temp
			WHERE c.timestamp = xyz_row.timestamp
			AND c.user_id = xyz_row.user_id;

	RETURN NEXT xyz_row.user_id;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.fixdata_createnewvernacularcollection() OWNER TO silpgadmin;

--
-- TOC entry 878 (class 1255 OID 471133)
-- Name: generate_anonymous_id(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.generate_anonymous_id() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE time_max_for_historical_data timestamp;
DECLARE new_id varchar(1024);
DECLARE err_constraint varchar(100);
DECLARE country_code_temp varchar(2);
DECLARE country_name_temp varchar(64);
DECLARE region_temp varchar(100);
DECLARE city_temp varchar(100);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT DISTINCT(a.user_id) from bloomreadertest.mpdata_preview AS a
	   ORDER BY a.user_id;
DECLARE xyz_row RECORD;
BEGIN
new_id := NULL;
FOR xyz_row IN xyz
    LOOP
	new_id := NULL;
	SELECT gen_random_uuid() INTO new_id;

   	UPDATE bloomreadertest.mpdata_preview
	SET  anonymous_id = new_id
	WHERE user_id = xyz_row.user_id;

	RETURN NEXT xyz_row.user_id;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 ? Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.generate_anonymous_id() OWNER TO silpgadmin;

--
-- TOC entry 833 (class 1255 OID 471189)
-- Name: generate_context_page_search(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.generate_context_page_search() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE temp_url text;
DECLARE search_part text;
DECLARE xyz CURSOR FOR SELECT DISTINCT(a.source_for_context_page_search)
		FROM bloomreadertest.mpdata_preview AS a
	   	WHERE POSITION('?' IN a.source_for_context_page_search) > 0;
DECLARE xyz_row RECORD;
BEGIN
   	UPDATE bloomreadertest.mpdata_preview
	SET  source_for_context_page_search = NULL
	WHERE POSITION('?' IN source_for_context_page_search) = 0;

temp_url := NULL;
search_part := NULL;
FOR xyz_row IN xyz
    LOOP
	temp_url := xyz_row.source_for_context_page_search;

   	UPDATE bloomreadertest.mpdata_preview
	SET  source_for_context_page_search = 
				SUBSTRING(source_for_context_page_search FROM 
				POSITION('?' IN source_for_context_page_search) )
	WHERE source_for_context_page_search = temp_url;
	temp_url := NULL;
	RETURN NEXT xyz_row.source_for_context_page_search;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 ? Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.generate_context_page_search() OWNER TO silpgadmin;

--
-- TOC entry 850 (class 1255 OID 472424)
-- Name: generate_context_page_url(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.generate_context_page_url() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE url text;
DECLARE search_part text;
DECLARE xyz CURSOR FOR SELECT DISTINCT(a.context_page_url)
		FROM bloomreadertest.mpdata_log_out AS a
	   	WHERE  a.context_page_url IS NOT NULL;
DECLARE xyz_row RECORD;
BEGIN
   	UPDATE bloomreadertest.mpdata_log_out
	SET  source_for_context_page_search = NULL
	WHERE context_page_url IS NULL;

url := NULL;
search_part := NULL;
FOR xyz_row IN xyz
    LOOP
	url := xyz_row.context_page_url;

   	UPDATE bloomreadertest.mpdata_log_out
	SET  source_for_context_page_search = url
	WHERE context_page_url = url;
	url := NULL;
	RETURN NEXT xyz_row.context_page_url;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 ? Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.generate_context_page_url() OWNER TO silpgadmin;

--
-- TOC entry 711 (class 1255 OID 415312)
-- Name: generate_event_id(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.generate_event_id() RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
  output TEXT := '';
BEGIN
    output := CONCAT(generate_uid(8),'-',generate_uid(4),'-',generate_uid(4),'-',generate_uid(4),'-',generate_uid(12));
  RETURN output;
END;
$$;


ALTER FUNCTION public.generate_event_id() OWNER TO silpgadmin;

--
-- TOC entry 712 (class 1255 OID 415308)
-- Name: generate_uid(integer); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.generate_uid(size integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
 -- characters TEXT := 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
  characters TEXT := 'abcdefghijklmnopqrstuvwxyz0123456789';
  bytes BYTEA := public.random_bytea(size);
  l INT := length(characters);
  i INT := 0;
  output TEXT := '';
BEGIN
  WHILE i < size LOOP
    output := output || substr(characters, get_byte(bytes, i) % l + 1, 1);
    i := i + 1;
  END LOOP;
  RETURN output;
END;
$$;


ALTER FUNCTION public.generate_uid(size integer) OWNER TO silpgadmin;

--
-- TOC entry 863 (class 1255 OID 471798)
-- Name: generate_user_agent(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.generate_user_agent() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE time_max_for_historical_data timestamp;
DECLARE new_id varchar(1024);
DECLARE err_constraint varchar(100);
DECLARE user_agent_temp text;
DECLARE xyz CURSOR FOR SELECT DISTINCT ON (a.browser, a.browser_version, a.osversion)
		a.browser, a.browser_version, a.osversion
		from bloomreadertest.mpdata_preview AS a
		WHERE a.browser IS NOT NULL;
DECLARE xyz_row RECORD;
BEGIN
user_agent_temp := NULL;
FOR xyz_row IN xyz
    LOOP
	user_agent_temp := NULL;
	IF xyz_row.browser_version IS NULL and xyz_row.osversion IS NULL THEN
		user_agent_temp := xyz_row.browser;
	   	UPDATE bloomreadertest.mpdata_preview
		SET  context_user_agent = user_agent_temp
		WHERE browser = xyz_row.browser
			AND (browser_version IS NULL) 
			AND (osversion IS NULL);
			user_agent_temp := NULL;
	ELSIF (xyz_row.browser_version IS NULL) THEN
		SELECT xyz_row.browser||' ('||xyz_row.osversion||')' INTO user_agent_temp;
	   	UPDATE bloomreadertest.mpdata_preview
		SET  context_user_agent = user_agent_temp
		WHERE browser =  xyz_row.browser 
			AND osversion =  xyz_row.osversion 
			AND (browser_version IS NULL);
			user_agent_temp := NULL;	
	ELSIF (xyz_row.osversion IS NULL) THEN		
		SELECT xyz_row.browser||'/'||xyz_row.browser_version INTO user_agent_temp;
		UPDATE bloomreadertest.mpdata_preview
		SET  context_user_agent = user_agent_temp
		WHERE browser =  xyz_row.browser 
			AND browser_version =  xyz_row.browser_version 
			AND (osversion IS NULL);
			user_agent_temp := NULL;
		ELSE
			SELECT xyz_row.browser||'/'||xyz_row.browser_version||' ('||xyz_row.osversion||')' INTO user_agent_temp;
			UPDATE bloomreadertest.mpdata_preview
			SET  context_user_agent = user_agent_temp
			WHERE browser =  xyz_row.browser 
				AND browser_version =  xyz_row.browser_version 
				AND osversion  =  xyz_row.osversion;
				user_agent_temp := NULL;
	END IF;
	RETURN NEXT xyz_row.browser;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 ? Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.generate_user_agent() OWNER TO silpgadmin;

--
-- TOC entry 1255 (class 1255 OID 1872888)
-- Name: get_book_stats(character varying, character varying, date, date); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.get_book_stats(p_bookid character varying, p_bookinstanceid character varying, p_from date DEFAULT ((20000101)::text)::date, p_to date DEFAULT ((30000101)::text)::date) RETURNS TABLE(bookid character varying, totalreads integer, bloomreaderreads integer, bloomlibraryreads integer, totaldownloads integer, shelldownloads integer, libraryviews integer, devicecount integer)
    LANGUAGE plpgsql
    AS $$

-- For now, just ignoring timestamp because we don't have a use case in which we are filtering for it yet,
-- and it is likey a performance drag.

DECLARE

BEGIN
        SELECT  count(*),
                count(distinct o.device_unique_id) 
        INTO    bloomReaderReads, 
                deviceCount
        FROM    bloomreader.v_book_or_shelf_opened o
        WHERE   o.book_instance_id = p_bookInstanceId --AND
                --o.time_utc BETWEEN p_from AND (p_to + interval '1 day')
        ;

        SELECT  count(*)
                INTO libraryViews
        FROM    bloomlibrary_test.v_book_detail bd
        WHERE   bd.book_id = p_bookId --AND
                --bd.timestamp BETWEEN p_from AND (p_to + interval '1 day')
        ;

        DROP TABLE IF EXISTS downloads;
        CREATE TEMP TABLE downloads AS
        SELECT  d.event_type, 
                count(d.event_type) AS cnt
        FROM    bloomlibrary_test.v_download_book d
        WHERE   d.book_id = p_bookId --AND
                --d.timestamp BETWEEN p_from AND (p_to + interval '1 day')
        GROUP BY d.event_type;
        SELECT  cnt
        INTO    bloomLibraryReads
        FROM    downloads 
        WHERE   event_type = 'read';
        SELECT  cnt
        INTO    shellDownloads
        FROM    downloads 
        WHERE   event_type = 'shell' OR event_type IS NULL;
        SELECT  cnt
        INTO    totalDownloads
        FROM    downloads 
        WHERE   event_type <> 'read';

        RETURN QUERY

        SELECT  p_bookId,
                COALESCE(bloomLibraryReads, 0) + COALESCE(bloomReaderReads, 0) AS totalReads,
                COALESCE(bloomReaderReads, 0),
                COALESCE(bloomLibraryReads, 0),
                COALESCE(totalDownloads, 0),
                COALESCE(shellDownloads, 0),
                COALESCE(libraryViews, 0),
                COALESCE(deviceCount, 0)
        ;


--     RETURN QUERY
    
--     WITH    downloads AS 
--             (SELECT d.event_type, 
--                     count(d.event_type) AS cnt
--             FROM    bloomlibrary_test.v_download_book d
--             WHERE   d.book_id = p_bookId --AND
--                     --d.timestamp BETWEEN p_from AND (p_to + interval '1 day')
--             GROUP BY d.event_type
--             ),
--             bloomReaderOpens AS
--             (SELECT count(*) AS cnt,
--                     count(distinct o.device_unique_id) deviceCount
--             FROM    bloomreader.v_book_or_shelf_opened o
--             WHERE   o.book_instance_id = p_bookInstanceId --AND
--                     --o.time_utc BETWEEN p_from AND (p_to + interval '1 day')
--             ),
--             bookDetailViews AS
--             (SELECT count(*) AS cnt
--             FROM    bloomlibrary_test.v_book_detail bd
--             WHERE   bd.book_id = p_bookId --AND
--                     --bd.timestamp BETWEEN p_from AND (p_to + interval '1 day')
--             )
--     SELECT  cast (p_bookId AS TEXT),
--             cast (COALESCE((SELECT cnt FROM bloomReaderOpens), 0) + COALESCE((SELECT cnt FROM downloads WHERE event_type = 'read'), 0) AS INT) AS totalReads,
--             cast (COALESCE((SELECT SUM(cnt) FROM downloads WHERE event_type <> 'read'), 0) AS INT) AS totalDownloads,
--             cast (COALESCE((SELECT cnt FROM bloomReaderOpens), 0) AS INT) AS bloomReaderReads,
--             cast (COALESCE((SELECT bloomReaderOpens.deviceCount FROM bloomReaderOpens), 0) AS INT) AS deviceCount,
--             cast (COALESCE((SELECT cnt FROM downloads WHERE event_type = 'shell' OR event_type IS NULL), 0) AS INT) AS shellDownloads,
--             cast (COALESCE((SELECT cnt FROM bookDetailViews), 0) AS INT) AS libraryViews
--     ;
END; $$;


ALTER FUNCTION public.get_book_stats(p_bookid character varying, p_bookinstanceid character varying, p_from date, p_to date) OWNER TO silpgadmin;

--
-- TOC entry 685 (class 1255 OID 312621)
-- Name: hex_to_int(character varying); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.hex_to_int(hexval character varying) RETURNS numeric
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    result  int;
BEGIN
    EXECUTE 'SELECT x''' || hexval || '''::int' INTO result;
    RETURN result;
END;
$$;


ALTER FUNCTION public.hex_to_int(hexval character varying) OWNER TO silpgadmin;

--
-- TOC entry 591 (class 1255 OID 43964)
-- Name: inet_to_bigint(inet); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.inet_to_bigint(inet) RETURNS bigint
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
SELECT $1 - inet '0.0.0.0'
$_$;


ALTER FUNCTION public.inet_to_bigint(inet) OWNER TO silpgadmin;

--
-- TOC entry 959 (class 1255 OID 834814)
-- Name: insert_context_ip_country_bloom_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.insert_context_ip_country_bloom_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN

	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(NEW.context_ip))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	INSERT INTO public.ip2loc_sm_tab as s  
		(context_ip, country_code, country_name)
	VALUES
		(public.ip2ipv4(ip_address_temp), country_code_temp, country_name_temp)
    ON CONFLICT ON CONSTRAINT ip2loc_sm_tab_db1_pkey DO NOTHING;

	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	

RETURN NEW;
END;

$$;


ALTER FUNCTION public.insert_context_ip_country_bloom_fctn() OWNER TO silpgadmin;

--
-- TOC entry 958 (class 1255 OID 321628)
-- Name: insert_ip_country_bloom_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.insert_ip_country_bloom_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
BEGIN

	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := NEW.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL;
SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(NEW.ip))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	INSERT INTO public.ip2loc_sm_tab as s  
		(context_ip, country_code, country_name)
	VALUES
		(public.ip2ipv4(ip_address_temp), country_code_temp, country_name_temp)
    ON CONFLICT ON CONSTRAINT ip2loc_sm_tab_db1_pkey DO NOTHING;

	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	

RETURN NEW;
END;

$$;


ALTER FUNCTION public.insert_ip_country_bloom_fctn() OWNER TO silpgadmin;

--
-- TOC entry 827 (class 1255 OID 396822)
-- Name: insert_language_row_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.insert_language_row_fctn() RETURNS trigger
    LANGUAGE plpgsql
    AS $$

DECLARE lang_code_temp varchar(20);
DECLARE lang_name_temp varchar(50);
BEGIN
	lang_code_temp := NEW.uilanguage;
	lang_name_temp :='';
	SELECT 
	CASE
        WHEN length(lang_code_temp) = 2 then (SELECT c.clname FROM public.languagecodes AS c 
							WHERE lang_code_temp=c.langid2)
	   WHEN length(lang_code_temp) > 3 then  (SELECT e.clname FROM public.languagecodes AS e 
						WHERE SUBSTRING(lang_code_temp from 1 for 2)=e.langid2)
	   ELSE /* length(lang_code_temp) = 3 then */ 
		(SELECT d.clname FROM public.languagecodes AS d WHERE lang_code_temp=d.langid)
	END AS UILanguage
	INTO lang_name_temp;
IF lang_code_temp IS NOT NULL THEN
	INSERT INTO public.used_languages as s  
	(language_id, language_name)
	VALUES
	(lang_code_temp, lang_name_temp)
     ON CONFLICT ON CONSTRAINT used_languages_pkey DO NOTHING;
END IF;
RETURN NEW;
END;
$$;


ALTER FUNCTION public.insert_language_row_fctn() OWNER TO silpgadmin;

--
-- TOC entry 710 (class 1255 OID 43986)
-- Name: ip2country_name(character varying); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.ip2country_name(character varying) RETURNS character varying
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$

SELECT country_name
      FROM public.ip2location
      WHERE box(point(ip_from,ip_from),point(ip_to,ip_to)) @> box(point (public.ip2int($1),public.ip2int($1)), point(public.ip2int($1),public.ip2int($1)));

$_$;


ALTER FUNCTION public.ip2country_name(character varying) OWNER TO silpgadmin;

--
-- TOC entry 592 (class 1255 OID 43407)
-- Name: ip2int(character varying); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.ip2int(ip character varying) RETURNS bigint
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
  ipint int8;
BEGIN
  EXECUTE format('SELECT inet %L - %L', ip, '0.0.0.0') into ipint;

  return ipint;
END;
$$;


ALTER FUNCTION public.ip2int(ip character varying) OWNER TO silpgadmin;

--
-- TOC entry 709 (class 1255 OID 321531)
-- Name: ip2ipv4(character varying); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.ip2ipv4(ip character varying) RETURNS bigint
    LANGUAGE plpgsql IMMUTABLE
    AS $$

DECLARE
  retint bigint;
  ipint text;
  iptemp varchar;  --decimal(39,0);
  retip  varchar;
  newip text;
  colon_occ integer;
  double_colon_position integer;
  num_of_octets integer;
    RestOfIP text;
	Octet1 text; Octet2 text; Octet3 text; Octet4 text;
	Octet5 text; Octet6 text; Octet7 text; Octet8 text;
	aa text; bb text; cc text; dd text; ee text; ff text; 
	gg text; hh text; ii text; jj text; kk text; ll text; 
	mm text; nn text; oo text; pp text;
	a integer; b integer; c integer; d integer; e integer; 
	f integer; g integer; h integer; i integer; j integer; 
	k integer; l integer; m integer; n integer; o integer; 
	p integer; 
BEGIN
  	IF (STRPOS(ip,'<') > 0)  THEN
  		retip:='0.0.0.0';
        EXECUTE format('SELECT inet %L - %L', retip, '0.0.0.0') into retint;
		return retint;
  	END IF;
	IF STRPOS(ip,'.') > 0 THEN
		IF STRPOS(ip,',') > 0 THEN
			retip:=ip; 
			SELECT reverse(split_part(reverse(retip), ',', 1)) into retip;
			EXECUTE format('SELECT inet %L - %L', retip, '0.0.0.0') into retint;
			return retint;
		ELSE 
	  		retip:=ip;   
        	EXECUTE format('SELECT inet %L - %L', retip, '0.0.0.0') into retint;
			return retint;
		END IF;
	ELSE
         IF STRPOS(ip,':') > 0 THEN
	  		BEGIN
	  			colon_occ:=7;
				RestOfIP := ip;
	    		SELECT COUNT(*) FROM regexp_matches(ip,':','g') into colon_occ;
				IF colon_occ < 7 THEN
		  			IF colon_occ = 6 THEN
			 			SELECT (replace(ip, '::', ':0:0:')) into RestOfIP;
		  			ELSE
		     			IF colon_occ = 5 THEN
		        			SELECT (replace(ip, '::', ':0:0:0:')) into RestOfIP;
		     			END IF;
		  			END IF;
	    		END IF; 
	  		SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet8 ;   
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet8)+1))) into RestOfIP ;
		
			SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet7 ;
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet7)+1))) into RestOfIP ;
		
			SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet6 ;
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet6)+1))) into RestOfIP ;
		
			SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet5 ;
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet5)+1))) into RestOfIP ;
		
			SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet4 ;
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet4)+1))) into RestOfIP ;

			SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet3 ;
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet3)+1))) into RestOfIP ;

			SELECT(SUBSTRING(RestOfIP,1,STRPOS(RestOfIP,':')-1)) into Octet2 ;
			SELECT(RIGHT(RestOfIP,-(LENGTH (Octet2)+1))) into Octet1 ;	
		
			SELECT(SUBSTRING(Octet7,1,2)) into cc;	SELECT(SUBSTRING(Octet7,3,2)) into dd;
			SELECT(SUBSTRING(Octet6,1,2)) into ee;	SELECT(SUBSTRING(Octet6,3,2)) into ff;
			c:=public.hex_to_int(cc);  d:=public.hex_to_int(dd);	
			e:=public.hex_to_int(ee);  f:=public.hex_to_int(ff);  

			retip := (CAST(c AS varchar)||CAST('.' AS varchar)||CAST(d AS varchar)||CAST('.' AS varchar)||
					  CAST(e AS varchar)||CAST('.' AS varchar)||CAST(f AS varchar));
			END;
		ELSE  
			retip:='0.0.0.0';
			EXECUTE format('SELECT inet %L - %L', retip, '0.0.0.0') into retint;
			return retint;
		END IF;
	 END IF;
	 EXECUTE format('SELECT inet %L - %L', retip, '0.0.0.0') into retint;
     return retint;

EXCEPTION
WHEN others THEN
	return 0;

END;

$$;


ALTER FUNCTION public.ip2ipv4(ip character varying) OWNER TO silpgadmin;

--
-- TOC entry 589 (class 1255 OID 43403)
-- Name: ip2numeric(character varying); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.ip2numeric(ip character varying) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
DECLARE
  ip_numeric numeric;
BEGIN
  EXECUTE format('SELECT inet %L - %L', ip, '0.0.0.0') into ip_numeric;

  return ip_numeric;
END;
$$;


ALTER FUNCTION public.ip2numeric(ip character varying) OWNER TO silpgadmin;

--
-- TOC entry 715 (class 1255 OID 426506)
-- Name: migrate_ipv4_to_bigint(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.migrate_ipv4_to_bigint() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_from  bigint;
DECLARE ip_to  bigint;
DECLARE err_constraint varchar(100);
DECLARE xyz CURSOR FOR SELECT * from public.ipv42loc AS a ;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN
ip_from := 0;
ip_to := 0;
FOR xyz_row IN xyz
    LOOP
	SELECT CAST(xyz_row.ipv4_from AS bigint) INTO ip_from;
	SELECT CAST(xyz_row.ipv4_to AS bigint) INTO ip_to;
   	INSERT INTO  public.ipv42location as s  
	( ipv4_from, ipv4_to, country_code, country_name, region, city )
	VALUES
	( ip_from, ip_to, xyz_row.country_code, xyz_row.country_name, xyz_row.region, xyz_row.city ) 
    ON CONFLICT ON CONSTRAINT ipv42location_db1_pkey DO NOTHING;
	RETURN NEXT ip_from;			
END LOOP;
END;
$$;


ALTER FUNCTION public.migrate_ipv4_to_bigint() OWNER TO silpgadmin;

--
-- TOC entry 714 (class 1255 OID 426559)
-- Name: migrate_ipv6_to_bigint(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.migrate_ipv6_to_bigint() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_from decimal (39,0);
DECLARE ip_to decimal (39,0);
DECLARE err_constraint varchar(100);
DECLARE xyz CURSOR FOR SELECT * from public.ipv62loc AS a ;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN
ip_from := 0;
ip_to := 0;
FOR xyz_row IN xyz
    LOOP
	SELECT CAST(xyz_row.ipv6_from AS decimal (39,0)) INTO ip_from;
	SELECT CAST(xyz_row.ipv6_to AS decimal (39,0)) INTO ip_to;
   	INSERT INTO  public.ipv62location as s  
	( ipv6_from, ipv6_to, country_code, country_name, region, city )
	VALUES
	( ip_from, ip_to, xyz_row.country_code, xyz_row.country_name, xyz_row.region, xyz_row.city ) 
    ON CONFLICT ON CONSTRAINT ipv62location_db1_pkey DO NOTHING;
	RETURN NEXT ip_from;			
END LOOP;
END;
$$;


ALTER FUNCTION public.migrate_ipv6_to_bigint() OWNER TO silpgadmin;

--
-- TOC entry 957 (class 1255 OID 751921)
-- Name: move_ip2loc_temp_to_new(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.move_ip2loc_temp_to_new() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_from_new bigint;
DECLARE ip_to_new bigint;
DECLARE err_constraint varchar(100);
DECLARE xyz CURSOR FOR SELECT * from public.ip2location_temp AS a ;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN
ip_from_new := 0;
ip_to_new := 0;
FOR xyz_row IN xyz
    LOOP
	SELECT CAST(xyz_row.ip_from AS bigint) INTO ip_from_new;
	SELECT CAST(xyz_row.ip_to AS bigint) INTO ip_to_new;
   	INSERT INTO  public.ip2location_new as s  
	( ip_from, ip_to, country_code, country_name )
	VALUES
	( ip_from_new, ip_to_new, xyz_row.country_code, xyz_row.country_name ) 
    ON CONFLICT ON CONSTRAINT ip2location_new_db1_pkey DO NOTHING;
	RETURN NEXT ip_from_new;			
END LOOP;
END;
$$;


ALTER FUNCTION public.move_ip2loc_temp_to_new() OWNER TO silpgadmin;

--
-- TOC entry 1956 (class 1255 OID 1994826)
-- Name: nearesttownof500(numeric, numeric, numeric); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.nearesttownof500(mylatitude numeric, mylongitude numeric, bound numeric) RETURNS bigint
    LANGUAGE plpgsql
    AS $$
DECLARE
	closest bigint;
	myLocation public.geometry;
BEGIN
	SELECT public.ST_POINT(myLongitude, myLatitude) INTO myLocation;
	SELECT geoid
	FROM public.geography_city_centers
	WHERE public.ST_DISTANCE(myLocation, geom) < bound
	ORDER BY public.ST_DISTANCE(myLocation, geom)
	LIMIT 1 INTO closest;
	RETURN closest;
END;
$$;


ALTER FUNCTION public.nearesttownof500(mylatitude numeric, mylongitude numeric, bound numeric) OWNER TO silpgadmin;

--
-- TOC entry 708 (class 1255 OID 309981)
-- Name: populate_country_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_country_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp bigint;
DECLARE country_temp varchar(50);
DECLARE country_code_temp char(3);
DECLARE xyz CURSOR FOR SELECT * from bloomapp.create_book AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	SELECT public.ip2ipv4(xyz_row.ip) into ip_address_temp;
	country_code_temp :='';
	country_temp :=''; 
	SELECT b.country_code, b.country_name FROM public.ip2location AS b 
           WHERE (SELECT ip_address_temp FROM bloomapp.create_book AS d 
               	  WHERE d.id = xyz_row.id ) 
           BETWEEN b.ip_from and b.ip_to into country_code_temp, country_temp ;
	
   	INSERT INTO  public.ip2loc_sm_tab as s  
	( context_ip, country_code, country_name)
	VALUES
	(ip_address_temp, country_code_temp, country_temp)
     ON CONFLICT ON CONSTRAINT ip2loc_sm_tab_db1_pkey DO NOTHING;

	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_country_function() OWNER TO silpgadmin;

--
-- TOC entry 639 (class 1255 OID 309980)
-- Name: populate_country_function_br(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_country_function_br() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE country_temp varchar(50);
DECLARE country_code_temp char(3);
DECLARE xyz CURSOR FOR SELECT * from bloomreader.book_or_shelf_opened AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :='';
	country_temp :=''; 
	SELECT b.country_code, b.country_name FROM public.ip2location AS b 
           WHERE (SELECT public.ip2int(d.context_ip) FROM bloomreader.book_or_shelf_opened AS d 
               	  WHERE d.id = xyz_row.id ) 
           BETWEEN b.ip_from and b.ip_to into country_code_temp, country_temp ;
	
   	INSERT INTO  public.ip2loc_sm_tab as s  
	( context_ip, country_code, country_name)
	VALUES
	(public.ip2int(ip_address_temp), country_code_temp, country_temp)
     ON CONFLICT ON CONSTRAINT ip2loc_sm_tab_db1_pkey DO NOTHING;

	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_country_function_br() OWNER TO silpgadmin;

--
-- TOC entry 640 (class 1255 OID 309982)
-- Name: populate_country_function_brb(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_country_function_brb() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE country_temp varchar(50);
DECLARE country_code_temp char(3);
DECLARE xyz CURSOR FOR SELECT * from bloomreaderbeta.book_or_shelf_opened AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :='';
	country_temp :=''; 
	SELECT b.country_code, b.country_name FROM public.ip2location AS b 
           WHERE (SELECT public.ip2int(d.context_ip) FROM bloomreaderbeta.book_or_shelf_opened AS d 
               	  WHERE d.id = xyz_row.id ) 
           BETWEEN b.ip_from and b.ip_to into country_code_temp, country_temp ;
	
   	INSERT INTO  public.ip2loc_sm_tab as s  
	( context_ip, country_code, country_name)
	VALUES
	(public.ip2int(ip_address_temp), country_code_temp, country_temp)
     ON CONFLICT ON CONSTRAINT ip2loc_sm_tab_db1_pkey DO NOTHING;

	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_country_function_brb() OWNER TO silpgadmin;

--
-- TOC entry 739 (class 1255 OID 426730)
-- Name: populate_country_region_city_id_ipv4(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_country_region_city_id_ipv4() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE country_temp varchar(64);
DECLARE region_temp varchar(100);
DECLARE city_temp varchar(100);
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from public.ipv42location LIMIT 5 ;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN
counter := 1;
country_temp := '';
region_temp := '';
city_temp := '';
FOR xyz_row IN xyz
    LOOP
	country_temp := xyz_row.country_name ;
	region_temp := xyz_row.region ;
	city_temp := xyz_row.city ;
	IF xyz_row.country_region_city_id IS NULL THEN
		UPDATE public.ipv42location  
		SET country_region_city_id = counter
			WHERE country_name = country_temp 
			AND region = region_temp
			AND city = city_temp;
		counter := counter + CAST('1' AS bigint);
    END IF;
	RETURN NEXT xyz_row.country_region_city_id;			
END LOOP;
END;
$$;


ALTER FUNCTION public.populate_country_region_city_id_ipv4() OWNER TO silpgadmin;

--
-- TOC entry 769 (class 1255 OID 428700)
-- Name: populate_countryregioncitylu(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_countryregioncitylu() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE xyz CURSOR FOR SELECT distinct (a.country_code, a.region, a.city), 
			a.loc_uid, a.country_code, a.country_name, a.region, a.city
   			FROM public.ip2loc_sm_tab AS a
   			ORDER BY a.loc_uid ASC, a.country_name ASC, a.region ASC, a.city ASC;
DECLARE xyz_row RECORD;
BEGIN
FOR xyz_row IN xyz
    LOOP
   	INSERT INTO  public.countryregioncitylu as s  
	( loc_uid, country_code, country_name, region, city) 
	VALUES
	( xyz_row.loc_uid, xyz_row.country_code, xyz_row.country_name, xyz_row.region, xyz_row.city) 
    ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	RETURN NEXT xyz_row.loc_uid;			
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_countryregioncitylu() OWNER TO silpgadmin;

--
-- TOC entry 690 (class 1255 OID 395507)
-- Name: populate_language_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_language_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$

DECLARE language_id_temp varchar(20);
DECLARE language_temp varchar(50);
DECLARE xyz CURSOR FOR SELECT * from bloomapp.users AS a;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	language_id_temp :='';
	language_temp :='';
 	SELECT 
	CASE
       WHEN length(xyz_row.uilanguage) = 2 then (SELECT c.clname FROM public.languagecodes AS c 
							WHERE xyz_row.uilanguage=c.langid2)
	   WHEN length(xyz_row.uilanguage) > 3 then  (SELECT e.clname FROM public.languagecodes AS e 
						WHERE SUBSTRING(xyz_row.uilanguage from 1 for 2)=e.langid2)
	   ELSE /* length(xyz_row.uilanguage) = 3 then */ 
		(SELECT d.clname FROM public.languagecodes AS d WHERE xyz_row.uilanguage=d.langid)                     
	END AS UILanguage
	INTO language_temp;
    IF (xyz_row.uilanguage IS NOT NULL) THEN
   		INSERT INTO  public.used_languages as s  
		( language_id, language_name)
		VALUES
		(xyz_row.uilanguage, language_temp)
   		  ON CONFLICT ON CONSTRAINT used_languages_pkey DO NOTHING;
    END IF;
	RETURN NEXT language_temp;		
END LOOP;
END;
$$;


ALTER FUNCTION public.populate_language_function() OWNER TO silpgadmin;

--
-- TOC entry 767 (class 1255 OID 427344)
-- Name: populate_loc_uid_ip2loc_sm_tab(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_loc_uid_ip2loc_sm_tab() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE country_cur varchar(64);
DECLARE region_cur varchar(100);
DECLARE city_cur varchar(100);
DECLARE hold_country varchar(64);
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT distinct (a.country_code, a.region, a.city), 
			a.country_name, a.region, a.city
   			FROM public.ip2loc_sm_tab AS a
   			ORDER BY a.country_name ASC, a.region ASC, a.city ASC;
DECLARE xyz_row RECORD;
BEGIN
counter := 1;
FOR xyz_row IN xyz
    LOOP
		UPDATE public.ip2loc_sm_tab  
		SET loc_uid = counter
		   WHERE country_name = xyz_row.country_name 
		   AND region = xyz_row.region
		   AND city = xyz_row.city;
		counter := counter + CAST('1' AS bigint);
		RETURN NEXT xyz_row.country_name;
	END LOOP;
END;
$$;


ALTER FUNCTION public.populate_loc_uid_ip2loc_sm_tab() OWNER TO silpgadmin;

--
-- TOC entry 768 (class 1255 OID 428663)
-- Name: populate_loc_uid_ip2loc_sm_tab2(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_loc_uid_ip2loc_sm_tab2() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE hold_loc_uid bigint;
DECLARE country_cur varchar(64);
DECLARE region_cur varchar(100);
DECLARE city_cur varchar(100);
DECLARE hold_country varchar(64);
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT distinct (a.country_code, a.region, a.city), 
			a.country_code, a.region, a.city
   			FROM public.ip2loc_sm_tab AS a
			WHERE loc_uid IS NULL
   			ORDER BY a.country_code ASC, a.region ASC, a.city ASC;
DECLARE xyz_row RECORD;
BEGIN
counter := 1627;
FOR xyz_row IN xyz
    LOOP
 	hold_loc_uid := NULL;
	SELECT b.loc_uid from public.ip2loc_sm_tab AS b
		WHERE b.country_code = xyz_row.country_code
		AND b.region = xyz_row.region
		AND b.city = xyz_row.city
		AND b.loc_uid IS NOT NULL
		INTO hold_loc_uid;
        IF hold_loc_uid IS NULL THEN
                counter := counter + CAST('1' AS bigint);
		hold_loc_uid := counter ;
	END IF;
		UPDATE public.ip2loc_sm_tab  
		SET loc_uid = hold_loc_uid 
		   WHERE country_code = xyz_row.country_code 
		   AND region = xyz_row.region
		   AND city = xyz_row.city;
		RETURN NEXT xyz_row.country_code;
	END LOOP;
END;
$$;


ALTER FUNCTION public.populate_loc_uid_ip2loc_sm_tab2() OWNER TO silpgadmin;

--
-- TOC entry 771 (class 1255 OID 751723)
-- Name: populate_location_uid_book_or_shelf_opened_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_book_or_shelf_opened_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreader.book_or_shelf_opened AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomreader.book_or_shelf_opened 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_book_or_shelf_opened_fctn() OWNER TO silpgadmin;

--
-- TOC entry 941 (class 1255 OID 710345)
-- Name: populate_location_uid_change_content_languages_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_change_content_languages_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.change_content_languages AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_content_languages 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_change_content_languages_fctn() OWNER TO silpgadmin;

--
-- TOC entry 943 (class 1255 OID 710365)
-- Name: populate_location_uid_change_page_layout_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_change_page_layout_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.change_page_layout AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_page_layout 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_change_page_layout_fctn() OWNER TO silpgadmin;

--
-- TOC entry 945 (class 1255 OID 710385)
-- Name: populate_location_uid_change_picture_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_change_picture_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.change_picture AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_picture 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_change_picture_fctn() OWNER TO silpgadmin;

--
-- TOC entry 842 (class 1255 OID 710398)
-- Name: populate_location_uid_change_video_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_change_video_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.change_video AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.change_video 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_change_video_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1361 (class 1255 OID 1903359)
-- Name: populate_location_uid_comprehension_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_comprehension_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreader.comprehension AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomreader.comprehension 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_comprehension_fctn() OWNER TO silpgadmin;

--
-- TOC entry 845 (class 1255 OID 710406)
-- Name: populate_location_uid_create_bloom_pack_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_create_bloom_pack_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.create_bloom_pack AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.create_bloom_pack 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_create_bloom_pack_fctn() OWNER TO silpgadmin;

--
-- TOC entry 896 (class 1255 OID 479046)
-- Name: populate_location_uid_create_book_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_create_book_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.create_book AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomapp.create_book  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_create_book_fctn() OWNER TO silpgadmin;

--
-- TOC entry 841 (class 1255 OID 710423)
-- Name: populate_location_uid_create_new_vernacular_collection_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_create_new_vernacular_collection_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.create_new_vernacular_collection AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.create_new_vernacular_collection 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_create_new_vernacular_collection_fctn() OWNER TO silpgadmin;

--
-- TOC entry 853 (class 1255 OID 479030)
-- Name: populate_location_uid_created_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_created_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreaderbeta.book_or_shelf_opened AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomreaderbeta.book_or_shelf_opened 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_created_fctn() OWNER TO silpgadmin;

--
-- TOC entry 847 (class 1255 OID 710440)
-- Name: populate_location_uid_created_new_source_collection_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_created_new_source_collection_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.created_new_source_collection AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.created_new_source_collection 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_created_new_source_collection_fctn() OWNER TO silpgadmin;

--
-- TOC entry 851 (class 1255 OID 710454)
-- Name: populate_location_uid_delete_page_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_delete_page_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.delete_page AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.delete_page 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_delete_page_fctn() OWNER TO silpgadmin;

--
-- TOC entry 1571 (class 1255 OID 1979693)
-- Name: populate_location_uid_download_book_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_download_book_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomlibrary_org.download_book AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomlibrary_org.download_book 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_download_book_fctn() OWNER TO silpgadmin;

--
-- TOC entry 953 (class 1255 OID 478985)
-- Name: populate_location_uid_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreaderbeta.application_installed AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.Context_ip;   --or xyz_row.ip
  	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomreaderbeta.application_installed  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_function() OWNER TO silpgadmin;

--
-- TOC entry 899 (class 1255 OID 482345)
-- Name: populate_location_uid_launch_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_launch_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.launch AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.launch  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_launch_function() OWNER TO silpgadmin;

--
-- TOC entry 951 (class 1255 OID 720150)
-- Name: populate_location_uid_pages_read_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_pages_read_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreader.pages_read AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomreader.pages_read 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_pages_read_fctn() OWNER TO silpgadmin;

--
-- TOC entry 902 (class 1255 OID 719927)
-- Name: populate_location_uid_print_pdf_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_print_pdf_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.print_pdf AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomapp.print_pdf  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_print_pdf_fctn() OWNER TO silpgadmin;

--
-- TOC entry 956 (class 1255 OID 751802)
-- Name: populate_location_uid_questions_correct_fctn(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_questions_correct_fctn() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreaderbeta.questions_correct AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city ) ;
	END IF;
	--
	UPDATE bloomreaderbeta.questions_correct 
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_questions_correct_fctn() OWNER TO silpgadmin;

--
-- TOC entry 861 (class 1255 OID 719805)
-- Name: populate_location_uid_register_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_register_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.register AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.register  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_register_function() OWNER TO silpgadmin;

--
-- TOC entry 877 (class 1255 OID 719902)
-- Name: populate_location_uid_upload_book_success_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_upload_book_success_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.upload_book_success AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.upload_book_success  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_upload_book_success_function() OWNER TO silpgadmin;

--
-- TOC entry 918 (class 1255 OID 719961)
-- Name: populate_location_uid_users_function(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_location_uid_users_function() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip_address_temp text;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE country_name_temp varchar(64);
DECLARE country_code_temp char(3);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.users AS a
	WHERE a.location_uid IS NULL;
DECLARE xyz_row RECORD;
DECLARE temprow RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	counter := NULL;
	SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;
	ip_address_temp := xyz_row.context_ip;
	country_code_temp :=NULL;
	country_name_temp :=NULL;
	hold_region :=NULL;
	hold_city :=NULL; 
	SELECT b.country_code, b.country_name, b.region, b.city FROM public.ipv42location AS b 
           WHERE (SELECT public.ip2ipv4(ip_address_temp))
           BETWEEN b.ipv4_from and b.ipv4_to 
		   INTO country_code_temp, country_name_temp, hold_region, hold_city ;
	IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   country_code_temp := '-';
	END IF;	
	IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   country_name_temp := '-';
	END IF;											
	IF hold_region ='-' or public.empty_to_null(hold_region) IS NULL THEN 
	   hold_region := '-';
	END IF;
	IF hold_city ='-' or public.empty_to_null(hold_city) IS NULL THEN 
	   hold_city := '-';
	END IF;				
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = hold_region
		AND i.city = hold_city
		INTO loc_uid_temp;
	
	IF loc_uid_temp IS NULL THEN
        counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, hold_region, hold_city )  
		ON CONFLICT ON CONSTRAINT countryregioncitylu_db1_pkey DO NOTHING;
	END IF;
	--
	UPDATE bloomapp.users  
	SET location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
	--
	RETURN NEXT xyz_row.id;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_location_uid_users_function() OWNER TO silpgadmin;

--
-- TOC entry 765 (class 1255 OID 428650)
-- Name: populate_missing_city_region_ip2loc_sm_tab(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_missing_city_region_ip2loc_sm_tab() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE ip bigint;
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT a.context_ip
   			FROM public.ip2loc_sm_tab AS a
   			WHERE a.city is NULL;
DECLARE xyz_row RECORD;
BEGIN
 SELECT MAX(loc_uid)+CAST('1' AS bigint) from public.ip2loc_sm_tab INTO counter;
FOR xyz_row IN xyz
    LOOP
	    SELECT a.region, a.city from public.ipv42location AS a 
			WHERE xyz_row.context_ip BETWEEN ipv4_from AND ipv4_to
			INTO hold_region, hold_city;
	
		UPDATE public.ip2loc_sm_tab  
		SET loc_uid = counter, city = hold_city, region = hold_region
		   WHERE context_ip = xyz_row.context_ip ;
		counter := counter + CAST('1' AS bigint);
		RETURN NEXT xyz_row.context_ip;
	END LOOP;
END;
$$;


ALTER FUNCTION public.populate_missing_city_region_ip2loc_sm_tab() OWNER TO silpgadmin;

--
-- TOC entry 766 (class 1255 OID 427405)
-- Name: populate_missing_country_ip2loc_sm_tab(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_missing_country_ip2loc_sm_tab() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE country_code_temp varchar(2);
DECLARE country_name_temp varchar(64);
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT distinct (a.country_code, a.region, a.city), 
			a.country_name, a.region, a.city 
   	FROM public.ip2loc_sm_tab AS a
	WHERE country_code = '-';
DECLARE xyz_row RECORD;
BEGIN
FOR xyz_row IN xyz
    LOOP
        country_code_temp := '-';
	country_name_temp := '-';
        SELECT country_code, country_name from ipv42location 
          WHERE region = xyz_row.region and city = xyz_row.city
          INTO country_code_temp, country_name_temp ;
		UPDATE public.ip2loc_sm_tab  
		SET country_code = country_code_temp, country_name = country_name_temp 
		WHERE region = xyz_row.region
		   AND city = xyz_row.city;
	RETURN NEXT xyz_row.country_name;
END LOOP;
END;
$$;


ALTER FUNCTION public.populate_missing_country_ip2loc_sm_tab() OWNER TO silpgadmin;

--
-- TOC entry 738 (class 1255 OID 427253)
-- Name: populate_region_city_for_ip2loc_sm_tab(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.populate_region_city_for_ip2loc_sm_tab() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$

DECLARE ip_address_temp bigint;
DECLARE region_temp varchar(100);
DECLARE city_temp varchar(100);
DECLARE xyz CURSOR FOR SELECT * from public.ip2loc_sm_tab AS a;
DECLARE xyz_row RECORD;
BEGIN

FOR xyz_row IN xyz
    LOOP
	SELECT b.region, b.city from public.ipv42location AS b
		WHERE xyz_row.context_ip BETWEEN b.ipv4_from AND b.ipv4_to
		INTO  region_temp, city_temp;

	UPDATE public.ip2loc_sm_tab
		SET region = region_temp,
			city = city_temp 
		WHERE context_ip = xyz_row.context_ip;

	region_temp := '-';
	city_temp := '-';

	RETURN NEXT xyz_row.context_ip;		
END LOOP;

END;
$$;


ALTER FUNCTION public.populate_region_city_for_ip2loc_sm_tab() OWNER TO silpgadmin;

--
-- TOC entry 713 (class 1255 OID 415316)
-- Name: random_bytea(integer); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.random_bytea(p_length integer) RETURNS bytea
    LANGUAGE plpgsql
    AS $$
declare
  o bytea := '';
begin 
  for i in 1..p_length loop
    o := o||decode(lpad(to_hex(width_bucket(random(), 0, 1, 256)-1),2,'0'), 'hex');
  end loop;
  return o;
end;$$;


ALTER FUNCTION public.random_bytea(p_length integer) OWNER TO silpgadmin;

--
-- TOC entry 830 (class 1255 OID 460159)
-- Name: update_loc_uid_clone_launch(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.update_loc_uid_clone_launch() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE country_code_temp varchar(2);
DECLARE country_name_temp varchar(64);
DECLARE region_temp varchar(100);
DECLARE city_temp varchar(100);
DECLARE hold_country_code varchar(2);
DECLARE hold_country_name varchar(64);
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomreadertest.clone_launch AS a
      WHERE a.location_uid IS NULL ;
DECLARE xyz_row RECORD;
BEGIN

SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;

FOR xyz_row IN xyz
    LOOP
	country_code_temp := NULL;
	country_name_temp := NULL;
	region_temp := NULL;
	city_temp := NULL;
	hold_country_code := NULL;
	hold_country_name := NULL;
	hold_region := NULL;
	hold_city := NULL;	
		IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   		country_code_temp := '-';
		END IF;	
		IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   		country_name_temp := '-';
		END IF;			
		IF region_temp ='-' or public.empty_to_null(region_temp) IS NULL THEN 
	   		region_temp := '-';
		END IF;
		IF city_temp ='-' or public.empty_to_null(city_temp) IS NULL THEN 
	   		city_temp := '-';
		END IF;		
	IF public.empty_to_null(xyz_row.ip) IS NOT NULL THEN
		SELECT c.country_code, c.country_name, c.region, c.city 
	    	FROM public.ip2loc_sm_tab AS c WHERE public.ip2ipv4(xyz_row.ip) = c.context_ip
		INTO hold_country_code, hold_country_name, hold_region, hold_city;
		IF hold_country_code IS NULL THEN
			hold_country_name := NULL;
			hold_region := NULL;
			hold_city := NULL;	
			SELECT f.country_code, f.country_name, f.region, f.city 
	    		FROM public.ipv42location AS f WHERE public.ip2ipv4(xyz_row.ip) 
			BETWEEN f.ipv4_from AND f.ipv4_to
			INTO hold_country_code, hold_country_name, hold_region, hold_city;		
		END IF;
		country_code_temp := hold_country_code; 
		country_name_temp := hold_country_name;
		region_temp := hold_region;
		city_temp :=  hold_city;
		IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   		country_code_temp := '-';
		END IF;	
		IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   		country_name_temp := '-';
		END IF;			
		IF region_temp ='-' or public.empty_to_null(region_temp) IS NULL THEN 
	   		region_temp := '-';
		END IF;
		IF city_temp ='-' or public.empty_to_null(city_temp) IS NULL THEN 
	   		city_temp := '-';
		END IF;	
	END IF;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = region_temp
		AND i.city = city_temp
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        	counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, region_temp, city_temp ) ;
	END IF;

   	UPDATE bloomreadertest.clone_launch 
	SET  location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
     	
	RETURN NEXT xyz_row.id;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.update_loc_uid_clone_launch() OWNER TO silpgadmin;

--
-- TOC entry 828 (class 1255 OID 461569)
-- Name: update_loc_uid_country(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.update_loc_uid_country() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE country_code_temp varchar(2);
DECLARE country_name_temp varchar(64);
DECLARE region_temp varchar(100);
DECLARE city_temp varchar(100);
DECLARE hold_country_code varchar(2);
DECLARE hold_country_name varchar(64);
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from public.countryregioncitylu AS a
		WHERE a.country_code <> '-'
		AND a.country_name = '-';
/*      WHERE a.timestamp > '2017-07-21 19:42:16.883+00' 
	  AND a.ip IS NOT NULL 
	  AND (STRPOS(a.ip,'<') = 0)  
	  AND (STRPOS(a.ip,':') = 0);
	  */
DECLARE xyz_row RECORD;
BEGIN
FOR xyz_row IN xyz
    LOOP
	country_name_temp := NULL;
	SELECT b.countryname FROM public.countrycodes AS b 
	WHERE b.countrycode = xyz_row.country_code
	INTO country_name_temp;

    IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   	country_name_temp := '-';
	END IF;	

   	UPDATE public.countryregioncitylu
	SET  country_name = country_name_temp
	WHERE loc_uid = xyz_row.loc_uid;
     	
	RETURN NEXT xyz_row.country_code;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.update_loc_uid_country() OWNER TO silpgadmin;

--
-- TOC entry 773 (class 1255 OID 461573)
-- Name: update_loc_uid_launch(); Type: FUNCTION; Schema: public; Owner: silpgadmin
--

CREATE FUNCTION public.update_loc_uid_launch() RETURNS SETOF character varying
    LANGUAGE plpgsql
    AS $$
DECLARE err_constraint varchar(100);
DECLARE country_code_temp varchar(2);
DECLARE country_name_temp varchar(64);
DECLARE region_temp varchar(100);
DECLARE city_temp varchar(100);
DECLARE hold_country_code varchar(2);
DECLARE hold_country_name varchar(64);
DECLARE hold_region varchar(100);
DECLARE hold_city varchar(100);
DECLARE loc_uid_temp bigint;
DECLARE counter bigint;
DECLARE xyz CURSOR FOR SELECT * from bloomapp.launch AS a
		WHERE a.location_uid IS NULL;
/*      WHERE a.timestamp > '2017-07-21 19:42:16.883+00' 
	  AND a.ip IS NOT NULL 
	  AND (STRPOS(a.ip,'<') = 0)  
	  AND (STRPOS(a.ip,':') = 0);
	  */
DECLARE xyz_row RECORD;
BEGIN

SELECT MAX(c.loc_uid) FROM public.countryregioncitylu AS c INTO counter;

FOR xyz_row IN xyz
    LOOP
	country_code_temp := NULL;
	country_name_temp := NULL;
	region_temp := NULL;
	city_temp := NULL;
	hold_country_code := NULL;
	hold_country_name := NULL;
	hold_region := NULL;
	hold_city := NULL;	
		IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   		country_code_temp := '-';
		END IF;	
		IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   		country_name_temp := '-';
		END IF;			
		IF region_temp ='-' or public.empty_to_null(region_temp) IS NULL THEN 
	   		region_temp := '-';
		END IF;
		IF city_temp ='-' or public.empty_to_null(city_temp) IS NULL THEN 
	   		city_temp := '-';
		END IF;		
	IF public.empty_to_null(xyz_row.ip) IS NOT NULL THEN
		SELECT c.country_code, c.country_name, c.region, c.city 
	    	FROM public.ip2loc_sm_tab AS c WHERE public.ip2ipv4(xyz_row.ip) = c.context_ip
		INTO hold_country_code, hold_country_name, hold_region, hold_city;
		IF hold_country_code IS NULL THEN
			hold_country_name := NULL;
			hold_region := NULL;
			hold_city := NULL;	
			SELECT f.country_code, f.country_name, f.region, f.city 
	    		FROM public.ipv42location AS f WHERE public.ip2ipv4(xyz_row.ip) 
			BETWEEN f.ipv4_from AND f.ipv4_to
			INTO hold_country_code, hold_country_name, hold_region, hold_city;		
		END IF;
		country_code_temp := hold_country_code; 
		country_name_temp := hold_country_name;
		region_temp := hold_region;
		city_temp :=  hold_city;
		IF country_code_temp ='-' or public.empty_to_null(country_code_temp) IS NULL THEN 
	   		country_code_temp := '-';
		END IF;	
		IF country_name_temp ='-' or public.empty_to_null(country_name_temp) IS NULL THEN 
	   		country_name_temp := '-';
		END IF;			
		IF region_temp ='-' or public.empty_to_null(region_temp) IS NULL THEN 
	   		region_temp := '-';
		END IF;
		IF city_temp ='-' or public.empty_to_null(city_temp) IS NULL THEN 
	   		city_temp := '-';
		END IF;	
	END IF;
	loc_uid_temp := NULL;
	SELECT i.loc_uid from public.countryregioncitylu AS i
		where i.country_code = country_code_temp
		AND i.region = region_temp
		AND i.city = city_temp
		INTO loc_uid_temp;
	IF loc_uid_temp IS NULL THEN
        	counter := counter + CAST('1' AS bigint);
		loc_uid_temp := counter ;
		INSERT INTO  public.countryregioncitylu as p  
		( loc_uid, country_code, country_name, region, city  )  
		VALUES
		( loc_uid_temp, country_code_temp, country_name_temp, region_temp, city_temp ) ;
	END IF;

   	UPDATE bloomapp.launch 
	SET  location_uid = loc_uid_temp
	WHERE id = xyz_row.id;
     	
	RETURN NEXT xyz_row.id;			
END LOOP;

EXCEPTION
   WHEN SQLSTATE '23000' THEN  -- Class 23 Integrity Constraint Violation
      GET STACKED DIAGNOSTICS err_constraint = CONSTRAINT_NAME;
      -- do something with it, for instance:
      RAISE NOTICE '%', err_constraint;
      RAISE;  -- raise original error
END;
$$;


ALTER FUNCTION public.update_loc_uid_launch() OWNER TO silpgadmin;

--
-- TOC entry 3501 (class 1255 OID 1890900)
-- Name: median(numeric); Type: AGGREGATE; Schema: public; Owner: silpgadmin
--

CREATE AGGREGATE public.median(numeric) (
    SFUNC = array_append,
    STYPE = numeric[],
    INITCOND = '{}',
    FINALFUNC = public._final_median
);


ALTER AGGREGATE public.median(numeric) OWNER TO silpgadmin;

SET default_tablespace = '';

--
-- TOC entry 300 (class 1259 OID 28179)
-- Name: create_book; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.create_book (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book_id text,
    browser text,
    category text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    mono_version text,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.create_book OWNER TO segment;

--
-- TOC entry 408 (class 1259 OID 427310)
-- Name: countryregioncitylu; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.countryregioncitylu (
    loc_uid bigint NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL,
    region character varying(100) NOT NULL,
    city character varying(100) NOT NULL
);


ALTER TABLE public.countryregioncitylu OWNER TO segment;

--
-- TOC entry 490 (class 1259 OID 919320)
-- Name: bookcreatedforcountrymap; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.bookcreatedforcountrymap AS
 SELECT a.user_id,
    a.id,
    ( SELECT d.country_name
           FROM public.countryregioncitylu d
          WHERE (a.location_uid = d.loc_uid)) AS country
   FROM bloomapp.create_book a
  GROUP BY a.user_id, a.id, a.location_uid, a.country;


ALTER TABLE bloomapp.bookcreatedforcountrymap OWNER TO silpgadmin;

--
-- TOC entry 489 (class 1259 OID 919310)
-- Name: bookscreatedalltime; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.bookscreatedalltime AS
 SELECT a.user_id,
    a.id,
    a.language1_iso639_code,
    a."timestamp"
   FROM bloomapp.create_book a
  WHERE (a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '2 years 11 mons'::interval));


ALTER TABLE bloomapp.bookscreatedalltime OWNER TO silpgadmin;

--
-- TOC entry 297 (class 1259 OID 28155)
-- Name: upload_book_success; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.upload_book_success (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.upload_book_success OWNER TO segment;

--
-- TOC entry 491 (class 1259 OID 919341)
-- Name: booksuploadedalltime; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.booksuploadedalltime AS
 SELECT a.url,
    max(a."timestamp") AS max
   FROM bloomapp.upload_book_success a
  WHERE (a."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone))
  GROUP BY a.url;


ALTER TABLE bloomapp.booksuploadedalltime OWNER TO silpgadmin;

--
-- TOC entry 315 (class 1259 OID 28299)
-- Name: change_content_languages; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.change_content_languages (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.change_content_languages OWNER TO segment;

--
-- TOC entry 318 (class 1259 OID 28326)
-- Name: change_page_layout; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.change_page_layout (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    new_layout text,
    old_lineage text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    language1_iso639_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    branding_project_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.change_page_layout OWNER TO segment;

--
-- TOC entry 304 (class 1259 OID 28211)
-- Name: change_picture; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.change_picture (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    location_uid bigint,
    branding_project_name text,
    country text,
    language1_iso639_code text,
    ip text,
    language1_iso639_name text,
    collection_country text,
    language2_iso639_code text,
    language3_iso639_code text
);


ALTER TABLE bloomapp.change_picture OWNER TO segment;

--
-- TOC entry 393 (class 1259 OID 359402)
-- Name: change_video; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.change_video (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    browser text,
    culture text,
    dot_net_version text,
    full_version text,
    osversion text,
    sent_at timestamp with time zone,
    working_set text,
    branding_project_name text,
    ip text,
    user_id text,
    command_line text,
    event_text text,
    language1_iso639_name text,
    language2_iso639_code text,
    "timestamp" timestamp with time zone,
    uuid_ts timestamp with time zone,
    version text,
    context_library_version text,
    context_library_name text,
    current_directory text,
    event text,
    language1_iso639_code text,
    original_timestamp timestamp with time zone,
    channel text,
    user_name text,
    desktop_environment text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint
);


ALTER TABLE bloomapp.change_video OWNER TO segment;

--
-- TOC entry 292 (class 1259 OID 28115)
-- Name: users; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.users (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_ip text,
    context_language text,
    context_library_name text,
    context_library_version text,
    email text,
    first_name text,
    how_using text,
    last_name text,
    organization text,
    uilanguage text,
    how_iuse_it text,
    location_uid bigint
);


ALTER TABLE bloomapp.users OWNER TO segment;

--
-- TOC entry 399 (class 1259 OID 395647)
-- Name: context_languages_for_users; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.context_languages_for_users AS
 SELECT a.language_count,
    a.month_used
   FROM ( SELECT count(DISTINCT b.context_language) AS language_count,
            ((date_part('YEAR'::text, timezone('AEST'::text, b.received_at)))::text || lpad((date_part('MONTH'::text, timezone('AEST'::text, b.received_at)))::text, 2, '0'::text)) AS month_used,
            rank() OVER (PARTITION BY ((date_part('YEAR'::text, timezone('AEST'::text, b.received_at)))::text || lpad((date_part('MONTH'::text, timezone('AEST'::text, b.received_at)))::text, 2, '0'::text)) ORDER BY ((date_part('YEAR'::text, timezone('AEST'::text, b.received_at)))::text || lpad((date_part('MONTH'::text, timezone('AEST'::text, b.received_at)))::text, 2, '0'::text))) AS rank
           FROM bloomapp.users b
          GROUP BY (((b.received_at)::timestamp without time zone)::date), (timezone('AEST'::text, b.received_at))) a
  WHERE (a.rank = 1);


ALTER TABLE bloomapp.context_languages_for_users OWNER TO silpgadmin;

--
-- TOC entry 303 (class 1259 OID 28203)
-- Name: create_bloom_pack; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.create_bloom_pack (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    country text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.create_bloom_pack OWNER TO segment;

--
-- TOC entry 301 (class 1259 OID 28187)
-- Name: create_new_vernacular_collection; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.create_new_vernacular_collection (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    mono_version text,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.create_new_vernacular_collection OWNER TO segment;

--
-- TOC entry 319 (class 1259 OID 28334)
-- Name: created; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.created (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.created OWNER TO segment;

--
-- TOC entry 312 (class 1259 OID 28275)
-- Name: created_new_source_collection; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.created_new_source_collection (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    country text,
    collection_country text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.created_new_source_collection OWNER TO segment;

--
-- TOC entry 291 (class 1259 OID 28107)
-- Name: delete_page; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.delete_page (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.delete_page OWNER TO segment;

--
-- TOC entry 320 (class 1259 OID 28342)
-- Name: downloaded_book_failure; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.downloaded_book_failure (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    language2_iso639_code text,
    country text,
    language1_iso639_code text,
    branding_project_name text,
    language1_iso639_name text,
    collection_country text,
    language3_iso639_code text,
    location_uid bigint
);


ALTER TABLE bloomapp.downloaded_book_failure OWNER TO segment;

--
-- TOC entry 299 (class 1259 OID 28171)
-- Name: downloaded_book_success; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.downloaded_book_success (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    mono_version text,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.downloaded_book_success OWNER TO segment;

--
-- TOC entry 317 (class 1259 OID 28315)
-- Name: duplicate_page; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.duplicate_page (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.duplicate_page OWNER TO segment;

--
-- TOC entry 295 (class 1259 OID 28139)
-- Name: exception; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.exception (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    message text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    stack_trace text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language3_iso639_code text,
    language1_iso639_name text,
    collection_country text,
    language2_iso639_code text,
    country text,
    language1_iso639_code text
);


ALTER TABLE bloomapp.exception OWNER TO segment;

--
-- TOC entry 313 (class 1259 OID 28283)
-- Name: exported_to_doc_format; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.exported_to_doc_format (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.exported_to_doc_format OWNER TO segment;

--
-- TOC entry 294 (class 1259 OID 28131)
-- Name: exported_xml_for_in_design; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.exported_xml_for_in_design (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    language1_iso639_name text,
    language2_iso639_code text,
    branding_project_name text,
    language1_iso639_code text,
    collection_country text,
    country text,
    location_uid bigint,
    language3_iso639_code text,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.exported_xml_for_in_design OWNER TO segment;

--
-- TOC entry 316 (class 1259 OID 28307)
-- Name: identifies; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.identifies (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_ip text,
    context_language text,
    context_library_name text,
    context_library_version text,
    email text,
    first_name text,
    how_using text,
    last_name text,
    organization text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    uilanguage text,
    user_id text,
    how_iuse_it text
);


ALTER TABLE bloomapp.identifies OWNER TO segment;

--
-- TOC entry 306 (class 1259 OID 28227)
-- Name: insert_template_page; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.insert_template_page (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    osversion text,
    page text,
    sent_at timestamp with time zone,
    template_source text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    location_uid bigint,
    country text,
    ip text,
    language1_iso639_code text,
    branding_project_name text,
    collection_country text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text
);


ALTER TABLE bloomapp.insert_template_page OWNER TO segment;

--
-- TOC entry 298 (class 1259 OID 28163)
-- Name: launch; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.launch (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.launch OWNER TO segment;

--
-- TOC entry 323 (class 1259 OID 37528)
-- Name: organization_users; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.organization_users AS
 SELECT users.id,
    users.organization AS organization_raw,
        CASE
            WHEN ("position"(upper(users.organization), 'SIL LEAD'::text) > 0) THEN 'SIL LEAD'::text
            WHEN ("position"(upper(users.organization), 'SIL'::text) > 0) THEN 'SIL'::text
            WHEN ("position"(upper(users.organization), 'DEPED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'OF EDUCATION'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'WVI'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(users.organization), 'WORLD VISION'::text) > 0) THEN 'World Vision'::text
            ELSE users.organization
        END AS organization
   FROM bloomapp.users;


ALTER TABLE bloomapp.organization_users OWNER TO silpgadmin;

--
-- TOC entry 396 (class 1259 OID 395393)
-- Name: organization_users2; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.organization_users2 AS
 SELECT a.id,
    a.received_at,
    a.context_ip AS raw_ip,
        CASE
            WHEN ("position"(a.context_ip, '<'::text) > 0) THEN ''::text
            WHEN ("position"(a.context_ip, ':'::text) > 0) THEN ''::text
            WHEN ("position"(a.context_ip, 'SCRIPT'::text) > 0) THEN ''::text
            ELSE a.context_ip
        END AS ip,
        CASE
            WHEN ("position"(a.context_ip, '<'::text) > 0) THEN ''::character varying
            WHEN ("position"(a.context_ip, ':'::text) > 0) THEN ''::character varying
            WHEN ("position"(a.context_ip, ','::text) > 0) THEN ''::character varying
            WHEN ("position"(a.context_ip, 'SCRIPT'::text) > 0) THEN ''::character varying
            ELSE ( SELECT public.ip2country_name((a.context_ip)::character varying) AS ip2country_name)
        END AS country,
    a.organization AS organization_raw,
        CASE
            WHEN ("position"(upper(a.organization), 'SIL LEAD'::text) > 0) THEN 'SIL LEAD'::text
            WHEN ("position"(upper(a.organization), 'SIL'::text) > 0) THEN 'SIL'::text
            WHEN ("position"(upper(a.organization), 'ADPP'::text) > 0) THEN 'ADPP'::text
            WHEN ("position"(upper(a.organization), 'BIBLE SO'::text) > 0) THEN 'Bible Society'::text
            WHEN ("position"(upper(a.organization), 'COLLEGE'::text) > 0) THEN 'College/University'::text
            WHEN ("position"(upper(a.organization), 'UNIVERSI'::text) > 0) THEN 'College/University'::text
            WHEN ("position"(upper(a.organization), 'CHURCH'::text) > 0) THEN 'Church'::text
            WHEN ("position"(upper(a.organization), 'GLISE'::text) > 0) THEN 'Church'::text
            WHEN ("position"(upper(a.organization), 'DEPED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'DEP.ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'DEPARTMENT OF ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'DEP. ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'DEP ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'DEP-ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'MINISTÈRE'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'DPE'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(a.organization), 'EDUC'::text) > 0) THEN 'Education'::text
            WHEN ("position"(upper(a.organization), 'ETHNOS360'::text) > 0) THEN 'Ethnos360'::text
            WHEN ("position"(upper(a.organization), 'FHI'::text) > 0) THEN 'FHI360'::text
            WHEN ("position"(upper(a.organization), 'GOV'::text) > 0) THEN 'Government'::text
            WHEN ("position"(upper(a.organization), 'OFFICER'::text) > 0) THEN 'Government'::text
            WHEN ("position"(upper(a.organization), 'NTM'::text) > 0) THEN 'Ethnos360'::text
            WHEN ("position"(upper(a.organization), 'NEW TRIBES'::text) > 0) THEN 'Ethnos360'::text
            WHEN ("position"(upper(a.organization), 'TEACHER'::text) > 0) THEN 'Education-Teacher'::text
            WHEN ("position"(upper(a.organization), 'FACULTY'::text) > 0) THEN 'Education-Teacher'::text
            WHEN ("position"(upper(a.organization), 'PRIMARY'::text) > 0) THEN 'Education-Primary'::text
            WHEN ("position"(upper(a.organization), 'SCHOOL'::text) > 0) THEN 'Education-School'::text
            WHEN ("position"(upper(a.organization), 'ACADEMY'::text) > 0) THEN 'Education-School'::text
            WHEN ("position"(upper(a.organization), 'G.I.A.L'::text) > 0) THEN 'GIAL'::text
            WHEN ("position"(upper(a.organization), 'GIAL'::text) > 0) THEN 'GIAL'::text
            WHEN ("position"(upper(a.organization), 'GPS'::text) > 0) THEN 'GPS'::text
            WHEN ("position"(upper(a.organization), 'G P S'::text) > 0) THEN 'GPS'::text
            WHEN ("position"(upper(a.organization), 'LIBRARY'::text) > 0) THEN 'Library'::text
            WHEN ("position"(upper(a.organization), 'LIBRARIES'::text) > 0) THEN 'Library'::text
            WHEN ("position"(upper(a.organization), 'LITERACY'::text) > 0) THEN 'Literacy Organization'::text
            WHEN ("position"(upper(a.organization), 'LINGUISTIC'::text) > 0) THEN 'Linguistics Organization'::text
            WHEN ("position"(upper(a.organization), 'LBT'::text) > 0) THEN 'Lutheran Bible Translators'::text
            WHEN ("position"(upper(a.organization), 'LUTHERAN BIBLE TRANSLATORS'::text) > 0) THEN 'Lutheran Bible Translators'::text
            WHEN ("position"(upper(a.organization), 'PBT'::text) > 0) THEN 'Pioneer Bible Translators'::text
            WHEN ("position"(upper(a.organization), 'PIONEER BIBLE TRANSLATORS'::text) > 0) THEN 'Pioneer Bible Translators'::text
            WHEN ("position"(upper(a.organization), 'SOEURS'::text) > 0) THEN 'Three Sisters: Trois Soeurs'::text
            WHEN ("position"(upper(a.organization), 'TRADUC'::text) > 0) THEN 'Translation Organization'::text
            WHEN ("position"(upper(a.organization), 'USAID'::text) > 0) THEN 'USAID'::text
            WHEN ("position"(upper(a.organization), 'UNESCO'::text) > 0) THEN 'UNESCO'::text
            WHEN ("position"(upper(a.organization), 'WVI'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(a.organization), 'W.V.I.'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(a.organization), 'WV'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(a.organization), 'WAHANA VISI'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(a.organization), 'WORLD V'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(a.organization), 'WORLDVISION'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(a.organization), 'WYCLIFFE'::text) > 0) THEN 'Wycliffe'::text
            WHEN ("position"(upper(a.organization), 'WBT'::text) > 0) THEN 'Wycliffe'::text
            WHEN ("position"(upper(a.organization), 'SEED'::text) > 0) THEN 'The Seed Co.'::text
            WHEN ("position"(upper(a.organization), 'SDO'::text) > 0) THEN 'SDO'::text
            WHEN ("position"(upper(a.organization), 'SAVE'::text) > 0) THEN 'Save the Children'::text
            WHEN ("position"(upper(a.organization), 'SAMUNNAT'::text) > 0) THEN 'Samunnat'::text
            WHEN ("position"(upper(a.organization), 'PEACE C'::text) > 0) THEN 'Peace Corps'::text
            WHEN ("position"(upper(a.organization), 'PERSONAL'::text) > 0) THEN 'Personal'::text
            WHEN ("position"(upper(a.organization), 'HOME'::text) > 0) THEN 'Personal'::text
            WHEN ("position"(upper(a.organization), 'SELF'::text) > 0) THEN 'Personal'::text
            WHEN ("position"(upper(a.organization), 'OWN'::text) > 0) THEN 'Personal'::text
            WHEN ("position"(upper(a.organization), 'PRIVATE'::text) > 0) THEN 'Personal'::text
            WHEN ("position"(upper(a.organization), 'FREELANCE'::text) > 0) THEN 'Personal'::text
            WHEN ("position"(upper(a.organization), 'PTI'::text) > 0) THEN 'PTI (Bangladesh)'::text
            WHEN ("position"(upper(a.organization), 'P T I'::text) > 0) THEN 'PTI (Bangladesh)'::text
            WHEN ("position"(upper(a.organization), 'P.T.I.'::text) > 0) THEN 'PTI (Bangladesh)'::text
            WHEN ("position"(upper(a.organization), 'URC'::text) > 0) THEN 'URC'::text
            WHEN ("position"(upper(a.organization), 'SDF'::text) > 0) THEN 'Unknown'::text
            WHEN ("position"(upper(a.organization), 'NONE'::text) > 0) THEN 'Unknown'::text
            WHEN ("position"(upper(a.organization), 'N/A'::text) > 0) THEN 'Unknown'::text
            WHEN (length(a.organization) < 2) THEN 'Unknown'::text
            WHEN (a.organization IS NULL) THEN 'Unknown'::text
            ELSE a.organization
        END AS organization
   FROM bloomapp.users a;


ALTER TABLE bloomapp.organization_users2 OWNER TO silpgadmin;

--
-- TOC entry 324 (class 1259 OID 38158)
-- Name: organization_users3; Type: VIEW; Schema: bloomapp; Owner: segment
--

CREATE VIEW bloomapp.organization_users3 AS
 SELECT users.id,
    users.context_ip AS raw_ip,
        CASE
            WHEN ("position"(users.context_ip, '<'::text) > 0) THEN ''::text
            WHEN ("position"(users.context_ip, ':'::text) > 0) THEN ''::text
            WHEN ("position"(users.context_ip, 'SCRIPT'::text) > 0) THEN ''::text
            ELSE users.context_ip
        END AS ip,
    users.organization AS organization_raw,
        CASE
            WHEN ("position"(upper(users.organization), 'SIL LEAD'::text) > 0) THEN 'SIL LEAD'::text
            WHEN ("position"(upper(users.organization), 'SIL'::text) > 0) THEN 'SIL'::text
            WHEN ("position"(upper(users.organization), 'DEPED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'DEP.ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'DEP ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'DEP-ED'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'OF EDUCATION'::text) > 0) THEN 'Ministry of Education'::text
            WHEN ("position"(upper(users.organization), 'WVI'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(users.organization), 'W.V.I.'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(users.organization), 'WV'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(users.organization), 'WORLD V'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(users.organization), 'WORLDVISION'::text) > 0) THEN 'World Vision'::text
            WHEN ("position"(upper(users.organization), 'USAID'::text) > 0) THEN 'USAID'::text
            WHEN ("position"(upper(users.organization), 'WYCLIFFE'::text) > 0) THEN 'Wycliffe'::text
            WHEN ("position"(upper(users.organization), 'WBT'::text) > 0) THEN 'Wycliffe'::text
            WHEN ("position"(upper(users.organization), 'SEED'::text) > 0) THEN 'The Seed Co.'::text
            WHEN ("position"(upper(users.organization), 'SAVE'::text) > 0) THEN 'Save the Children'::text
            WHEN ("position"(upper(users.organization), 'PEACE C'::text) > 0) THEN 'PEACE CORPS'::text
            WHEN ("position"(upper(users.organization), 'SDF'::text) > 0) THEN 'UNKNOWN'::text
            WHEN (length(users.organization) < 2) THEN 'UNKNOWN'::text
            WHEN (users.organization IS NULL) THEN 'UNKNOWN'::text
            ELSE users.organization
        END AS organization
   FROM bloomapp.users;


ALTER TABLE bloomapp.organization_users3 OWNER TO segment;

--
-- TOC entry 322 (class 1259 OID 37513)
-- Name: organization_users_mirror; Type: TABLE; Schema: bloomapp; Owner: silpgadmin
--

CREATE TABLE bloomapp.organization_users_mirror (
    id character varying(1024),
    organization_raw text,
    organization text
);


ALTER TABLE bloomapp.organization_users_mirror OWNER TO silpgadmin;

--
-- TOC entry 448 (class 1259 OID 719999)
-- Name: png_create_book_view; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.png_create_book_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.book_id,
    a.browser,
    a.category,
    a.channel,
    a.command_line,
    a.context_library_name,
    a.context_library_version,
    a.country,
    a.culture,
    a.current_directory,
    a.desktop_environment,
    a.dot_net_version,
    a.event,
    a.event_text,
    a.full_version,
    a.original_timestamp,
    a.osversion,
    a.sent_at,
    a."timestamp",
    a.user_id,
    a.version,
    a.working_set,
    a.branding_project_name,
    a.collection_country,
    a.language1_iso639_code,
    a.language1_iso639_name,
    a.language2_iso639_code,
    a.language3_iso639_code,
    a.location_uid
   FROM bloomapp.create_book a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomapp.png_create_book_view OWNER TO silpgadmin;

--
-- TOC entry 449 (class 1259 OID 720004)
-- Name: png_launch_view; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.png_launch_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.browser,
    a.channel,
    a.command_line,
    a.context_library_name,
    a.context_library_version,
    a.culture,
    a.current_directory,
    a.desktop_environment,
    a.dot_net_version,
    a.event,
    a.event_text,
    a.full_version,
    a.original_timestamp,
    a.osversion,
    a.sent_at,
    a."timestamp",
    a.user_id,
    a.version,
    a.working_set,
    a.branding_project_name,
    a.language1_iso639_code,
    a.language1_iso639_name,
    a.language2_iso639_code,
    a.collection_country,
    a.country,
    a.language3_iso639_code,
    a.location_uid
   FROM bloomapp.launch a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomapp.png_launch_view OWNER TO silpgadmin;

--
-- TOC entry 308 (class 1259 OID 28243)
-- Name: print_pdf; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.print_pdf (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.print_pdf OWNER TO segment;

--
-- TOC entry 450 (class 1259 OID 720009)
-- Name: png_print_pdf_view; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.png_print_pdf_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.book_id,
    a.browser,
    a.channel,
    a.command_line,
    a.context_library_name,
    a.context_library_version,
    a.country,
    a.culture,
    a.current_directory,
    a.desktop_environment,
    a.dot_net_version,
    a.event,
    a.event_text,
    a.full_version,
    a.original_timestamp,
    a.osversion,
    a.sent_at,
    a."timestamp",
    a.user_id,
    a.version,
    a.working_set,
    a.branding_project_name,
    a.language1_iso639_code,
    a.language1_iso639_name,
    a.language2_iso639_code,
    a.collection_country,
    a.language3_iso639_code,
    a.location_uid
   FROM bloomapp.print_pdf a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomapp.png_print_pdf_view OWNER TO silpgadmin;

--
-- TOC entry 451 (class 1259 OID 720017)
-- Name: png_upload_book_success_view; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.png_upload_book_success_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.browser,
    a.channel,
    a.command_line,
    a.context_library_name,
    a.context_library_version,
    a.culture,
    a.current_directory,
    a.desktop_environment,
    a.dot_net_version,
    a.event,
    a.event_text,
    a.full_version,
    a.original_timestamp,
    a.osversion,
    a.sent_at,
    a."timestamp",
    a.title,
    a.url,
    a.user_id,
    a.version,
    a.working_set,
    a.branding_project_name,
    a.language1_iso639_code,
    a.language1_iso639_name,
    a.language2_iso639_code,
    a.collection_country,
    a.country,
    a.language3_iso639_code,
    a.location_uid
   FROM bloomapp.upload_book_success a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomapp.png_upload_book_success_view OWNER TO silpgadmin;

--
-- TOC entry 452 (class 1259 OID 720022)
-- Name: png_users_view; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.png_users_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.browser,
    a.context_language,
    a.context_library_name,
    a.context_library_version,
    a.how_using,
    a.organization,
    a.uilanguage,
    a.how_iuse_it,
    a.location_uid
   FROM bloomapp.users a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomapp.png_users_view OWNER TO silpgadmin;

--
-- TOC entry 309 (class 1259 OID 28251)
-- Name: publish_android; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.publish_android (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    language text,
    mode text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    desktop_environment text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.publish_android OWNER TO segment;

--
-- TOC entry 296 (class 1259 OID 28147)
-- Name: register; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.register (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.register OWNER TO segment;

--
-- TOC entry 305 (class 1259 OID 28219)
-- Name: relocate_page; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.relocate_page (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.relocate_page OWNER TO segment;

--
-- TOC entry 311 (class 1259 OID 28267)
-- Name: save_e_pub; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.save_e_pub (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.save_e_pub OWNER TO segment;

--
-- TOC entry 314 (class 1259 OID 28291)
-- Name: save_epub; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.save_epub (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text
);


ALTER TABLE bloomapp.save_epub OWNER TO segment;

--
-- TOC entry 321 (class 1259 OID 28350)
-- Name: save_pdf; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.save_pdf (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    layout text,
    original_timestamp timestamp with time zone,
    osversion text,
    portion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    language3_iso639_code text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.save_pdf OWNER TO segment;

--
-- TOC entry 445 (class 1259 OID 661587)
-- Name: select_page; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.select_page (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_name text,
    osversion text,
    user_name text,
    uuid_ts timestamp with time zone,
    working_set text,
    browser text,
    context_library_version text,
    dot_net_version text,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    event_text text,
    full_version text,
    channel text,
    command_line text,
    culture text,
    current_directory text,
    event text,
    ip text,
    sent_at timestamp with time zone,
    user_id text,
    version text,
    country text,
    language1_iso639_name text,
    collection_country text,
    language1_iso639_code text,
    language2_iso639_code text,
    branding_project_name text,
    language3_iso639_code text
);


ALTER TABLE bloomapp.select_page OWNER TO segment;

--
-- TOC entry 364 (class 1259 OID 103676)
-- Name: some_event; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.some_event (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    some_value text,
    time_since_launch text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE bloomapp.some_event OWNER TO segment;

--
-- TOC entry 363 (class 1259 OID 103608)
-- Name: some_event2; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.some_event2 (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    apikey text,
    browser text,
    channel text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    time_since_launch text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE bloomapp.some_event2 OWNER TO segment;

--
-- TOC entry 444 (class 1259 OID 637325)
-- Name: testingbooksuploadedalltime; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.testingbooksuploadedalltime AS
 SELECT DISTINCT upper(b.userid) AS upper
   FROM ( SELECT DISTINCT ON (a.title, a.user_id) a.title AS userid,
            count(a.title) AS count,
            a.user_id,
            a."timestamp"
           FROM bloomapp.upload_book_success a
          WHERE (("position"(a.title, '??'::text) = 0) AND (a."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone)))
          GROUP BY a.title, a.user_id, a."timestamp"
          ORDER BY a.title, a.user_id) b;


ALTER TABLE bloomapp.testingbooksuploadedalltime OWNER TO silpgadmin;

--
-- TOC entry 293 (class 1259 OID 28123)
-- Name: tracks; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text
);


ALTER TABLE bloomapp.tracks OWNER TO segment;

--
-- TOC entry 498 (class 1259 OID 919441)
-- Name: uniqueuserchannel; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuserchannel AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    a.channel,
    '03 mo'::text AS reference
   FROM bloomapp.create_book a
  WHERE ((a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '3 mons'::interval)) AND (a."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone)));


ALTER TABLE bloomapp.uniqueuserchannel OWNER TO silpgadmin;

--
-- TOC entry 500 (class 1259 OID 919452)
-- Name: uniqueuserchannellast30days; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuserchannellast30days AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    a.channel,
    a."timestamp"
   FROM bloomapp.create_book a
  WHERE ((a.channel <> 'REACH'::text) AND (a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '1 mon'::interval)));


ALTER TABLE bloomapp.uniqueuserchannellast30days OWNER TO silpgadmin;

--
-- TOC entry 502 (class 1259 OID 919493)
-- Name: uniqueuseros; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuseros AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    a.browser
   FROM bloomapp.create_book a;


ALTER TABLE bloomapp.uniqueuseros OWNER TO silpgadmin;

--
-- TOC entry 503 (class 1259 OID 919497)
-- Name: uniqueuserosalltimecompact; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuserosalltimecompact AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
        CASE
            WHEN ("position"(upper(a.browser), 'UBUNTU'::text) > 0) THEN 'Linux'::text
            WHEN ("position"(upper(a.browser), 'LINUX'::text) > 0) THEN 'Linux'::text
            ELSE a.browser
        END AS opersys
   FROM bloomapp.create_book a;


ALTER TABLE bloomapp.uniqueuserosalltimecompact OWNER TO silpgadmin;

--
-- TOC entry 501 (class 1259 OID 919468)
-- Name: uniqueuserreachlast30days; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuserreachlast30days AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    a.channel,
    a."timestamp"
   FROM bloomapp.create_book a
  WHERE ((a.channel = 'REACH'::text) AND (a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '1 mon'::interval)));


ALTER TABLE bloomapp.uniqueuserreachlast30days OWNER TO silpgadmin;

--
-- TOC entry 497 (class 1259 OID 919434)
-- Name: uniqueuserversion; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuserversion AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    a.version,
    '03 mo'::text AS reference
   FROM bloomapp.create_book a
  WHERE ((a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '3 mons'::interval)) AND (a."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone)));


ALTER TABLE bloomapp.uniqueuserversion OWNER TO silpgadmin;

--
-- TOC entry 499 (class 1259 OID 919445)
-- Name: uniqueuserversionlast30days; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.uniqueuserversionlast30days AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    a.version,
    a."timestamp"
   FROM bloomapp.create_book a
  WHERE (a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '1 mon'::interval));


ALTER TABLE bloomapp.uniqueuserversionlast30days OWNER TO silpgadmin;

--
-- TOC entry 307 (class 1259 OID 28235)
-- Name: upgrade; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.upgrade (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    old_version text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    ip text,
    location_uid bigint,
    clr_version_deprecated text,
    mono_version text
);


ALTER TABLE bloomapp.upgrade OWNER TO segment;

--
-- TOC entry 302 (class 1259 OID 28195)
-- Name: upload_book_failure; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.upload_book_failure (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    dot_net_version text,
    error text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    collection_country text,
    language1_iso639_name text,
    language2_iso639_code text,
    country text,
    language1_iso639_code text,
    branding_project_name text,
    location_uid bigint,
    language3_iso639_code text,
    desktop_environment text,
    clr_version_deprecated text
);


ALTER TABLE bloomapp.upload_book_failure OWNER TO segment;

--
-- TOC entry 310 (class 1259 OID 28259)
-- Name: upload_book_failure_system_time; Type: TABLE; Schema: bloomapp; Owner: segment
--

CREATE TABLE bloomapp.upload_book_failure_system_time (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    location_uid bigint,
    language1_iso639_name text,
    language1_iso639_code text,
    language2_iso639_code text,
    branding_project_name text,
    country text,
    collection_country text
);


ALTER TABLE bloomapp.upload_book_failure_system_time OWNER TO segment;

--
-- TOC entry 397 (class 1259 OID 395517)
-- Name: used_languages; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.used_languages (
    language_id character(20) NOT NULL,
    language_name character varying(50) NOT NULL
);


ALTER TABLE public.used_languages OWNER TO segment;

--
-- TOC entry 398 (class 1259 OID 395580)
-- Name: user_languages; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.user_languages AS
 SELECT a.id,
    a.received_at,
    a.organization AS organization_raw,
    ( SELECT DISTINCT c.language_name
           FROM public.used_languages c
          WHERE (a.uilanguage = (c.language_id)::text)) AS uilanguage
   FROM bloomapp.users a;


ALTER TABLE bloomapp.user_languages OWNER TO silpgadmin;

--
-- TOC entry 488 (class 1259 OID 919300)
-- Name: usersalltimefromlaunch; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.usersalltimefromlaunch AS
 SELECT DISTINCT a.user_id,
    ( SELECT DISTINCT d.country_name
           FROM public.countryregioncitylu d
          WHERE (a.location_uid = d.loc_uid)) AS country
   FROM bloomapp.launch a
  GROUP BY a.location_uid, a.user_id
  ORDER BY a.user_id;


ALTER TABLE bloomapp.usersalltimefromlaunch OWNER TO silpgadmin;

--
-- TOC entry 531 (class 1259 OID 1674208)
-- Name: v_create_book_count_by_month; Type: VIEW; Schema: bloomapp; Owner: silpgadmin
--

CREATE VIEW bloomapp.v_create_book_count_by_month AS
 SELECT count(*) AS count,
    date_trunc('month'::text, c."timestamp") AS date_trunc
   FROM bloomapp.create_book c
  WHERE (c."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone))
  GROUP BY (date_trunc('month'::text, c."timestamp"));


ALTER TABLE bloomapp.v_create_book_count_by_month OWNER TO silpgadmin;

--
-- TOC entry 552 (class 1259 OID 1966485)
-- Name: book_detail; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.book_detail (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_ip text,
    context_library_version text,
    context_user_agent text,
    level text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    book_instance_id text,
    topic text,
    event_text text,
    context_page_referrer text,
    context_locale text,
    context_page_path text,
    book text,
    book_title text,
    context_library_name text,
    context_page_title text,
    context_page_url text,
    event text,
    original_timestamp timestamp with time zone,
    anonymous_id text,
    uuid_ts timestamp with time zone,
    location_uid bigint,
    source text,
    context_page_search text,
    language text,
    publisher text,
    branding_project_name text
);


ALTER TABLE bloomlibrary_org.book_detail OWNER TO segment;

--
-- TOC entry 550 (class 1259 OID 1966421)
-- Name: book_or_shelf_opened; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.book_or_shelf_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_path text,
    original_title text,
    uuid_ts timestamp with time zone,
    context_locale text,
    content_lang text,
    original_timestamp timestamp with time zone,
    question_count bigint,
    branding_project_name text,
    context_page_title text,
    copyright_holder text,
    "timestamp" timestamp with time zone,
    context_page_referrer text,
    anonymous_id text,
    sent_at timestamp with time zone,
    total_numbered_pages bigint,
    creator text,
    context_user_agent text,
    context_ip text,
    event text,
    event_text text,
    session_id text,
    title text,
    book_instance_id text,
    context_library_version text,
    context_page_search text,
    context_page_url text,
    features text,
    context_library_name text,
    location_uid bigint,
    original_copyright_holder text,
    publisher text
);


ALTER TABLE bloomlibrary_org.book_or_shelf_opened OWNER TO segment;

--
-- TOC entry 332 (class 1259 OID 49395)
-- Name: book_search; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.book_search (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    all_licenses boolean,
    anonymous_id text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    lang text,
    original_timestamp timestamp with time zone,
    search_string text,
    sent_at timestamp with time zone,
    shelf text,
    _tag text,
    "timestamp" timestamp with time zone,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    context_page_referrer_domain text,
    osversion text,
    browser text,
    browser_version text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    location_uid bigint,
    features text,
    context_locale text
);


ALTER TABLE bloomlibrary_org.book_search OWNER TO segment;

--
-- TOC entry 581 (class 1259 OID 2017504)
-- Name: comprehension; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.comprehension (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_name text,
    book_instance_id text,
    creator text,
    event text,
    original_timestamp timestamp with time zone,
    question_count bigint,
    branding_project_name text,
    percent_right bigint,
    context_page_url text,
    content_lang text,
    context_page_search text,
    context_page_title text,
    possible_points bigint,
    uuid_ts timestamp with time zone,
    actual_points bigint,
    context_page_path text,
    sent_at timestamp with time zone,
    title text,
    total_numbered_pages bigint,
    context_library_version text,
    context_ip text,
    context_locale text,
    copyright_holder text,
    event_text text,
    session_id text,
    anonymous_id text,
    features text,
    "timestamp" timestamp with time zone,
    context_user_agent text,
    context_page_referrer text,
    location_uid bigint
);


ALTER TABLE bloomlibrary_org.comprehension OWNER TO segment;

--
-- TOC entry 354 (class 1259 OID 49784)
-- Name: download_book; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.download_book (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    book text,
    book_title text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    href text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_page_referrer_domain text,
    search_engine text,
    search_keyword text,
    browser text,
    browser_version text,
    osversion text,
    device text,
    screen_height bigint,
    screen_width bigint,
    location_uid bigint,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    context_locale text,
    event_type text,
    book_instance_id text,
    topic text,
    level text,
    language text,
    publisher text,
    branding_project_name text
);


ALTER TABLE bloomlibrary_org.download_book OWNER TO segment;

--
-- TOC entry 343 (class 1259 OID 49507)
-- Name: error_parse_com; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.error_parse_com (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    call text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    error_code bigint,
    error_message text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_locale text
);


ALTER TABLE bloomlibrary_org.error_parse_com OWNER TO segment;

--
-- TOC entry 349 (class 1259 OID 49648)
-- Name: error_restangular; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.error_restangular (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    response_config_data_book_id text,
    response_config_data_email text,
    response_config_data_password text,
    response_config_data_tags text,
    response_config_data_update_source text,
    response_config_data_user_ip text,
    response_config_data_user_name text,
    response_config_data_username text,
    response_config_headers_accept text,
    response_config_headers_content_type text,
    response_config_headers_x_parse_application_id text,
    response_config_headers_x_parse_rest_api_key text,
    response_config_headers_x_parse_session_token text,
    response_config_method text,
    response_config_params_include text,
    response_config_params_password text,
    response_config_params_username text,
    response_config_params_where text,
    response_config_params_where_books_class_name text,
    response_config_params_where_books_object_id text,
    response_config_params_where_books_type text,
    response_config_params_where_owner_class_name text,
    response_config_params_where_owner_object_id text,
    response_config_params_where_owner_type text,
    response_config_transform_request text,
    response_config_transform_response text,
    response_config_url text,
    response_data_code bigint,
    response_data_message text,
    response_status bigint,
    response_status_text text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    response_config_data_librarian_note text,
    response_config_data_in_circulation boolean,
    context_locale text,
    response_config_data_id text
);


ALTER TABLE bloomlibrary_org.error_restangular OWNER TO segment;

--
-- TOC entry 336 (class 1259 OID 49427)
-- Name: log_in; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.log_in (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    username text,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    context_page_referrer_domain text,
    search_engine text,
    search_keyword text,
    browser text,
    browser_version text,
    osversion text,
    device text,
    screen_height bigint,
    screen_width bigint,
    location_uid bigint,
    context_locale text
);


ALTER TABLE bloomlibrary_org.log_in OWNER TO segment;

--
-- TOC entry 339 (class 1259 OID 49451)
-- Name: log_out; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.log_out (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_name text,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    context_page_referrer_domain text,
    search_engine text,
    search_keyword text,
    browser text,
    browser_version text,
    osversion text,
    device text,
    screen_height bigint,
    screen_width bigint,
    location_uid bigint,
    context_locale text
);


ALTER TABLE bloomlibrary_org.log_out OWNER TO segment;

--
-- TOC entry 559 (class 1259 OID 1973590)
-- Name: open_collection; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.open_collection (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    event_text text,
    sent_at timestamp with time zone,
    shelf text,
    "timestamp" timestamp with time zone,
    anonymous_id text,
    context_library_version text,
    event text,
    original_timestamp timestamp with time zone,
    search_string text,
    context_ip text,
    context_page_path text,
    context_user_agent text,
    context_locale text,
    context_page_referrer text,
    lang text,
    features text,
    pathname text,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_page_title text,
    context_page_url text,
    context_page_search text,
    location_uid bigint,
    _tag text
);


ALTER TABLE bloomlibrary_org.open_collection OWNER TO segment;

--
-- TOC entry 355 (class 1259 OID 49828)
-- Name: pages; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.pages (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_campaign_medium text,
    context_campaign_name text,
    context_campaign_source text,
    context_campaign_term text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    name text,
    original_timestamp timestamp with time zone,
    path text,
    referrer text,
    search text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    url text,
    context_page_referrer_domain text,
    event text,
    event_text text,
    search_engine text,
    search_keyword text,
    browser text,
    browser_version text,
    osversion text,
    device text,
    screen_height bigint,
    screen_width bigint,
    location_uid bigint,
    context_locale text
);


ALTER TABLE bloomlibrary_org.pages OWNER TO segment;

--
-- TOC entry 551 (class 1259 OID 1966459)
-- Name: pages_read; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.pages_read (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_title text,
    features text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    context_ip text,
    context_page_path text,
    question_count bigint,
    session_id text,
    context_library_name text,
    last_numbered_page_read boolean,
    original_title text,
    uuid_ts timestamp with time zone,
    audio_duration bigint,
    copyright_holder text,
    context_page_url text,
    event text,
    total_numbered_pages bigint,
    book_instance_id text,
    context_locale text,
    context_page_search text,
    creator text,
    "timestamp" timestamp with time zone,
    title text,
    branding_project_name text,
    content_lang text,
    context_user_agent text,
    video_duration bigint,
    audio_pages bigint,
    context_library_version text,
    event_text text,
    anonymous_id text,
    context_page_referrer text,
    non_audio_pages bigint,
    video_pages bigint,
    location_uid bigint,
    original_copyright_holder text,
    publisher text
);


ALTER TABLE bloomlibrary_org.pages_read OWNER TO segment;

--
-- TOC entry 327 (class 1259 OID 49355)
-- Name: preview; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.preview (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    book text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    context_page_referrer_domain text,
    search_engine text,
    search_keyword text,
    browser text,
    browser_version text,
    osversion text,
    device text,
    screen_height bigint,
    screen_width bigint,
    location_uid bigint
);


ALTER TABLE bloomlibrary_org.preview OWNER TO segment;

--
-- TOC entry 558 (class 1259 OID 1973546)
-- Name: search_failed; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.search_failed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_title text,
    event_text text,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_page_path text,
    context_locale text,
    event text,
    uuid_ts timestamp with time zone,
    context_library_version text,
    context_user_agent text,
    context_ip text,
    context_library_name text,
    context_page_url text,
    match text,
    sent_at timestamp with time zone,
    anonymous_id text,
    location_uid bigint,
    context_page_referrer text
);


ALTER TABLE bloomlibrary_org.search_failed OWNER TO segment;

--
-- TOC entry 347 (class 1259 OID 49578)
-- Name: tracks; Type: TABLE; Schema: bloomlibrary_org; Owner: segment
--

CREATE TABLE bloomlibrary_org.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_campaign_name text,
    context_campaign_term text,
    context_campaign_medium text,
    context_campaign_source text,
    context_locale text
);


ALTER TABLE bloomlibrary_org.tracks OWNER TO segment;

--
-- TOC entry 443 (class 1259 OID 637167)
-- Name: testingbooksuploadedalltime; Type: VIEW; Schema: bloomlibrary_org; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_org.testingbooksuploadedalltime AS
 SELECT DISTINCT a.event,
    a."timestamp"
   FROM bloomlibrary_org.tracks a
  WHERE (a."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone));


ALTER TABLE bloomlibrary_org.testingbooksuploadedalltime OWNER TO silpgadmin;

--
-- TOC entry 554 (class 1259 OID 1966614)
-- Name: v_book_detail; Type: VIEW; Schema: bloomlibrary_org; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_org.v_book_detail AS
 SELECT book_detail.book AS book_id,
    book_detail.book_instance_id,
    book_detail."timestamp"
   FROM bloomlibrary_org.book_detail;


ALTER TABLE bloomlibrary_org.v_book_detail OWNER TO silpgadmin;

--
-- TOC entry 582 (class 1259 OID 2024260)
-- Name: v_comprehension; Type: VIEW; Schema: bloomlibrary_org; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_org.v_comprehension AS
 SELECT comp."timestamp" AS time_utc,
    comp."timestamp" AS time_local,
    (comp."timestamp")::date AS date_local,
    NULL::unknown AS context_timezone,
    initcap(to_char(comp."timestamp", 'day'::text)) AS time_local_day,
    (date_part('hour'::text, comp."timestamp"))::integer AS time_local_hour,
    comp.anonymous_id,
    NULL::unknown AS device_unique_id,
    NULL::unknown AS bloom_reader_version,
    comp.branding_project_name AS book_branding,
    comp.title AS book_title,
    comp.question_count,
    comp.percent_right,
    c.country_name AS country,
    c.region,
    c.city,
    NULL::unknown AS channel,
    comp.book_instance_id
   FROM (bloomlibrary_org.comprehension comp
     LEFT JOIN public.countryregioncitylu c ON ((comp.location_uid = c.loc_uid)));


ALTER TABLE bloomlibrary_org.v_comprehension OWNER TO silpgadmin;

--
-- TOC entry 556 (class 1259 OID 1969853)
-- Name: v_download_book; Type: VIEW; Schema: bloomlibrary_org; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_org.v_download_book AS
 SELECT d."timestamp" AS time_utc,
    d.book AS book_id,
    d.book_instance_id,
    COALESCE(d.event_type, 'shell'::text) AS event_type,
    d.book_title,
    d.branding_project_name AS book_branding,
    c.country_name AS country,
    c.region,
    c.city,
    d.topic
   FROM (bloomlibrary_org.download_book d
     LEFT JOIN public.countryregioncitylu c ON ((d.location_uid = c.loc_uid)));


ALTER TABLE bloomlibrary_org.v_download_book OWNER TO silpgadmin;

--
-- TOC entry 578 (class 1259 OID 2012313)
-- Name: v_pages_read; Type: VIEW; Schema: bloomlibrary_org; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_org.v_pages_read AS
 SELECT pr."timestamp" AS time_utc,
    pr."timestamp" AS time_local,
    (pr."timestamp")::date AS date_local,
    NULL::unknown AS context_timezone,
    initcap(to_char(pr."timestamp", 'day'::text)) AS time_local_day,
    (date_part('hour'::text, pr."timestamp"))::integer AS time_local_hour,
    pr.audio_pages AS pages_read_audio,
    pr.non_audio_pages AS pages_read_nonaudio,
    (pr.audio_pages + pr.non_audio_pages) AS pages_read,
    pr.anonymous_id,
    NULL::unknown AS device_unique_id,
    NULL::unknown AS device_project_hardware_code,
    NULL::unknown AS bloom_reader_version,
    pr.title AS book_title,
    pr.branding_project_name AS book_branding,
    pr.content_lang AS book_language_code,
    'error: language name lookup failed'::character varying(50) AS book_language,
    pr.total_numbered_pages AS book_pages,
    pr.last_numbered_page_read AS finished_reading_book,
    c.country_name AS country,
    c.region,
    c.city,
    NULL::unknown AS channel,
    pr.video_pages AS video_pages_played,
    pr.features,
    pr.book_instance_id
   FROM (bloomlibrary_org.pages_read pr
     LEFT JOIN public.countryregioncitylu c ON ((pr.location_uid = c.loc_uid)));


ALTER TABLE bloomlibrary_org.v_pages_read OWNER TO silpgadmin;

--
-- TOC entry 533 (class 1259 OID 1853652)
-- Name: book_detail; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.book_detail (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    book_instance_id text,
    context_page_search text,
    source text,
    context_page_title text,
    sent_at timestamp with time zone,
    topic text,
    uuid_ts timestamp with time zone,
    context_page_referrer text,
    original_timestamp timestamp with time zone,
    context_library_name text,
    context_page_path text,
    event text,
    language text,
    anonymous_id text,
    "timestamp" timestamp with time zone,
    title text,
    context_page_url text,
    context_ip text,
    context_library_version text,
    context_locale text,
    context_user_agent text,
    event_text text,
    event_type text,
    level text,
    book_id text,
    publisher text,
    book_title text,
    book text
);


ALTER TABLE bloomlibrary_test.book_detail OWNER TO segment;

--
-- TOC entry 540 (class 1259 OID 1856008)
-- Name: book_or_shelf_opened; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.book_or_shelf_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_search text,
    context_page_url text,
    context_library_version text,
    copyright_holder text,
    question_count bigint,
    creator text,
    event_text text,
    context_user_agent text,
    "timestamp" timestamp with time zone,
    anonymous_id text,
    content_lang text,
    context_page_path text,
    context_page_title text,
    original_title text,
    session_id text,
    title text,
    branding_project_name text,
    context_ip text,
    context_locale text,
    features text,
    event text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    total_numbered_pages bigint,
    book_instance_id text,
    context_page_referrer text,
    uuid_ts timestamp with time zone,
    context_library_name text,
    original_copyright_holder text,
    original_publisher text,
    publisher text
);


ALTER TABLE bloomlibrary_test.book_or_shelf_opened OWNER TO segment;

--
-- TOC entry 545 (class 1259 OID 1862866)
-- Name: comprehension; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.comprehension (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    anonymous_id text,
    book_instance_id text,
    context_locale text,
    context_page_referrer text,
    copyright_holder text,
    content_lang text,
    context_page_title text,
    sent_at timestamp with time zone,
    context_page_path text,
    context_library_version text,
    question_count bigint,
    event text,
    original_timestamp timestamp with time zone,
    possible_points bigint,
    branding_project_name text,
    context_user_agent text,
    percent_right numeric,
    "timestamp" timestamp with time zone,
    actual_points bigint,
    context_library_name text,
    context_page_url text,
    event_text text,
    features text,
    title text,
    total_numbered_pages bigint,
    uuid_ts timestamp with time zone,
    context_ip text,
    context_page_search text,
    creator text,
    original_copyright_holder text,
    session_id text
);


ALTER TABLE bloomlibrary_test.comprehension OWNER TO segment;

--
-- TOC entry 534 (class 1259 OID 1853666)
-- Name: download_book; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.download_book (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_version text,
    context_page_title text,
    context_page_url text,
    event text,
    level text,
    original_timestamp timestamp with time zone,
    context_page_path text,
    context_page_search text,
    event_text text,
    "timestamp" timestamp with time zone,
    topic text,
    context_ip text,
    context_locale text,
    context_page_referrer text,
    context_user_agent text,
    sent_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    book_instance_id text,
    context_library_name text,
    event_type text,
    language text,
    publisher text,
    book text,
    book_title text
);


ALTER TABLE bloomlibrary_test.download_book OWNER TO segment;

--
-- TOC entry 541 (class 1259 OID 1856022)
-- Name: log_in; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.log_in (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_name text,
    context_page_url text,
    context_page_path text,
    context_page_referrer text,
    context_page_search text,
    context_page_title text,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    anonymous_id text,
    context_library_version text,
    context_user_agent text,
    event text,
    event_text text,
    context_ip text,
    context_locale text,
    sent_at timestamp with time zone,
    uuid_ts timestamp with time zone
);


ALTER TABLE bloomlibrary_test.log_in OWNER TO segment;

--
-- TOC entry 542 (class 1259 OID 1856036)
-- Name: log_out; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.log_out (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_search text,
    event text,
    "timestamp" timestamp with time zone,
    uuid_ts timestamp with time zone,
    event_text text,
    sent_at timestamp with time zone,
    anonymous_id text,
    context_ip text,
    context_page_title text,
    context_page_url text,
    original_timestamp timestamp with time zone,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_page_path text,
    context_page_referrer text,
    context_user_agent text
);


ALTER TABLE bloomlibrary_test.log_out OWNER TO segment;

--
-- TOC entry 535 (class 1259 OID 1853680)
-- Name: open_collection; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.open_collection (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_referrer text,
    context_page_title text,
    context_user_agent text,
    lang text,
    anonymous_id text,
    context_ip text,
    context_locale text,
    context_page_path text,
    original_timestamp timestamp with time zone,
    uuid_ts timestamp with time zone,
    event text,
    event_text text,
    features text,
    "timestamp" timestamp with time zone,
    shelf text,
    context_library_name text,
    context_library_version text,
    context_page_url text,
    pathname text,
    sent_at timestamp with time zone,
    search_string text,
    _tag text,
    context_page_search text
);


ALTER TABLE bloomlibrary_test.open_collection OWNER TO segment;

--
-- TOC entry 536 (class 1259 OID 1853700)
-- Name: pages; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.pages (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_locale text,
    "timestamp" timestamp with time zone,
    referrer text,
    title text,
    anonymous_id text,
    context_library_version text,
    context_page_referrer text,
    context_page_url text,
    context_user_agent text,
    original_timestamp timestamp with time zone,
    context_page_title text,
    sent_at timestamp with time zone,
    context_ip text,
    context_library_name text,
    context_page_path text,
    path text,
    url text,
    uuid_ts timestamp with time zone
);


ALTER TABLE bloomlibrary_test.pages OWNER TO segment;

--
-- TOC entry 544 (class 1259 OID 1856070)
-- Name: pages_read; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.pages_read (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    question_count bigint,
    sent_at timestamp with time zone,
    title text,
    context_ip text,
    context_page_url text,
    last_numbered_page_read boolean,
    "timestamp" timestamp with time zone,
    branding_project_name text,
    context_library_name text,
    context_library_version text,
    session_id text,
    anonymous_id text,
    audio_duration bigint,
    creator text,
    event text,
    features text,
    video_pages bigint,
    context_page_path text,
    context_page_search text,
    context_page_referrer text,
    context_page_title text,
    non_audio_pages bigint,
    video_duration bigint,
    content_lang text,
    context_user_agent text,
    copyright_holder text,
    event_text text,
    original_timestamp timestamp with time zone,
    total_numbered_pages bigint,
    audio_pages bigint,
    book_instance_id text,
    uuid_ts timestamp with time zone,
    context_locale text,
    original_copyright_holder text,
    original_title text,
    original_publisher text,
    publisher text
);


ALTER TABLE bloomlibrary_test.pages_read OWNER TO segment;

--
-- TOC entry 543 (class 1259 OID 1856050)
-- Name: search_failed; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.search_failed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_locale text,
    context_page_path text,
    context_page_title text,
    match text,
    anonymous_id text,
    event text,
    "timestamp" timestamp with time zone,
    context_ip text,
    context_library_name text,
    context_user_agent text,
    original_timestamp timestamp with time zone,
    context_library_version text,
    context_page_url text,
    event_text text,
    sent_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_page_referrer text
);


ALTER TABLE bloomlibrary_test.search_failed OWNER TO segment;

--
-- TOC entry 532 (class 1259 OID 1853637)
-- Name: tracks; Type: TABLE; Schema: bloomlibrary_test; Owner: segment
--

CREATE TABLE bloomlibrary_test.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_page_referrer text,
    context_page_url text,
    context_user_agent text,
    event text,
    "timestamp" timestamp with time zone,
    event_text text,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_locale text,
    context_page_path text,
    context_page_search text,
    context_page_title text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone
);


ALTER TABLE bloomlibrary_test.tracks OWNER TO segment;

--
-- TOC entry 537 (class 1259 OID 1853851)
-- Name: v_book_detail; Type: VIEW; Schema: bloomlibrary_test; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_test.v_book_detail AS
 SELECT book_detail.book AS book_id,
    book_detail.book_instance_id,
    book_detail."timestamp"
   FROM bloomlibrary_test.book_detail;


ALTER TABLE bloomlibrary_test.v_book_detail OWNER TO silpgadmin;

--
-- TOC entry 553 (class 1259 OID 1966584)
-- Name: v_download_book; Type: VIEW; Schema: bloomlibrary_test; Owner: silpgadmin
--

CREATE VIEW bloomlibrary_test.v_download_book AS
 SELECT download_book.book AS book_id,
    download_book.book_instance_id,
    download_book.event_type,
    download_book."timestamp",
    download_book.book_title
   FROM bloomlibrary_test.download_book;


ALTER TABLE bloomlibrary_test.v_download_book OWNER TO silpgadmin;

--
-- TOC entry 389 (class 1259 OID 338943)
-- Name: accounts; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.accounts (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_screen_height bigint,
    context_traits_anonymous_id text,
    user_id text,
    context_device_manufacturer text,
    context_library_version text,
    context_screen_density numeric,
    context_timezone text,
    uuid_ts timestamp with time zone,
    context_app_version text,
    context_traits_user_id text,
    context_user_agent text,
    context_major_minor text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_os_name text,
    context_os_version text,
    context_app_name text,
    context_device_name text,
    context_ip text,
    context_library_name text,
    context_app_build bigint,
    context_device_type text,
    context_device_id text,
    context_locale text,
    context_app_namespace text,
    context_network_wifi boolean,
    context_screen_width bigint,
    context_device_model text,
    context_network_carrier text
);


ALTER TABLE bloomreader.accounts OWNER TO segment;

--
-- TOC entry 341 (class 1259 OID 49458)
-- Name: application_installed; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.application_installed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_major_minor text,
    context_network_wifi boolean,
    context_network_bluetooth boolean,
    context_network_carrier text,
    context_network_cellular boolean,
    context_traits_user_id text,
    user_id text,
    location_uid bigint
);


ALTER TABLE bloomreader.application_installed OWNER TO segment;

--
-- TOC entry 367 (class 1259 OID 106295)
-- Name: application_installed; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.application_installed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_network_cellular boolean,
    context_network_bluetooth boolean,
    context_network_wifi boolean,
    context_traits_user_id text,
    user_id text,
    location_uid bigint
);


ALTER TABLE bloomreaderbeta.application_installed OWNER TO segment;

--
-- TOC entry 492 (class 1259 OID 919394)
-- Name: alldevices; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.alldevices AS
 SELECT c.device_count,
    c."timestamp"
   FROM ( SELECT count(*) AS device_count,
            a."timestamp"
           FROM bloomreader.application_installed a
          GROUP BY a."timestamp") c
UNION ALL
 SELECT d.device_count,
    d."timestamp"
   FROM ( SELECT count(*) AS device_count,
            b."timestamp"
           FROM bloomreaderbeta.application_installed b
          GROUP BY b."timestamp") d;


ALTER TABLE bloomreader.alldevices OWNER TO silpgadmin;

--
-- TOC entry 519 (class 1259 OID 1072682)
-- Name: application_backgrounded; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.application_backgrounded (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_screen_density numeric,
    context_screen_height bigint,
    event text,
    "timestamp" timestamp with time zone,
    context_device_manufacturer text,
    context_device_type text,
    context_ip text,
    context_locale text,
    context_app_namespace text,
    context_device_name text,
    context_library_name text,
    uuid_ts timestamp with time zone,
    context_major_minor text,
    context_network_wifi boolean,
    event_text text,
    context_network_cellular boolean,
    context_os_name text,
    sent_at timestamp with time zone,
    anonymous_id text,
    context_app_build text,
    context_app_name text,
    context_device_model text,
    context_library_version text,
    context_network_carrier text,
    context_user_agent text,
    original_timestamp timestamp with time zone,
    context_device_id text,
    context_os_version text,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_app_version text,
    context_network_bluetooth boolean
);


ALTER TABLE bloomreader.application_backgrounded OWNER TO segment;

--
-- TOC entry 384 (class 1259 OID 255848)
-- Name: application_opened; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.application_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    location_uid bigint,
    from_background boolean
);


ALTER TABLE bloomreader.application_opened OWNER TO segment;

--
-- TOC entry 378 (class 1259 OID 224150)
-- Name: application_updated; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.application_updated (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    anonymous_id text,
    context_app_name text,
    context_device_type text,
    context_user_agent text,
    event_text text,
    previous_version text,
    sent_at timestamp with time zone,
    context_device_name text,
    context_os_name text,
    context_timezone text,
    context_traits_anonymous_id text,
    context_major_minor text,
    context_screen_width bigint,
    context_library_version text,
    context_screen_density bigint,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_app_version text,
    context_device_manufacturer text,
    context_ip text,
    context_library_name text,
    context_app_namespace text,
    context_os_version text,
    event text,
    build bigint,
    context_device_id text,
    context_network_cellular boolean,
    context_device_model text,
    context_network_bluetooth boolean,
    previous_build bigint,
    context_screen_height bigint,
    uuid_ts timestamp with time zone,
    version text,
    context_app_build bigint,
    context_locale text,
    context_network_carrier text,
    context_network_wifi boolean,
    user_id text,
    context_traits_user_id text
);


ALTER TABLE bloomreader.application_updated OWNER TO segment;

--
-- TOC entry 330 (class 1259 OID 49358)
-- Name: book_closed; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.book_closed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    last_page bigint,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text
);


ALTER TABLE bloomreader.book_closed OWNER TO segment;

--
-- TOC entry 334 (class 1259 OID 49411)
-- Name: book_opened; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.book_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text
);


ALTER TABLE bloomreader.book_opened OWNER TO segment;

--
-- TOC entry 377 (class 1259 OID 216713)
-- Name: book_or_shelf_opened; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.book_or_shelf_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_screen_density bigint,
    sent_at timestamp with time zone,
    title text,
    uuid_ts timestamp with time zone,
    context_app_namespace text,
    context_library_version text,
    context_device_name text,
    context_device_type text,
    context_locale text,
    context_network_wifi boolean,
    context_traits_anonymous_id text,
    event_text text,
    content_lang text,
    context_device_model text,
    context_device_id text,
    question_count bigint,
    context_app_build bigint,
    context_app_version text,
    context_network_bluetooth boolean,
    context_os_name text,
    context_screen_height bigint,
    context_timezone text,
    "timestamp" timestamp with time zone,
    context_ip text,
    context_library_name text,
    context_device_manufacturer text,
    original_timestamp timestamp with time zone,
    context_user_agent text,
    event text,
    anonymous_id text,
    context_os_version text,
    context_major_minor text,
    context_screen_width bigint,
    total_numbered_pages bigint,
    branding_project_name text,
    context_app_name text,
    context_network_carrier text,
    context_network_cellular boolean,
    context_traits_user_id text,
    user_id text,
    location_uid bigint,
    features text,
    session_id text,
    original_copyright_holder text,
    copyright_holder text,
    creator text,
    book_instance_id text,
    original_publisher text,
    original_title text,
    publisher text
);


ALTER TABLE bloomreader.book_or_shelf_opened OWNER TO segment;

--
-- TOC entry 379 (class 1259 OID 231549)
-- Name: pages_read; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.pages_read (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    last_page bigint,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    audio_pages bigint,
    non_audio_pages bigint,
    context_traits_user_id text,
    user_id text,
    branding_project_name text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    content_lang text,
    last_numbered_page_read boolean,
    total_numbered_pages bigint,
    question_count bigint,
    country_name character varying(64),
    location_uid bigint,
    features text,
    video_pages_played bigint,
    video_duration bigint,
    audio_duration bigint,
    session_id text,
    creator text,
    video_pages bigint,
    copyright_holder text,
    original_copyright_holder text,
    book_instance_id text,
    original_publisher text,
    publisher text,
    original_title text
);


ALTER TABLE bloomreader.pages_read OWNER TO segment;

--
-- TOC entry 376 (class 1259 OID 215572)
-- Name: questions_correct; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.questions_correct (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    sent_at timestamp with time zone,
    title text,
    uuid_ts timestamp with time zone,
    event_text text,
    branding_project_name text,
    context_device_manufacturer text,
    context_device_name text,
    context_ip text,
    context_locale text,
    context_screen_width bigint,
    context_app_build bigint,
    context_network_wifi boolean,
    context_os_version text,
    context_app_version text,
    context_library_name text,
    context_network_cellular boolean,
    context_screen_height bigint,
    percent_right bigint,
    context_device_model text,
    context_network_bluetooth boolean,
    context_screen_density numeric,
    context_user_agent text,
    context_app_namespace text,
    event text,
    right_first_time bigint,
    "timestamp" timestamp with time zone,
    context_major_minor text,
    context_network_carrier text,
    context_timezone text,
    context_traits_anonymous_id text,
    original_timestamp timestamp with time zone,
    question_count bigint,
    anonymous_id text,
    context_app_name text,
    context_device_id text,
    context_device_type text,
    context_library_version text,
    context_os_name text,
    context_traits_user_id text,
    user_id text,
    location_uid bigint,
    book_instance_id text
);


ALTER TABLE bloomreader.questions_correct OWNER TO segment;

--
-- TOC entry 380 (class 1259 OID 231563)
-- Name: pages_read; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.pages_read (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    last_page bigint,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    audio_pages bigint,
    non_audio_pages bigint,
    context_traits_user_id text,
    user_id text,
    branding_project_name text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    content_lang text,
    last_numbered_page_read boolean,
    total_numbered_pages bigint,
    question_count bigint,
    country_name character varying(64),
    location_uid bigint,
    features text,
    video_pages_played bigint,
    total_audio_page_duration bigint,
    total_video_page_duration bigint,
    audio_duration bigint,
    video_duration bigint,
    session_id text,
    original_copyright_holder text,
    copyright_holder text,
    video_pages bigint,
    creator text,
    book_instance_id text,
    original_publisher text,
    original_title text,
    publisher text
);


ALTER TABLE bloomreaderbeta.pages_read OWNER TO segment;

--
-- TOC entry 373 (class 1259 OID 169897)
-- Name: questions_correct; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.questions_correct (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    sent_at timestamp with time zone,
    title text,
    uuid_ts timestamp with time zone,
    event_text text,
    branding_project_name text,
    context_device_manufacturer text,
    context_device_name text,
    context_ip text,
    context_locale text,
    context_screen_width bigint,
    context_app_build bigint,
    context_network_wifi boolean,
    context_os_version text,
    context_app_version text,
    context_library_name text,
    context_network_cellular boolean,
    context_screen_height bigint,
    percent_right bigint,
    context_device_model text,
    context_network_bluetooth boolean,
    context_screen_density numeric,
    context_user_agent text,
    context_app_namespace text,
    event text,
    right_first_time bigint,
    "timestamp" timestamp with time zone,
    context_major_minor text,
    context_network_carrier text,
    context_timezone text,
    context_traits_anonymous_id text,
    original_timestamp timestamp with time zone,
    question_count bigint,
    anonymous_id text,
    context_app_name text,
    context_device_id text,
    context_device_type text,
    context_library_version text,
    context_os_name text,
    context_traits_user_id text,
    user_id text,
    location_uid bigint,
    book_instance_id text
);


ALTER TABLE bloomreaderbeta.questions_correct OWNER TO segment;

--
-- TOC entry 386 (class 1259 OID 308610)
-- Name: ip2loc_sm_tab; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.ip2loc_sm_tab (
    context_ip bigint NOT NULL,
    country_code character(3) NOT NULL,
    country_name character varying(64) NOT NULL,
    region character varying(100),
    city character varying(100),
    loc_uid bigint
);


ALTER TABLE public.ip2loc_sm_tab OWNER TO segment;

--
-- TOC entry 371 (class 1259 OID 156725)
-- Name: languagecodes; Type: TABLE; Schema: public; Owner: silpgadmin
--

CREATE TABLE public.languagecodes (
    langid character(4) NOT NULL,
    countryid character(3) NOT NULL,
    langstatus character(2) NOT NULL,
    clname character varying(50) NOT NULL,
    langid2 character(3),
    countryname character varying(50)
);


ALTER TABLE public.languagecodes OWNER TO silpgadmin;

--
-- TOC entry 482 (class 1259 OID 910837)
-- Name: books; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.books AS
 SELECT a."timestamp" AS booktimestamp,
    a.title AS booktitle,
        CASE
            WHEN (a.last_numbered_page_read = true) THEN 1
            ELSE 0
        END AS finished,
    a.branding_project_name AS branding,
    c.clname AS booklanguage,
        CASE
            WHEN (EXISTS ( SELECT 'x'
               FROM ( SELECT questions_correct.id,
                        questions_correct.received_at,
                        questions_correct.sent_at,
                        questions_correct.title,
                        questions_correct.uuid_ts,
                        questions_correct.event_text,
                        questions_correct.branding_project_name,
                        questions_correct.context_device_manufacturer,
                        questions_correct.context_device_name,
                        questions_correct.context_ip,
                        questions_correct.context_locale,
                        questions_correct.context_screen_width,
                        questions_correct.context_app_build,
                        questions_correct.context_network_wifi,
                        questions_correct.context_os_version,
                        questions_correct.context_app_version,
                        questions_correct.context_library_name,
                        questions_correct.context_network_cellular,
                        questions_correct.context_screen_height,
                        questions_correct.percent_right,
                        questions_correct.context_device_model,
                        questions_correct.context_network_bluetooth,
                        questions_correct.context_screen_density,
                        questions_correct.context_user_agent,
                        questions_correct.context_app_namespace,
                        questions_correct.event,
                        questions_correct.right_first_time,
                        questions_correct."timestamp",
                        questions_correct.context_major_minor,
                        questions_correct.context_network_carrier,
                        questions_correct.context_timezone,
                        questions_correct.context_traits_anonymous_id,
                        questions_correct.original_timestamp,
                        questions_correct.question_count,
                        questions_correct.anonymous_id,
                        questions_correct.context_app_name,
                        questions_correct.context_device_id,
                        questions_correct.context_device_type,
                        questions_correct.context_library_version,
                        questions_correct.context_os_name,
                        questions_correct.context_traits_user_id,
                        questions_correct.user_id,
                        questions_correct.location_uid
                       FROM bloomreader.questions_correct
                    UNION ALL
                     SELECT questions_correct.id,
                        questions_correct.received_at,
                        questions_correct.sent_at,
                        questions_correct.title,
                        questions_correct.uuid_ts,
                        questions_correct.event_text,
                        questions_correct.branding_project_name,
                        questions_correct.context_device_manufacturer,
                        questions_correct.context_device_name,
                        questions_correct.context_ip,
                        questions_correct.context_locale,
                        questions_correct.context_screen_width,
                        questions_correct.context_app_build,
                        questions_correct.context_network_wifi,
                        questions_correct.context_os_version,
                        questions_correct.context_app_version,
                        questions_correct.context_library_name,
                        questions_correct.context_network_cellular,
                        questions_correct.context_screen_height,
                        questions_correct.percent_right,
                        questions_correct.context_device_model,
                        questions_correct.context_network_bluetooth,
                        questions_correct.context_screen_density,
                        questions_correct.context_user_agent,
                        questions_correct.context_app_namespace,
                        questions_correct.event,
                        questions_correct.right_first_time,
                        questions_correct."timestamp",
                        questions_correct.context_major_minor,
                        questions_correct.context_network_carrier,
                        questions_correct.context_timezone,
                        questions_correct.context_traits_anonymous_id,
                        questions_correct.original_timestamp,
                        questions_correct.question_count,
                        questions_correct.anonymous_id,
                        questions_correct.context_app_name,
                        questions_correct.context_device_id,
                        questions_correct.context_device_type,
                        questions_correct.context_library_version,
                        questions_correct.context_os_name,
                        questions_correct.context_traits_user_id,
                        questions_correct.user_id,
                        questions_correct.location_uid
                       FROM bloomreaderbeta.questions_correct) q
              WHERE (lower(q.title) = lower(a.title)))) THEN
            CASE
                WHEN (a.audio_pages > 0) THEN 'Audio, Quiz'::text
                WHEN (a.audio_pages = 0) THEN 'Quiz'::text
                ELSE NULL::text
            END
            ELSE
            CASE
                WHEN (a.audio_pages > 0) THEN 'Audio'::text
                ELSE NULL::text
            END
        END AS media,
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2ipv4((a.context_ip)::character varying) = d.context_ip)) AS country
   FROM (( SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreader.pages_read
        UNION ALL
         SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreaderbeta.pages_read) a
     JOIN public.languagecodes c ON (((a.content_lang = (c.langid)::text) OR (a.content_lang = (c.langid2)::text))))
  ORDER BY a.title;


ALTER TABLE bloomreader.books OWNER TO silpgadmin;

--
-- TOC entry 480 (class 1259 OID 854828)
-- Name: bookscreatedalltimenew; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.bookscreatedalltimenew AS
 SELECT count(DISTINCT a.book_id) AS distinct_book_count,
    a.language1_iso639_code,
    date_trunc('month'::text, a."timestamp") AS mon
   FROM bloomapp.create_book a
  WHERE (a.book_id IS NOT NULL)
  GROUP BY (date_trunc('month'::text, a."timestamp")), a.language1_iso639_code;


ALTER TABLE bloomreader.bookscreatedalltimenew OWNER TO silpgadmin;

--
-- TOC entry 472 (class 1259 OID 832168)
-- Name: unionquestionsgt; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.unionquestionsgt AS
 SELECT questions_correct.id,
    questions_correct.received_at,
    questions_correct.sent_at,
    questions_correct.title,
    questions_correct.uuid_ts,
    questions_correct.event_text,
    questions_correct.branding_project_name,
    questions_correct.context_device_manufacturer,
    questions_correct.context_device_name,
    questions_correct.context_ip,
    questions_correct.context_locale,
    questions_correct.context_screen_width,
    questions_correct.context_app_build,
    questions_correct.context_network_wifi,
    questions_correct.context_os_version,
    questions_correct.context_app_version,
    questions_correct.context_library_name,
    questions_correct.context_network_cellular,
    questions_correct.context_screen_height,
    questions_correct.percent_right,
    questions_correct.context_device_model,
    questions_correct.context_network_bluetooth,
    questions_correct.context_screen_density,
    questions_correct.context_user_agent,
    questions_correct.context_app_namespace,
    questions_correct.event,
    questions_correct.right_first_time,
    questions_correct."timestamp",
    questions_correct.context_major_minor,
    questions_correct.context_network_carrier,
    questions_correct.context_timezone,
    questions_correct.context_traits_anonymous_id,
    questions_correct.original_timestamp,
    questions_correct.question_count,
    questions_correct.anonymous_id,
    questions_correct.context_app_name,
    questions_correct.context_device_id,
    questions_correct.context_device_type,
    questions_correct.context_library_version,
    questions_correct.context_os_name,
    questions_correct.context_traits_user_id,
    questions_correct.user_id,
    questions_correct.location_uid
   FROM bloomreader.questions_correct
UNION ALL
 SELECT questions_correct.id,
    questions_correct.received_at,
    questions_correct.sent_at,
    questions_correct.title,
    questions_correct.uuid_ts,
    questions_correct.event_text,
    questions_correct.branding_project_name,
    questions_correct.context_device_manufacturer,
    questions_correct.context_device_name,
    questions_correct.context_ip,
    questions_correct.context_locale,
    questions_correct.context_screen_width,
    questions_correct.context_app_build,
    questions_correct.context_network_wifi,
    questions_correct.context_os_version,
    questions_correct.context_app_version,
    questions_correct.context_library_name,
    questions_correct.context_network_cellular,
    questions_correct.context_screen_height,
    questions_correct.percent_right,
    questions_correct.context_device_model,
    questions_correct.context_network_bluetooth,
    questions_correct.context_screen_density,
    questions_correct.context_user_agent,
    questions_correct.context_app_namespace,
    questions_correct.event,
    questions_correct.right_first_time,
    questions_correct."timestamp",
    questions_correct.context_major_minor,
    questions_correct.context_network_carrier,
    questions_correct.context_timezone,
    questions_correct.context_traits_anonymous_id,
    questions_correct.original_timestamp,
    questions_correct.question_count,
    questions_correct.anonymous_id,
    questions_correct.context_app_name,
    questions_correct.context_device_id,
    questions_correct.context_device_type,
    questions_correct.context_library_version,
    questions_correct.context_os_name,
    questions_correct.context_traits_user_id,
    questions_correct.user_id,
    questions_correct.location_uid
   FROM bloomreaderbeta.questions_correct;


ALTER TABLE bloomreader.unionquestionsgt OWNER TO silpgadmin;

--
-- TOC entry 473 (class 1259 OID 832173)
-- Name: booksgt; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.booksgt AS
 SELECT a."timestamp" AS booktimestamp,
    a.title AS booktitle,
        CASE
            WHEN (a.last_numbered_page_read = true) THEN 1
            ELSE 0
        END AS finished,
    a.branding_project_name AS branding,
    c.clname AS booklanguage,
        CASE
            WHEN (EXISTS ( SELECT 'x'
               FROM bloomreader.unionquestionsgt q
              WHERE (lower(q.title) = lower(a.title)))) THEN
            CASE
                WHEN (a.audio_pages > 0) THEN 'Audio, Quiz'::text
                WHEN (a.audio_pages = 0) THEN 'Quiz'::text
                ELSE NULL::text
            END
            ELSE
            CASE
                WHEN (a.audio_pages > 0) THEN 'Audio'::text
                ELSE NULL::text
            END
        END AS media,
    ( SELECT c_1.country_name
           FROM public.countryregioncitylu c_1
          WHERE (a.location_uid = c_1.loc_uid)) AS country
   FROM (( SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreader.pages_read
        UNION ALL
         SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreaderbeta.pages_read) a
     JOIN public.languagecodes c ON (((a.content_lang = (c.langid)::text) OR (a.content_lang = (c.langid2)::text))))
  WHERE (a.branding_project_name = 'Juarez-Guatemala'::text)
  ORDER BY a.title;


ALTER TABLE bloomreader.booksgt OWNER TO silpgadmin;

--
-- TOC entry 530 (class 1259 OID 1560450)
-- Name: comprehension; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.comprehension (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    creator text,
    branding_project_name text,
    context_app_version text,
    context_device_id text,
    context_ip text,
    context_library_version text,
    context_network_bluetooth boolean,
    context_timezone text,
    context_app_build text,
    context_app_namespace text,
    context_locale text,
    context_screen_width bigint,
    "timestamp" timestamp with time zone,
    original_copyright_holder text,
    anonymous_id text,
    context_device_model text,
    context_network_wifi boolean,
    context_os_version text,
    copyright_holder text,
    event_text text,
    context_network_cellular boolean,
    context_screen_density bigint,
    context_screen_height bigint,
    total_numbered_pages bigint,
    uuid_ts timestamp with time zone,
    context_app_name text,
    context_device_manufacturer text,
    context_library_name text,
    context_os_name text,
    context_traits_anonymous_id text,
    sent_at timestamp with time zone,
    actual_points bigint,
    context_device_type text,
    event text,
    original_timestamp timestamp with time zone,
    title text,
    content_lang text,
    context_device_name text,
    context_major_minor text,
    context_user_agent text,
    percent_right bigint,
    possible_points bigint,
    question_count bigint,
    session_id text,
    context_network_carrier text,
    features text,
    original_publisher text,
    original_title text,
    book_instance_id text,
    publisher text,
    location_uid bigint
);


ALTER TABLE bloomreader.comprehension OWNER TO segment;

--
-- TOC entry 468 (class 1259 OID 813533)
-- Name: unionquestions; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.unionquestions AS
 SELECT questions_correct.id,
    questions_correct.received_at,
    questions_correct.sent_at,
    questions_correct.title,
    questions_correct.uuid_ts,
    questions_correct.event_text,
    questions_correct.branding_project_name,
    questions_correct.context_device_manufacturer,
    questions_correct.context_device_name,
    questions_correct.context_ip,
    questions_correct.context_locale,
    questions_correct.context_screen_width,
    questions_correct.context_app_build,
    questions_correct.context_network_wifi,
    questions_correct.context_os_version,
    questions_correct.context_app_version,
    questions_correct.context_library_name,
    questions_correct.context_network_cellular,
    questions_correct.context_screen_height,
    questions_correct.percent_right,
    questions_correct.context_device_model,
    questions_correct.context_network_bluetooth,
    questions_correct.context_screen_density,
    questions_correct.context_user_agent,
    questions_correct.context_app_namespace,
    questions_correct.event,
    questions_correct.right_first_time,
    questions_correct."timestamp",
    questions_correct.context_major_minor,
    questions_correct.context_network_carrier,
    questions_correct.context_timezone,
    questions_correct.context_traits_anonymous_id,
    questions_correct.original_timestamp,
    questions_correct.question_count,
    questions_correct.anonymous_id,
    questions_correct.context_app_name,
    questions_correct.context_device_id,
    questions_correct.context_device_type,
    questions_correct.context_library_version,
    questions_correct.context_os_name,
    questions_correct.context_traits_user_id,
    questions_correct.user_id,
    questions_correct.location_uid
   FROM bloomreader.questions_correct
UNION ALL
 SELECT questions_correct.id,
    questions_correct.received_at,
    questions_correct.sent_at,
    questions_correct.title,
    questions_correct.uuid_ts,
    questions_correct.event_text,
    questions_correct.branding_project_name,
    questions_correct.context_device_manufacturer,
    questions_correct.context_device_name,
    questions_correct.context_ip,
    questions_correct.context_locale,
    questions_correct.context_screen_width,
    questions_correct.context_app_build,
    questions_correct.context_network_wifi,
    questions_correct.context_os_version,
    questions_correct.context_app_version,
    questions_correct.context_library_name,
    questions_correct.context_network_cellular,
    questions_correct.context_screen_height,
    questions_correct.percent_right,
    questions_correct.context_device_model,
    questions_correct.context_network_bluetooth,
    questions_correct.context_screen_density,
    questions_correct.context_user_agent,
    questions_correct.context_app_namespace,
    questions_correct.event,
    questions_correct.right_first_time,
    questions_correct."timestamp",
    questions_correct.context_major_minor,
    questions_correct.context_network_carrier,
    questions_correct.context_timezone,
    questions_correct.context_traits_anonymous_id,
    questions_correct.original_timestamp,
    questions_correct.question_count,
    questions_correct.anonymous_id,
    questions_correct.context_app_name,
    questions_correct.context_device_id,
    questions_correct.context_device_type,
    questions_correct.context_library_version,
    questions_correct.context_os_name,
    questions_correct.context_traits_user_id,
    questions_correct.user_id,
    questions_correct.location_uid
   FROM bloomreaderbeta.questions_correct;


ALTER TABLE bloomreader.unionquestions OWNER TO silpgadmin;

--
-- TOC entry 479 (class 1259 OID 854762)
-- Name: comprehensionanycountry; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.comprehensionanycountry AS
 SELECT DISTINCT a.title AS title_tested,
    count(a.title) AS tests_taken,
    a."timestamp",
    a.percent_right,
    a.right_first_time AS number_right_1st_time,
    a.question_count AS number_of_questions,
    a.branding_project_name AS branding,
    x.country,
    x.title,
    x.median_percent_right
   FROM (( SELECT y.country,
            y.title,
            round(avg(y.percent_right), 0) AS median_percent_right
           FROM ( SELECT b.country_name AS country,
                    z.title,
                    z.percent_right,
                    count(z.title) AS count,
                    row_number() OVER (ORDER BY z.title, (count(z.title) * z.percent_right)) AS rows_ascending,
                    row_number() OVER (ORDER BY z.title, (count(z.title) * z.percent_right) DESC) AS rows_descending
                   FROM (( SELECT questions_correct.id,
                            questions_correct.received_at,
                            questions_correct.sent_at,
                            questions_correct.title,
                            questions_correct.uuid_ts,
                            questions_correct.event_text,
                            questions_correct.branding_project_name,
                            questions_correct.context_device_manufacturer,
                            questions_correct.context_device_name,
                            questions_correct.context_ip,
                            questions_correct.context_locale,
                            questions_correct.context_screen_width,
                            questions_correct.context_app_build,
                            questions_correct.context_network_wifi,
                            questions_correct.context_os_version,
                            questions_correct.context_app_version,
                            questions_correct.context_library_name,
                            questions_correct.context_network_cellular,
                            questions_correct.context_screen_height,
                            questions_correct.percent_right,
                            questions_correct.context_device_model,
                            questions_correct.context_network_bluetooth,
                            questions_correct.context_screen_density,
                            questions_correct.context_user_agent,
                            questions_correct.context_app_namespace,
                            questions_correct.event,
                            questions_correct.right_first_time,
                            questions_correct."timestamp",
                            questions_correct.context_major_minor,
                            questions_correct.context_network_carrier,
                            questions_correct.context_timezone,
                            questions_correct.context_traits_anonymous_id,
                            questions_correct.original_timestamp,
                            questions_correct.question_count,
                            questions_correct.anonymous_id,
                            questions_correct.context_app_name,
                            questions_correct.context_device_id,
                            questions_correct.context_device_type,
                            questions_correct.context_library_version,
                            questions_correct.context_os_name,
                            questions_correct.context_traits_user_id,
                            questions_correct.user_id,
                            questions_correct.location_uid
                           FROM bloomreader.questions_correct
                        UNION ALL
                         SELECT questions_correct.id,
                            questions_correct.received_at,
                            questions_correct.sent_at,
                            questions_correct.title,
                            questions_correct.uuid_ts,
                            questions_correct.event_text,
                            questions_correct.branding_project_name,
                            questions_correct.context_device_manufacturer,
                            questions_correct.context_device_name,
                            questions_correct.context_ip,
                            questions_correct.context_locale,
                            questions_correct.context_screen_width,
                            questions_correct.context_app_build,
                            questions_correct.context_network_wifi,
                            questions_correct.context_os_version,
                            questions_correct.context_app_version,
                            questions_correct.context_library_name,
                            questions_correct.context_network_cellular,
                            questions_correct.context_screen_height,
                            questions_correct.percent_right,
                            questions_correct.context_device_model,
                            questions_correct.context_network_bluetooth,
                            questions_correct.context_screen_density,
                            questions_correct.context_user_agent,
                            questions_correct.context_app_namespace,
                            questions_correct.event,
                            questions_correct.right_first_time,
                            questions_correct."timestamp",
                            questions_correct.context_major_minor,
                            questions_correct.context_network_carrier,
                            questions_correct.context_timezone,
                            questions_correct.context_traits_anonymous_id,
                            questions_correct.original_timestamp,
                            questions_correct.question_count,
                            questions_correct.anonymous_id,
                            questions_correct.context_app_name,
                            questions_correct.context_device_id,
                            questions_correct.context_device_type,
                            questions_correct.context_library_version,
                            questions_correct.context_os_name,
                            questions_correct.context_traits_user_id,
                            questions_correct.user_id,
                            questions_correct.location_uid
                           FROM bloomreaderbeta.questions_correct) z
                     JOIN ( SELECT DISTINCT c.country_name,
                            c.loc_uid
                           FROM public.countryregioncitylu c) b ON ((z.location_uid = b.loc_uid)))
                  GROUP BY b.country_name, z.title, z.percent_right) y
          WHERE ((y.rows_ascending >= (y.rows_descending - 1)) AND (y.rows_ascending <= (y.rows_descending + 1)))
          GROUP BY y.country, y.title) x
     JOIN bloomreader.unionquestions a ON ((a.title = x.title)))
  GROUP BY x.country, a.title, x.title, x.median_percent_right, a.question_count, a.right_first_time, a.percent_right, a.branding_project_name, a."timestamp"
  ORDER BY a.title;


ALTER TABLE bloomreader.comprehensionanycountry OWNER TO silpgadmin;

--
-- TOC entry 474 (class 1259 OID 845523)
-- Name: comprehensiongt; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.comprehensiongt AS
 SELECT DISTINCT a.title AS title_tested,
    count(a.title) AS tests_taken,
    a."timestamp",
    a.percent_right,
    a.right_first_time AS number_right_1st_time,
    a.question_count AS number_of_questions,
    a.branding_project_name AS branding,
    b.country_name AS country,
    x.title,
    x.median_percent_right
   FROM ((( SELECT y.title,
            round(avg(y.percent_right), 0) AS median_percent_right
           FROM ( SELECT z.title,
                    z.percent_right,
                    count(z.title) AS count,
                    row_number() OVER (ORDER BY z.title, (count(z.title) * z.percent_right)) AS rows_ascending,
                    row_number() OVER (ORDER BY z.title, (count(z.title) * z.percent_right) DESC) AS rows_descending
                   FROM bloomreader.unionquestionsgt z
                  GROUP BY z.title, z.percent_right) y
          WHERE ((y.rows_ascending >= (y.rows_descending - 1)) AND (y.rows_ascending <= (y.rows_descending + 1)))
          GROUP BY y.title) x
     JOIN bloomreader.unionquestionsgt a ON ((a.title = x.title)))
     JOIN public.ip2loc_sm_tab b ON ((public.ip2int((a.context_ip)::character varying) = b.context_ip)))
  WHERE (a.branding_project_name ~~ '%Guatemala%'::text)
  GROUP BY a.title, x.title, x.median_percent_right, a.question_count, a.right_first_time, a.percent_right, b.country_name, a.branding_project_name, a."timestamp"
  ORDER BY a.title;


ALTER TABLE bloomreader.comprehensiongt OWNER TO silpgadmin;

--
-- TOC entry 483 (class 1259 OID 910842)
-- Name: comprehensionpng; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.comprehensionpng AS
 SELECT DISTINCT a.title AS title_tested,
    count(a.title) AS tests_taken,
    a."timestamp",
    a.percent_right,
    a.right_first_time AS number_right_1st_time,
    a.question_count AS number_of_questions,
    a.branding_project_name AS branding,
    b.country_name AS country,
    x.title,
    x.median_percent_right
   FROM ((( SELECT y.title,
            round(avg(y.percent_right), 0) AS median_percent_right
           FROM ( SELECT z.title,
                    z.percent_right,
                    count(z.title) AS count,
                    row_number() OVER (ORDER BY z.title, (count(z.title) * z.percent_right)) AS rows_ascending,
                    row_number() OVER (ORDER BY z.title, (count(z.title) * z.percent_right) DESC) AS rows_descending
                   FROM ( SELECT questions_correct.id,
                            questions_correct.received_at,
                            questions_correct.sent_at,
                            questions_correct.title,
                            questions_correct.uuid_ts,
                            questions_correct.event_text,
                            questions_correct.branding_project_name,
                            questions_correct.context_device_manufacturer,
                            questions_correct.context_device_name,
                            questions_correct.context_ip,
                            questions_correct.context_locale,
                            questions_correct.context_screen_width,
                            questions_correct.context_app_build,
                            questions_correct.context_network_wifi,
                            questions_correct.context_os_version,
                            questions_correct.context_app_version,
                            questions_correct.context_library_name,
                            questions_correct.context_network_cellular,
                            questions_correct.context_screen_height,
                            questions_correct.percent_right,
                            questions_correct.context_device_model,
                            questions_correct.context_network_bluetooth,
                            questions_correct.context_screen_density,
                            questions_correct.context_user_agent,
                            questions_correct.context_app_namespace,
                            questions_correct.event,
                            questions_correct.right_first_time,
                            questions_correct."timestamp",
                            questions_correct.context_major_minor,
                            questions_correct.context_network_carrier,
                            questions_correct.context_timezone,
                            questions_correct.context_traits_anonymous_id,
                            questions_correct.original_timestamp,
                            questions_correct.question_count,
                            questions_correct.anonymous_id,
                            questions_correct.context_app_name,
                            questions_correct.context_device_id,
                            questions_correct.context_device_type,
                            questions_correct.context_library_version,
                            questions_correct.context_os_name,
                            questions_correct.context_traits_user_id,
                            questions_correct.user_id,
                            questions_correct.location_uid
                           FROM bloomreader.questions_correct
                        UNION ALL
                         SELECT questions_correct.id,
                            questions_correct.received_at,
                            questions_correct.sent_at,
                            questions_correct.title,
                            questions_correct.uuid_ts,
                            questions_correct.event_text,
                            questions_correct.branding_project_name,
                            questions_correct.context_device_manufacturer,
                            questions_correct.context_device_name,
                            questions_correct.context_ip,
                            questions_correct.context_locale,
                            questions_correct.context_screen_width,
                            questions_correct.context_app_build,
                            questions_correct.context_network_wifi,
                            questions_correct.context_os_version,
                            questions_correct.context_app_version,
                            questions_correct.context_library_name,
                            questions_correct.context_network_cellular,
                            questions_correct.context_screen_height,
                            questions_correct.percent_right,
                            questions_correct.context_device_model,
                            questions_correct.context_network_bluetooth,
                            questions_correct.context_screen_density,
                            questions_correct.context_user_agent,
                            questions_correct.context_app_namespace,
                            questions_correct.event,
                            questions_correct.right_first_time,
                            questions_correct."timestamp",
                            questions_correct.context_major_minor,
                            questions_correct.context_network_carrier,
                            questions_correct.context_timezone,
                            questions_correct.context_traits_anonymous_id,
                            questions_correct.original_timestamp,
                            questions_correct.question_count,
                            questions_correct.anonymous_id,
                            questions_correct.context_app_name,
                            questions_correct.context_device_id,
                            questions_correct.context_device_type,
                            questions_correct.context_library_version,
                            questions_correct.context_os_name,
                            questions_correct.context_traits_user_id,
                            questions_correct.user_id,
                            questions_correct.location_uid
                           FROM bloomreaderbeta.questions_correct) z
                  GROUP BY z.title, z.percent_right) y
          WHERE ((y.rows_ascending >= (y.rows_descending - 1)) AND (y.rows_ascending <= (y.rows_descending + 1)))
          GROUP BY y.title) x
     JOIN ( SELECT questions_correct.id,
            questions_correct.received_at,
            questions_correct.sent_at,
            questions_correct.title,
            questions_correct.uuid_ts,
            questions_correct.event_text,
            questions_correct.branding_project_name,
            questions_correct.context_device_manufacturer,
            questions_correct.context_device_name,
            questions_correct.context_ip,
            questions_correct.context_locale,
            questions_correct.context_screen_width,
            questions_correct.context_app_build,
            questions_correct.context_network_wifi,
            questions_correct.context_os_version,
            questions_correct.context_app_version,
            questions_correct.context_library_name,
            questions_correct.context_network_cellular,
            questions_correct.context_screen_height,
            questions_correct.percent_right,
            questions_correct.context_device_model,
            questions_correct.context_network_bluetooth,
            questions_correct.context_screen_density,
            questions_correct.context_user_agent,
            questions_correct.context_app_namespace,
            questions_correct.event,
            questions_correct.right_first_time,
            questions_correct."timestamp",
            questions_correct.context_major_minor,
            questions_correct.context_network_carrier,
            questions_correct.context_timezone,
            questions_correct.context_traits_anonymous_id,
            questions_correct.original_timestamp,
            questions_correct.question_count,
            questions_correct.anonymous_id,
            questions_correct.context_app_name,
            questions_correct.context_device_id,
            questions_correct.context_device_type,
            questions_correct.context_library_version,
            questions_correct.context_os_name,
            questions_correct.context_traits_user_id,
            questions_correct.user_id,
            questions_correct.location_uid
           FROM bloomreader.questions_correct
        UNION ALL
         SELECT questions_correct.id,
            questions_correct.received_at,
            questions_correct.sent_at,
            questions_correct.title,
            questions_correct.uuid_ts,
            questions_correct.event_text,
            questions_correct.branding_project_name,
            questions_correct.context_device_manufacturer,
            questions_correct.context_device_name,
            questions_correct.context_ip,
            questions_correct.context_locale,
            questions_correct.context_screen_width,
            questions_correct.context_app_build,
            questions_correct.context_network_wifi,
            questions_correct.context_os_version,
            questions_correct.context_app_version,
            questions_correct.context_library_name,
            questions_correct.context_network_cellular,
            questions_correct.context_screen_height,
            questions_correct.percent_right,
            questions_correct.context_device_model,
            questions_correct.context_network_bluetooth,
            questions_correct.context_screen_density,
            questions_correct.context_user_agent,
            questions_correct.context_app_namespace,
            questions_correct.event,
            questions_correct.right_first_time,
            questions_correct."timestamp",
            questions_correct.context_major_minor,
            questions_correct.context_network_carrier,
            questions_correct.context_timezone,
            questions_correct.context_traits_anonymous_id,
            questions_correct.original_timestamp,
            questions_correct.question_count,
            questions_correct.anonymous_id,
            questions_correct.context_app_name,
            questions_correct.context_device_id,
            questions_correct.context_device_type,
            questions_correct.context_library_version,
            questions_correct.context_os_name,
            questions_correct.context_traits_user_id,
            questions_correct.user_id,
            questions_correct.location_uid
           FROM bloomreaderbeta.questions_correct) a ON ((a.title = x.title)))
     JOIN public.ip2loc_sm_tab b ON ((public.ip2ipv4((a.context_ip)::character varying) = b.context_ip)))
  GROUP BY a.title, x.title, x.median_percent_right, a.question_count, a.right_first_time, a.percent_right, b.country_name, a.branding_project_name, a."timestamp"
  ORDER BY a.title;


ALTER TABLE bloomreader.comprehensionpng OWNER TO silpgadmin;

--
-- TOC entry 372 (class 1259 OID 169847)
-- Name: book_or_shelf_opened; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.book_or_shelf_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    original_timestamp timestamp with time zone,
    question_count bigint,
    title text,
    context_app_name text,
    context_device_name text,
    context_ip text,
    context_network_wifi boolean,
    context_screen_width bigint,
    "timestamp" timestamp with time zone,
    context_app_build bigint,
    context_device_model text,
    context_library_version text,
    sent_at timestamp with time zone,
    branding_project_name text,
    context_traits_anonymous_id text,
    context_user_agent text,
    total_numbered_pages bigint,
    context_device_id text,
    context_device_manufacturer text,
    context_major_minor text,
    context_network_carrier text,
    context_network_cellular boolean,
    context_os_version text,
    event_text text,
    context_app_version text,
    context_network_bluetooth boolean,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_locale text,
    context_os_name text,
    context_screen_density bigint,
    context_screen_height bigint,
    context_device_type text,
    context_app_namespace text,
    context_library_name text,
    context_timezone text,
    event text,
    content_lang text,
    context_traits_user_id text,
    user_id text,
    location_uid bigint,
    features text,
    session_id text,
    original_copyright_holder text,
    copyright_holder text,
    creator text,
    original_title text,
    publisher text,
    book_instance_id text,
    original_publisher text
);


ALTER TABLE bloomreaderbeta.book_or_shelf_opened OWNER TO segment;

--
-- TOC entry 326 (class 1259 OID 43386)
-- Name: ip2location; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.ip2location (
    ip_from bigint NOT NULL,
    ip_to bigint NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL
);


ALTER TABLE public.ip2location OWNER TO segment;

--
-- TOC entry 484 (class 1259 OID 910847)
-- Name: contentlanguagespng; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.contentlanguagespng AS
 SELECT DISTINCT a.content_lang AS language_count
   FROM ( SELECT DISTINCT book_or_shelf_opened.content_lang,
            book_or_shelf_opened.context_ip
           FROM bloomreader.book_or_shelf_opened
        UNION
         SELECT DISTINCT book_or_shelf_opened.content_lang,
            book_or_shelf_opened.context_ip
           FROM bloomreaderbeta.book_or_shelf_opened) a
  WHERE (EXISTS ( SELECT 1
           FROM public.ip2location b
          WHERE (((public.ip2int((a.context_ip)::character varying) >= b.ip_from) AND (public.ip2int((a.context_ip)::character varying) <= b.ip_to)) AND ((b.country_name)::text = 'Papua New Guinea'::text))));


ALTER TABLE bloomreader.contentlanguagespng OWNER TO silpgadmin;

--
-- TOC entry 494 (class 1259 OID 919408)
-- Name: countries_for_devices; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.countries_for_devices AS
 SELECT a.id,
    a."timestamp",
    ( SELECT d.country_name
           FROM public.countryregioncitylu d
          WHERE (a.location_uid = d.loc_uid)) AS country
   FROM bloomreader.application_installed a;


ALTER TABLE bloomreader.countries_for_devices OWNER TO silpgadmin;

--
-- TOC entry 383 (class 1259 OID 233199)
-- Name: groups; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.groups (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_user_agent text,
    group_id text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreader.groups OWNER TO segment;

--
-- TOC entry 387 (class 1259 OID 338805)
-- Name: identifies; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.identifies (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_user_agent text,
    sent_at timestamp with time zone,
    context_device_model text,
    context_network_wifi boolean,
    context_os_version text,
    context_screen_width bigint,
    context_traits_user_id text,
    context_major_minor text,
    context_network_bluetooth boolean,
    context_app_version text,
    context_ip text,
    context_network_cellular boolean,
    context_screen_height bigint,
    context_timezone text,
    context_device_type text,
    context_library_version text,
    context_os_name text,
    "timestamp" timestamp with time zone,
    user_id text,
    anonymous_id text,
    context_locale text,
    context_app_build bigint,
    uuid_ts timestamp with time zone,
    context_device_name text,
    context_traits_anonymous_id text,
    context_app_namespace text,
    context_device_manufacturer text,
    context_library_name text,
    context_screen_density numeric,
    original_timestamp timestamp with time zone,
    context_app_name text,
    context_device_id text,
    context_network_carrier text
);


ALTER TABLE bloomreader.identifies OWNER TO segment;

--
-- TOC entry 515 (class 1259 OID 1044499)
-- Name: install_attributed; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.install_attributed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    event_text text,
    context_major_minor text,
    context_locale text,
    context_network_wifi boolean,
    context_screen_width bigint,
    context_library_version text,
    context_app_version text,
    context_device_id text,
    context_library_name text,
    context_network_bluetooth boolean,
    context_timezone text,
    context_app_name text,
    context_os_name text,
    context_os_version text,
    context_traits_anonymous_id text,
    original_timestamp timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_ip text,
    context_app_namespace text,
    context_device_model text,
    context_screen_density numeric,
    installer text,
    context_app_build text,
    context_network_cellular boolean,
    sent_at timestamp with time zone,
    context_device_type text,
    context_user_agent text,
    event text,
    context_screen_height bigint,
    context_device_manufacturer text,
    context_device_name text,
    context_network_carrier text,
    provider text,
    "timestamp" timestamp with time zone,
    anonymous_id text
);


ALTER TABLE bloomreader.install_attributed OWNER TO segment;

--
-- TOC entry 493 (class 1259 OID 919401)
-- Name: languages_for_books; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.languages_for_books AS
 SELECT DISTINCT a.content_lang AS lang
   FROM ( SELECT DISTINCT book_or_shelf_opened.content_lang
           FROM bloomreader.book_or_shelf_opened
        UNION
         SELECT DISTINCT book_or_shelf_opened.content_lang
           FROM bloomreaderbeta.book_or_shelf_opened) a;


ALTER TABLE bloomreader.languages_for_books OWNER TO silpgadmin;

--
-- TOC entry 487 (class 1259 OID 919231)
-- Name: languagesanycountry; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.languagesanycountry AS
 SELECT count(DISTINCT a.booklanguage) AS language_count,
    a.country
   FROM bloomreader.books a
  GROUP BY a.country;


ALTER TABLE bloomreader.languagesanycountry OWNER TO silpgadmin;

--
-- TOC entry 485 (class 1259 OID 910856)
-- Name: numtitles; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.numtitles AS
 SELECT count(*) AS count,
    a.title,
    row_number() OVER (ORDER BY a."timestamp") AS row_number,
    a."timestamp",
    a.country
   FROM ( SELECT count(*) AS count,
            d.title,
            row_number() OVER (ORDER BY d."timestamp") AS row_number,
            d."timestamp",
            ( SELECT i.country_name
                   FROM public.ip2loc_sm_tab i
                  WHERE (public.ip2ipv4((d.context_ip)::character varying) = i.context_ip)
                  GROUP BY i.country_name) AS country,
            rank() OVER (PARTITION BY d.title ORDER BY d."timestamp") AS rank
           FROM ( SELECT pages_read.id,
                    pages_read.received_at,
                    pages_read.uuid_ts,
                    pages_read.anonymous_id,
                    pages_read.context_app_build,
                    pages_read.context_app_name,
                    pages_read.context_app_namespace,
                    pages_read.context_app_version,
                    pages_read.context_device_id,
                    pages_read.context_device_manufacturer,
                    pages_read.context_device_model,
                    pages_read.context_device_name,
                    pages_read.context_device_type,
                    pages_read.context_ip,
                    pages_read.context_library_name,
                    pages_read.context_library_version,
                    pages_read.context_locale,
                    pages_read.context_major_minor,
                    pages_read.context_network_carrier,
                    pages_read.context_os_name,
                    pages_read.context_os_version,
                    pages_read.context_screen_density,
                    pages_read.context_screen_height,
                    pages_read.context_screen_width,
                    pages_read.context_timezone,
                    pages_read.context_traits_anonymous_id,
                    pages_read.context_user_agent,
                    pages_read.event,
                    pages_read.event_text,
                    pages_read.last_page,
                    pages_read.original_timestamp,
                    pages_read.sent_at,
                    pages_read."timestamp",
                    pages_read.title,
                    pages_read.audio_pages,
                    pages_read.non_audio_pages,
                    pages_read.context_traits_user_id,
                    pages_read.user_id,
                    pages_read.branding_project_name,
                    pages_read.context_network_bluetooth,
                    pages_read.context_network_cellular,
                    pages_read.context_network_wifi,
                    pages_read.content_lang,
                    pages_read.last_numbered_page_read,
                    pages_read.total_numbered_pages,
                    pages_read.question_count,
                    pages_read.country_name,
                    pages_read.location_uid
                   FROM bloomreader.pages_read
                UNION ALL
                 SELECT pages_read.id,
                    pages_read.received_at,
                    pages_read.uuid_ts,
                    pages_read.anonymous_id,
                    pages_read.context_app_build,
                    pages_read.context_app_name,
                    pages_read.context_app_namespace,
                    pages_read.context_app_version,
                    pages_read.context_device_id,
                    pages_read.context_device_manufacturer,
                    pages_read.context_device_model,
                    pages_read.context_device_name,
                    pages_read.context_device_type,
                    pages_read.context_ip,
                    pages_read.context_library_name,
                    pages_read.context_library_version,
                    pages_read.context_locale,
                    pages_read.context_major_minor,
                    pages_read.context_network_carrier,
                    pages_read.context_os_name,
                    pages_read.context_os_version,
                    pages_read.context_screen_density,
                    pages_read.context_screen_height,
                    pages_read.context_screen_width,
                    pages_read.context_timezone,
                    pages_read.context_traits_anonymous_id,
                    pages_read.context_user_agent,
                    pages_read.event,
                    pages_read.event_text,
                    pages_read.last_page,
                    pages_read.original_timestamp,
                    pages_read.sent_at,
                    pages_read."timestamp",
                    pages_read.title,
                    pages_read.audio_pages,
                    pages_read.non_audio_pages,
                    pages_read.context_traits_user_id,
                    pages_read.user_id,
                    pages_read.branding_project_name,
                    pages_read.context_network_bluetooth,
                    pages_read.context_network_cellular,
                    pages_read.context_network_wifi,
                    pages_read.content_lang,
                    pages_read.last_numbered_page_read,
                    pages_read.total_numbered_pages,
                    pages_read.question_count,
                    pages_read.country_name,
                    pages_read.location_uid
                   FROM bloomreaderbeta.pages_read) d
          GROUP BY d.title, d."timestamp", d.country_name, d.context_ip) a
  WHERE (a.rank = 1)
  GROUP BY a.title, a."timestamp", a.country;


ALTER TABLE bloomreader.numtitles OWNER TO silpgadmin;

--
-- TOC entry 495 (class 1259 OID 919415)
-- Name: numtitlesall; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.numtitlesall AS
 SELECT DISTINCT ON (d.title) d.title,
    d."timestamp",
    ( SELECT i.country_name
           FROM public.ip2loc_sm_tab i
          WHERE (public.ip2int((d.context_ip)::character varying) = i.context_ip)
          GROUP BY i.country_name) AS country
   FROM ( SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreader.pages_read
        UNION ALL
         SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreaderbeta.pages_read) d;


ALTER TABLE bloomreader.numtitlesall OWNER TO silpgadmin;

--
-- TOC entry 476 (class 1259 OID 845743)
-- Name: phones_anycountry; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.phones_anycountry AS
 SELECT a.context_device_id,
    a."timestamp",
    b.country_name AS country
   FROM (bloomreader.application_installed a
     JOIN ( SELECT DISTINCT d.country_name,
            d.loc_uid
           FROM public.countryregioncitylu d) b ON ((a.location_uid = b.loc_uid)))
  GROUP BY a.context_device_id, a."timestamp", b.country_name
UNION ALL
 SELECT a.context_device_id,
    a."timestamp",
    b.country_name AS country
   FROM (bloomreaderbeta.application_installed a
     JOIN ( SELECT DISTINCT d.country_name,
            d.loc_uid
           FROM public.countryregioncitylu d) b ON ((a.location_uid = b.loc_uid)))
  GROUP BY a.context_device_id, a."timestamp", b.country_name;


ALTER TABLE bloomreader.phones_anycountry OWNER TO silpgadmin;

--
-- TOC entry 465 (class 1259 OID 813432)
-- Name: phonesgt; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.phonesgt AS
 SELECT count(DISTINCT a.context_device_id) AS recuento_de_aparatos,
    a."timestamp"
   FROM ( SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreader.pages_read
        UNION ALL
         SELECT pages_read.id,
            pages_read.received_at,
            pages_read.uuid_ts,
            pages_read.anonymous_id,
            pages_read.context_app_build,
            pages_read.context_app_name,
            pages_read.context_app_namespace,
            pages_read.context_app_version,
            pages_read.context_device_id,
            pages_read.context_device_manufacturer,
            pages_read.context_device_model,
            pages_read.context_device_name,
            pages_read.context_device_type,
            pages_read.context_ip,
            pages_read.context_library_name,
            pages_read.context_library_version,
            pages_read.context_locale,
            pages_read.context_major_minor,
            pages_read.context_network_carrier,
            pages_read.context_os_name,
            pages_read.context_os_version,
            pages_read.context_screen_density,
            pages_read.context_screen_height,
            pages_read.context_screen_width,
            pages_read.context_timezone,
            pages_read.context_traits_anonymous_id,
            pages_read.context_user_agent,
            pages_read.event,
            pages_read.event_text,
            pages_read.last_page,
            pages_read.original_timestamp,
            pages_read.sent_at,
            pages_read."timestamp",
            pages_read.title,
            pages_read.audio_pages,
            pages_read.non_audio_pages,
            pages_read.context_traits_user_id,
            pages_read.user_id,
            pages_read.branding_project_name,
            pages_read.context_network_bluetooth,
            pages_read.context_network_cellular,
            pages_read.context_network_wifi,
            pages_read.content_lang,
            pages_read.last_numbered_page_read,
            pages_read.total_numbered_pages,
            pages_read.question_count,
            pages_read.country_name,
            pages_read.location_uid
           FROM bloomreaderbeta.pages_read) a
  WHERE (a.branding_project_name = 'Juarez-Guatemala'::text)
  GROUP BY a."timestamp";


ALTER TABLE bloomreader.phonesgt OWNER TO silpgadmin;

--
-- TOC entry 457 (class 1259 OID 720209)
-- Name: png_application_installed_view; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.png_application_installed_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.anonymous_id,
    a.build,
    a.context_app_build,
    a.context_app_name,
    a.context_app_namespace,
    a.context_app_version,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_device_model,
    a.context_device_name,
    a.context_device_type,
    a.context_library_name,
    a.context_library_version,
    a.context_locale,
    a.context_os_name,
    a.context_os_version,
    a.context_screen_density,
    a.context_screen_height,
    a.context_screen_width,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.event,
    a.event_text,
    a.original_timestamp,
    a.sent_at,
    a."timestamp",
    a.version,
    a.context_major_minor,
    a.context_network_wifi,
    a.context_network_bluetooth,
    a.context_network_carrier,
    a.context_network_cellular,
    a.context_traits_user_id,
    a.user_id,
    a.location_uid
   FROM bloomreader.application_installed a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreader.png_application_installed_view OWNER TO silpgadmin;

--
-- TOC entry 453 (class 1259 OID 720122)
-- Name: png_application_opened_view; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.png_application_opened_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.anonymous_id,
    a.build,
    a.context_app_build,
    a.context_app_name,
    a.context_app_namespace,
    a.context_app_version,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_device_model,
    a.context_device_name,
    a.context_device_type,
    a.context_library_name,
    a.context_library_version,
    a.context_locale,
    a.context_major_minor,
    a.context_network_carrier,
    a.context_os_name,
    a.context_os_version,
    a.context_screen_density,
    a.context_screen_height,
    a.context_screen_width,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.event,
    a.event_text,
    a.original_timestamp,
    a.sent_at,
    a."timestamp",
    a.version,
    a.context_traits_user_id,
    a.user_id,
    a.context_network_bluetooth,
    a.context_network_cellular,
    a.context_network_wifi,
    a.location_uid
   FROM bloomreader.application_opened a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreader.png_application_opened_view OWNER TO silpgadmin;

--
-- TOC entry 459 (class 1259 OID 751765)
-- Name: png_book_or_shelf_opened_view; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.png_book_or_shelf_opened_view AS
 SELECT a.id,
    a.received_at,
    a.context_screen_density,
    a.sent_at,
    a.title,
    a.uuid_ts,
    a.context_app_namespace,
    a.context_library_version,
    a.context_device_name,
    a.context_device_type,
    a.context_locale,
    a.context_network_wifi,
    a.context_traits_anonymous_id,
    a.event_text,
    a.content_lang,
    a.context_device_model,
    a.context_device_id,
    a.question_count,
    a.context_app_build,
    a.context_app_version,
    a.context_network_bluetooth,
    a.context_os_name,
    a.context_screen_height,
    a.context_timezone,
    a."timestamp",
    a.context_library_name,
    a.context_device_manufacturer,
    a.original_timestamp,
    a.context_user_agent,
    a.event,
    a.anonymous_id,
    a.context_os_version,
    a.context_major_minor,
    a.context_screen_width,
    a.total_numbered_pages,
    a.branding_project_name,
    a.context_app_name,
    a.context_network_carrier,
    a.context_network_cellular,
    a.context_traits_user_id,
    a.user_id,
    a.location_uid
   FROM bloomreader.book_or_shelf_opened a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreader.png_book_or_shelf_opened_view OWNER TO silpgadmin;

--
-- TOC entry 455 (class 1259 OID 720135)
-- Name: png_pages_read_view; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.png_pages_read_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.anonymous_id,
    a.context_app_build,
    a.context_app_name,
    a.context_app_namespace,
    a.context_app_version,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_device_model,
    a.context_device_name,
    a.context_device_type,
    a.context_library_name,
    a.context_library_version,
    a.context_locale,
    a.context_major_minor,
    a.context_network_carrier,
    a.context_os_name,
    a.context_os_version,
    a.context_screen_density,
    a.context_screen_height,
    a.context_screen_width,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.event,
    a.event_text,
    a.last_page,
    a.original_timestamp,
    a.sent_at,
    a."timestamp",
    a.title,
    a.audio_pages,
    a.non_audio_pages,
    a.context_traits_user_id,
    a.user_id,
    a.branding_project_name,
    a.context_network_bluetooth,
    a.context_network_cellular,
    a.context_network_wifi,
    a.content_lang,
    a.last_numbered_page_read,
    a.total_numbered_pages,
    a.question_count,
    a.country_name,
    a.location_uid
   FROM bloomreader.pages_read a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreader.png_pages_read_view OWNER TO silpgadmin;

--
-- TOC entry 461 (class 1259 OID 751825)
-- Name: png_questions_correct_view; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.png_questions_correct_view AS
 SELECT a.id,
    a.received_at,
    a.sent_at,
    a.title,
    a.uuid_ts,
    a.event_text,
    a.branding_project_name,
    a.context_device_manufacturer,
    a.context_device_name,
    a.context_locale,
    a.context_screen_width,
    a.context_app_build,
    a.context_network_wifi,
    a.context_os_version,
    a.context_app_version,
    a.context_library_name,
    a.context_network_cellular,
    a.context_screen_height,
    a.percent_right,
    a.context_device_model,
    a.context_network_bluetooth AS n,
    a.context_screen_density,
    a.context_user_agent,
    a.context_app_namespace,
    a.event,
    a.right_first_time,
    a."timestamp",
    a.context_major_minor,
    a.context_network_carrier,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.original_timestamp,
    a.question_count,
    a.anonymous_id,
    a.context_app_name,
    a.context_device_id,
    a.context_device_type,
    a.context_library_version,
    a.context_os_name,
    a.context_traits_user_id,
    a.user_id,
    a.location_uid
   FROM bloomreader.questions_correct a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreader.png_questions_correct_view OWNER TO silpgadmin;

--
-- TOC entry 352 (class 1259 OID 49750)
-- Name: screens; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.screens (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    name text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_network_cellular boolean,
    context_major_minor text,
    context_network_wifi boolean,
    context_network_bluetooth boolean,
    context_network_carrier text,
    context_traits_user_id text,
    user_id text
);


ALTER TABLE bloomreader.screens OWNER TO segment;

--
-- TOC entry 385 (class 1259 OID 255857)
-- Name: application_opened; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.application_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    location_uid bigint,
    from_background boolean
);


ALTER TABLE bloomreaderbeta.application_opened OWNER TO segment;

--
-- TOC entry 496 (class 1259 OID 919423)
-- Name: timepermon; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.timepermon AS
 SELECT count(*) AS num_opened,
    ((date_part('YEAR'::text, timezone('AEST'::text, a."timestamp")))::text || lpad((date_part('MONTH'::text, timezone('AEST'::text, a."timestamp")))::text, 2, '0'::text)) AS month_used,
    ((a."timestamp")::timestamp without time zone)::date AS "timestamp",
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2int((a.context_ip)::character varying) = d.context_ip)) AS country
   FROM ( SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreader.application_opened
        UNION ALL
         SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreaderbeta.application_opened) a
  WHERE (a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '1 year'::interval))
  GROUP BY a."timestamp", (((a."timestamp")::timestamp without time zone)::date), a.context_ip;


ALTER TABLE bloomreader.timepermon OWNER TO silpgadmin;

--
-- TOC entry 475 (class 1259 OID 845687)
-- Name: timepermon_anycountry; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.timepermon_anycountry AS
 SELECT a.id,
    (timezone('AEST'::text, a."timestamp"))::date AS timedate,
    b.country_name AS country
   FROM (( SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreader.application_opened
        UNION ALL
         SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreaderbeta.application_opened) a
     JOIN ( SELECT DISTINCT d.loc_uid,
            d.country_name
           FROM public.countryregioncitylu d) b ON ((a.location_uid = b.loc_uid)))
  WHERE ((timezone('AEST'::text, a."timestamp"))::date > (date_trunc('month'::text, ((timezone('AEST'::text, (('now'::text)::date)::timestamp with time zone))::date)::timestamp with time zone) - '11 mons'::interval))
  GROUP BY ((timezone('AEST'::text, a."timestamp"))::date), a.id, b.country_name;


ALTER TABLE bloomreader.timepermon_anycountry OWNER TO silpgadmin;

--
-- TOC entry 470 (class 1259 OID 813623)
-- Name: timepermongt; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.timepermongt AS
 SELECT a.id,
    (timezone('AEST'::text, a."timestamp"))::date AS timedate
   FROM (( SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreader.application_opened
        UNION ALL
         SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreaderbeta.application_opened) a
     JOIN ( SELECT x.context_device_id
           FROM bloomreader.pages_read x
          WHERE (x.branding_project_name = 'Juarez-Guatemala'::text)
        UNION
         SELECT y.context_device_id
           FROM bloomreaderbeta.pages_read y
          WHERE (y.branding_project_name = 'Juarez-Guatemala'::text)) f ON ((a.context_device_id = f.context_device_id)))
  WHERE (((timezone('AEST'::text, a."timestamp"))::date > (date_trunc('month'::text, ((timezone('AEST'::text, (('now'::text)::date)::timestamp with time zone))::date)::timestamp with time zone) - '11 mons'::interval)) AND ((timezone('AEST'::text, a."timestamp"))::date > '2019-02-26'::date))
  GROUP BY ((timezone('AEST'::text, a."timestamp"))::date), a.id;


ALTER TABLE bloomreader.timepermongt OWNER TO silpgadmin;

--
-- TOC entry 486 (class 1259 OID 910877)
-- Name: timepermonpng; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.timepermonpng AS
 SELECT a.id,
    (timezone('AEST'::text, a."timestamp"))::date AS timedate
   FROM (( SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreader.application_opened
        UNION ALL
         SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi,
            application_opened.location_uid
           FROM bloomreaderbeta.application_opened) a
     JOIN public.ip2loc_sm_tab b ON ((((b.country_name)::text = 'Papua New Guinea'::text) AND (public.ip2ipv4((a.context_ip)::character varying) = b.context_ip))))
  WHERE (((timezone('AEST'::text, a."timestamp"))::date > ((date_trunc('month'::text, ((timezone('AEST'::text, (('now'::text)::date)::timestamp with time zone))::date)::timestamp with time zone) - '1 day'::interval) - '1 year'::interval)) AND ((timezone('AEST'::text, a."timestamp"))::date < date_trunc('month'::text, ((timezone('AEST'::text, (('now'::text)::date)::timestamp with time zone))::date)::timestamp with time zone)))
  GROUP BY ((timezone('AEST'::text, a."timestamp"))::date), a.id, a.context_ip;


ALTER TABLE bloomreader.timepermonpng OWNER TO silpgadmin;

--
-- TOC entry 478 (class 1259 OID 854748)
-- Name: titlesseen_anycountry; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.titlesseen_anycountry AS
 SELECT count(*) AS count,
    a.title,
    row_number() OVER (ORDER BY a."timestamp") AS row_number,
    a."timestamp",
    a.country
   FROM ( SELECT count(*) AS count,
            d.title,
            row_number() OVER (ORDER BY d."timestamp") AS row_number,
            d."timestamp",
            d.country_name AS country,
            rank() OVER (PARTITION BY d.title ORDER BY d."timestamp") AS rank
           FROM (( SELECT pages_read.id,
                    pages_read.received_at,
                    pages_read.uuid_ts,
                    pages_read.anonymous_id,
                    pages_read.context_app_build,
                    pages_read.context_app_name,
                    pages_read.context_app_namespace,
                    pages_read.context_app_version,
                    pages_read.context_device_id,
                    pages_read.context_device_manufacturer,
                    pages_read.context_device_model,
                    pages_read.context_device_name,
                    pages_read.context_device_type,
                    pages_read.context_ip,
                    pages_read.context_library_name,
                    pages_read.context_library_version,
                    pages_read.context_locale,
                    pages_read.context_major_minor,
                    pages_read.context_network_carrier,
                    pages_read.context_os_name,
                    pages_read.context_os_version,
                    pages_read.context_screen_density,
                    pages_read.context_screen_height,
                    pages_read.context_screen_width,
                    pages_read.context_timezone,
                    pages_read.context_traits_anonymous_id,
                    pages_read.context_user_agent,
                    pages_read.event,
                    pages_read.event_text,
                    pages_read.last_page,
                    pages_read.original_timestamp,
                    pages_read.sent_at,
                    pages_read."timestamp",
                    pages_read.title,
                    pages_read.audio_pages,
                    pages_read.non_audio_pages,
                    pages_read.context_traits_user_id,
                    pages_read.user_id,
                    pages_read.branding_project_name,
                    pages_read.context_network_bluetooth,
                    pages_read.context_network_cellular,
                    pages_read.context_network_wifi,
                    pages_read.content_lang,
                    pages_read.last_numbered_page_read,
                    pages_read.total_numbered_pages,
                    pages_read.question_count,
                    pages_read.country_name,
                    pages_read.location_uid
                   FROM bloomreader.pages_read
                UNION ALL
                 SELECT pages_read.id,
                    pages_read.received_at,
                    pages_read.uuid_ts,
                    pages_read.anonymous_id,
                    pages_read.context_app_build,
                    pages_read.context_app_name,
                    pages_read.context_app_namespace,
                    pages_read.context_app_version,
                    pages_read.context_device_id,
                    pages_read.context_device_manufacturer,
                    pages_read.context_device_model,
                    pages_read.context_device_name,
                    pages_read.context_device_type,
                    pages_read.context_ip,
                    pages_read.context_library_name,
                    pages_read.context_library_version,
                    pages_read.context_locale,
                    pages_read.context_major_minor,
                    pages_read.context_network_carrier,
                    pages_read.context_os_name,
                    pages_read.context_os_version,
                    pages_read.context_screen_density,
                    pages_read.context_screen_height,
                    pages_read.context_screen_width,
                    pages_read.context_timezone,
                    pages_read.context_traits_anonymous_id,
                    pages_read.context_user_agent,
                    pages_read.event,
                    pages_read.event_text,
                    pages_read.last_page,
                    pages_read.original_timestamp,
                    pages_read.sent_at,
                    pages_read."timestamp",
                    pages_read.title,
                    pages_read.audio_pages,
                    pages_read.non_audio_pages,
                    pages_read.context_traits_user_id,
                    pages_read.user_id,
                    pages_read.branding_project_name,
                    pages_read.context_network_bluetooth,
                    pages_read.context_network_cellular,
                    pages_read.context_network_wifi,
                    pages_read.content_lang,
                    pages_read.last_numbered_page_read,
                    pages_read.total_numbered_pages,
                    pages_read.question_count,
                    pages_read.country_name,
                    pages_read.location_uid
                   FROM bloomreaderbeta.pages_read) d
             JOIN ( SELECT DISTINCT c.country_name,
                    c.loc_uid
                   FROM public.countryregioncitylu c) b ON ((d.location_uid = b.loc_uid)))
          GROUP BY d.title, d."timestamp", d.country_name) a
  WHERE (a.rank = 1)
  GROUP BY a.title, a."timestamp", a.country;


ALTER TABLE bloomreader.titlesseen_anycountry OWNER TO silpgadmin;

--
-- TOC entry 350 (class 1259 OID 49668)
-- Name: tracks; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_network_cellular boolean,
    context_network_bluetooth boolean,
    context_network_wifi boolean,
    context_major_minor text,
    context_network_carrier text,
    user_id text,
    context_traits_user_id text
);


ALTER TABLE bloomreader.tracks OWNER TO segment;

--
-- TOC entry 467 (class 1259 OID 813521)
-- Name: unionpages; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.unionpages AS
 SELECT pages_read.id,
    pages_read.received_at,
    pages_read.uuid_ts,
    pages_read.anonymous_id,
    pages_read.context_app_build,
    pages_read.context_app_name,
    pages_read.context_app_namespace,
    pages_read.context_app_version,
    pages_read.context_device_id,
    pages_read.context_device_manufacturer,
    pages_read.context_device_model,
    pages_read.context_device_name,
    pages_read.context_device_type,
    pages_read.context_ip,
    pages_read.context_library_name,
    pages_read.context_library_version,
    pages_read.context_locale,
    pages_read.context_major_minor,
    pages_read.context_network_carrier,
    pages_read.context_os_name,
    pages_read.context_os_version,
    pages_read.context_screen_density,
    pages_read.context_screen_height,
    pages_read.context_screen_width,
    pages_read.context_timezone,
    pages_read.context_traits_anonymous_id,
    pages_read.context_user_agent,
    pages_read.event,
    pages_read.event_text,
    pages_read.last_page,
    pages_read.original_timestamp,
    pages_read.sent_at,
    pages_read."timestamp",
    pages_read.title,
    pages_read.audio_pages,
    pages_read.non_audio_pages,
    pages_read.context_traits_user_id,
    pages_read.user_id,
    pages_read.branding_project_name,
    pages_read.context_network_bluetooth,
    pages_read.context_network_cellular,
    pages_read.context_network_wifi,
    pages_read.content_lang,
    pages_read.last_numbered_page_read,
    pages_read.total_numbered_pages,
    pages_read.question_count,
    pages_read.country_name,
    pages_read.location_uid
   FROM bloomreader.pages_read
UNION ALL
 SELECT pages_read.id,
    pages_read.received_at,
    pages_read.uuid_ts,
    pages_read.anonymous_id,
    pages_read.context_app_build,
    pages_read.context_app_name,
    pages_read.context_app_namespace,
    pages_read.context_app_version,
    pages_read.context_device_id,
    pages_read.context_device_manufacturer,
    pages_read.context_device_model,
    pages_read.context_device_name,
    pages_read.context_device_type,
    pages_read.context_ip,
    pages_read.context_library_name,
    pages_read.context_library_version,
    pages_read.context_locale,
    pages_read.context_major_minor,
    pages_read.context_network_carrier,
    pages_read.context_os_name,
    pages_read.context_os_version,
    pages_read.context_screen_density,
    pages_read.context_screen_height,
    pages_read.context_screen_width,
    pages_read.context_timezone,
    pages_read.context_traits_anonymous_id,
    pages_read.context_user_agent,
    pages_read.event,
    pages_read.event_text,
    pages_read.last_page,
    pages_read.original_timestamp,
    pages_read.sent_at,
    pages_read."timestamp",
    pages_read.title,
    pages_read.audio_pages,
    pages_read.non_audio_pages,
    pages_read.context_traits_user_id,
    pages_read.user_id,
    pages_read.branding_project_name,
    pages_read.context_network_bluetooth,
    pages_read.context_network_cellular,
    pages_read.context_network_wifi,
    pages_read.content_lang,
    pages_read.last_numbered_page_read,
    pages_read.total_numbered_pages,
    pages_read.question_count,
    pages_read.country_name,
    pages_read.location_uid
   FROM bloomreaderbeta.pages_read;


ALTER TABLE bloomreader.unionpages OWNER TO silpgadmin;

--
-- TOC entry 466 (class 1259 OID 813506)
-- Name: phonesgt; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.phonesgt AS
 SELECT count(*) AS recuento_de_aparatos,
    a."timestamp"
   FROM bloomreaderbeta.application_installed a
  WHERE (EXISTS ( SELECT 1
           FROM public.ip2location b
          WHERE (((public.ip2int((a.context_ip)::character varying) >= b.ip_from) AND (public.ip2int((a.context_ip)::character varying) <= b.ip_to)) AND ((b.country_name)::text = 'Guatemala'::text))))
  GROUP BY a."timestamp";


ALTER TABLE bloomreaderbeta.phonesgt OWNER TO silpgadmin;

--
-- TOC entry 471 (class 1259 OID 832164)
-- Name: unionphonesgt; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.unionphonesgt AS
 SELECT phonesgt.recuento_de_aparatos,
    phonesgt."timestamp"
   FROM bloomreader.phonesgt
UNION ALL
 SELECT phonesgt.recuento_de_aparatos,
    phonesgt."timestamp"
   FROM bloomreaderbeta.phonesgt;


ALTER TABLE bloomreader.unionphonesgt OWNER TO silpgadmin;

--
-- TOC entry 469 (class 1259 OID 813544)
-- Name: uniontimes; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.uniontimes AS
 SELECT application_opened.id,
    application_opened.received_at,
    application_opened.uuid_ts,
    application_opened.anonymous_id,
    application_opened.build,
    application_opened.context_app_build,
    application_opened.context_app_name,
    application_opened.context_app_namespace,
    application_opened.context_app_version,
    application_opened.context_device_id,
    application_opened.context_device_manufacturer,
    application_opened.context_device_model,
    application_opened.context_device_name,
    application_opened.context_device_type,
    application_opened.context_ip,
    application_opened.context_library_name,
    application_opened.context_library_version,
    application_opened.context_locale,
    application_opened.context_major_minor,
    application_opened.context_network_carrier,
    application_opened.context_os_name,
    application_opened.context_os_version,
    application_opened.context_screen_density,
    application_opened.context_screen_height,
    application_opened.context_screen_width,
    application_opened.context_timezone,
    application_opened.context_traits_anonymous_id,
    application_opened.context_user_agent,
    application_opened.event,
    application_opened.event_text,
    application_opened.original_timestamp,
    application_opened.sent_at,
    application_opened."timestamp",
    application_opened.version,
    application_opened.context_traits_user_id,
    application_opened.user_id,
    application_opened.context_network_bluetooth,
    application_opened.context_network_cellular,
    application_opened.context_network_wifi,
    application_opened.location_uid
   FROM bloomreader.application_opened
UNION ALL
 SELECT application_opened.id,
    application_opened.received_at,
    application_opened.uuid_ts,
    application_opened.anonymous_id,
    application_opened.build,
    application_opened.context_app_build,
    application_opened.context_app_name,
    application_opened.context_app_namespace,
    application_opened.context_app_version,
    application_opened.context_device_id,
    application_opened.context_device_manufacturer,
    application_opened.context_device_model,
    application_opened.context_device_name,
    application_opened.context_device_type,
    application_opened.context_ip,
    application_opened.context_library_name,
    application_opened.context_library_version,
    application_opened.context_locale,
    application_opened.context_major_minor,
    application_opened.context_network_carrier,
    application_opened.context_os_name,
    application_opened.context_os_version,
    application_opened.context_screen_density,
    application_opened.context_screen_height,
    application_opened.context_screen_width,
    application_opened.context_timezone,
    application_opened.context_traits_anonymous_id,
    application_opened.context_user_agent,
    application_opened.event,
    application_opened.event_text,
    application_opened.original_timestamp,
    application_opened.sent_at,
    application_opened."timestamp",
    application_opened.version,
    application_opened.context_traits_user_id,
    application_opened.user_id,
    application_opened.context_network_bluetooth,
    application_opened.context_network_cellular,
    application_opened.context_network_wifi,
    application_opened.location_uid
   FROM bloomreaderbeta.application_opened;


ALTER TABLE bloomreader.uniontimes OWNER TO silpgadmin;

--
-- TOC entry 388 (class 1259 OID 338911)
-- Name: users; Type: TABLE; Schema: bloomreader; Owner: segment
--

CREATE TABLE bloomreader.users (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_screen_height bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    uuid_ts timestamp with time zone,
    context_network_cellular boolean,
    context_network_wifi boolean,
    context_device_model text,
    context_ip text,
    context_major_minor text,
    context_user_agent text,
    context_app_namespace text,
    context_device_name text,
    context_network_bluetooth boolean,
    context_os_version text,
    context_device_type text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_library_name text,
    context_library_version text,
    context_traits_user_id text,
    context_app_build bigint,
    context_app_name text,
    context_screen_density numeric,
    context_screen_width bigint,
    context_locale text,
    context_os_name text,
    context_network_carrier text
);


ALTER TABLE bloomreader.users OWNER TO segment;

--
-- TOC entry 513 (class 1259 OID 1001709)
-- Name: v_pages_read_raw; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_pages_read_raw AS
 SELECT pages_read."timestamp",
    pages_read.context_timezone,
    pages_read.audio_pages,
    pages_read.non_audio_pages,
    pages_read.anonymous_id,
    pages_read.context_device_id,
    pages_read.context_traits_user_id,
    pages_read.context_major_minor,
    pages_read.title,
    pages_read.total_numbered_pages,
    pages_read.last_numbered_page_read,
    pages_read.branding_project_name,
    pages_read.content_lang,
    pages_read.location_uid,
    'release'::text AS channel,
    COALESCE(pages_read.video_pages, pages_read.video_pages_played) AS video_pages_played,
    pages_read.features,
    pages_read.book_instance_id
   FROM bloomreader.pages_read
UNION ALL
 SELECT pages_read."timestamp",
    pages_read.context_timezone,
    pages_read.audio_pages,
    pages_read.non_audio_pages,
    pages_read.anonymous_id,
    pages_read.context_device_id,
    pages_read.context_traits_user_id,
    pages_read.context_major_minor,
    pages_read.title,
    pages_read.total_numbered_pages,
    pages_read.last_numbered_page_read,
    pages_read.branding_project_name,
    pages_read.content_lang,
    pages_read.location_uid,
    'beta'::text AS channel,
    COALESCE(pages_read.video_pages, pages_read.video_pages_played) AS video_pages_played,
    pages_read.features,
    pages_read.book_instance_id
   FROM bloomreaderbeta.pages_read;


ALTER TABLE bloomreader.v_pages_read_raw OWNER TO silpgadmin;

--
-- TOC entry 506 (class 1259 OID 997350)
-- Name: v_pages_read; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_pages_read AS
 SELECT pr."timestamp" AS time_utc,
    timezone(pr.context_timezone, pr."timestamp") AS time_local,
    (timezone(pr.context_timezone, pr."timestamp"))::date AS date_local,
    pr.context_timezone,
    initcap(to_char(timezone(pr.context_timezone, pr."timestamp"), 'day'::text)) AS time_local_day,
    (date_part('hour'::text, timezone(pr.context_timezone, pr."timestamp")))::integer AS time_local_hour,
    pr.audio_pages AS pages_read_audio,
    pr.non_audio_pages AS pages_read_nonaudio,
    (pr.audio_pages + pr.non_audio_pages) AS pages_read,
    pr.anonymous_id,
    pr.context_device_id AS device_unique_id,
    pr.context_traits_user_id AS device_project_hardware_code,
    pr.context_major_minor AS bloom_reader_version,
    pr.title AS book_title,
        CASE
            WHEN ((pr.title = 'The Moon and the Cap'::text) AND (pr.branding_project_name = 'SIL-International'::text)) THEN 'Sample-Book'::text
            WHEN ((pr.title = 'The Moon and the Cap'::text) AND (pr.branding_project_name = 'Default'::text)) THEN 'Sample-Book'::text
            WHEN ((pr.title = 'The Moon and the Cap'::text) AND (pr.branding_project_name IS NULL)) THEN 'Sample-Book'::text
            ELSE pr.branding_project_name
        END AS book_branding,
    pr.content_lang AS book_language_code,
    'error: language name lookup failed'::character varying(50) AS book_language,
    pr.total_numbered_pages AS book_pages,
    pr.last_numbered_page_read AS finished_reading_book,
    c.country_name AS country,
    c.region,
    c.city,
    pr.channel,
    pr.video_pages_played,
    pr.features,
    pr.book_instance_id
   FROM (bloomreader.v_pages_read_raw pr
     LEFT JOIN public.countryregioncitylu c ON ((pr.location_uid = c.loc_uid)))
  WHERE ((pr."timestamp" >= '2018-01-01 00:00:00+00'::timestamp with time zone) AND (pr."timestamp" < clock_timestamp()));


ALTER TABLE bloomreader.v_pages_read OWNER TO silpgadmin;

--
-- TOC entry 511 (class 1259 OID 998721)
-- Name: v_avg_sessions_per_month_per_user; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_avg_sessions_per_month_per_user AS
 WITH byuser AS (
         SELECT v_pages_read.anonymous_id,
            v_pages_read.book_branding,
            v_pages_read.country,
            date_trunc('month'::text, v_pages_read.time_local) AS month,
            count(*) AS number_sessions
           FROM bloomreader.v_pages_read
          GROUP BY v_pages_read.country, v_pages_read.book_branding, (date_trunc('month'::text, v_pages_read.time_local)), v_pages_read.anonymous_id
        )
 SELECT byuser.book_branding,
    byuser.country,
    byuser.month,
    avg(byuser.number_sessions) AS mean,
    percentile_disc((0.5)::double precision) WITHIN GROUP (ORDER BY byuser.number_sessions) AS median
   FROM byuser
  GROUP BY byuser.country, byuser.book_branding, byuser.month;


ALTER TABLE bloomreader.v_avg_sessions_per_month_per_user OWNER TO silpgadmin;

--
-- TOC entry 512 (class 1259 OID 1001301)
-- Name: v_book_or_shelf_opened_raw; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_book_or_shelf_opened_raw AS
 SELECT book_or_shelf_opened."timestamp",
    book_or_shelf_opened.context_timezone,
    book_or_shelf_opened.anonymous_id,
    book_or_shelf_opened.context_device_id,
    book_or_shelf_opened.context_traits_user_id,
    book_or_shelf_opened.context_major_minor,
    book_or_shelf_opened.title,
    book_or_shelf_opened.question_count,
    book_or_shelf_opened.branding_project_name,
    book_or_shelf_opened.content_lang,
    book_or_shelf_opened.location_uid,
    'release'::text AS channel,
    book_or_shelf_opened.context_device_manufacturer,
    book_or_shelf_opened.context_device_model,
    book_or_shelf_opened.features,
    book_or_shelf_opened.book_instance_id
   FROM bloomreader.book_or_shelf_opened
UNION ALL
 SELECT book_or_shelf_opened."timestamp",
    book_or_shelf_opened.context_timezone,
    book_or_shelf_opened.anonymous_id,
    book_or_shelf_opened.context_device_id,
    book_or_shelf_opened.context_traits_user_id,
    book_or_shelf_opened.context_major_minor,
    book_or_shelf_opened.title,
    book_or_shelf_opened.question_count,
    book_or_shelf_opened.branding_project_name,
    book_or_shelf_opened.content_lang,
    book_or_shelf_opened.location_uid,
    'beta'::text AS channel,
    book_or_shelf_opened.context_device_manufacturer,
    book_or_shelf_opened.context_device_model,
    book_or_shelf_opened.features,
    book_or_shelf_opened.book_instance_id
   FROM bloomreaderbeta.book_or_shelf_opened;


ALTER TABLE bloomreader.v_book_or_shelf_opened_raw OWNER TO silpgadmin;

--
-- TOC entry 507 (class 1259 OID 997361)
-- Name: v_book_or_shelf_opened; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_book_or_shelf_opened AS
 SELECT b."timestamp" AS time_utc,
    b.context_timezone,
    timezone(b.context_timezone, b."timestamp") AS time_local,
    (timezone(b.context_timezone, b."timestamp"))::date AS date_local,
    initcap(to_char(timezone(b.context_timezone, b."timestamp"), 'day'::text)) AS time_local_day,
    (date_part('hour'::text, timezone(b.context_timezone, b."timestamp")))::integer AS time_local_hour,
    b.anonymous_id,
    b.context_device_id AS device_unique_id,
    b.context_traits_user_id AS device_project_hardware_code,
    b.context_major_minor AS bloom_reader_version,
    b.title AS book_title,
        CASE
            WHEN ((b.title = 'The Moon and the Cap'::text) AND (b.branding_project_name = 'SIL-International'::text)) THEN 'Sample-Book'::text
            WHEN ((b.title = 'The Moon and the Cap'::text) AND (b.branding_project_name = 'Default'::text)) THEN 'Sample-Book'::text
            WHEN ((b.title = 'The Moon and the Cap'::text) AND (b.branding_project_name IS NULL)) THEN 'Sample-Book'::text
            ELSE b.branding_project_name
        END AS book_branding,
    b.content_lang AS book_language_code,
    b.question_count,
    'error: language name lookup failed'::character varying(50) AS book_language,
    c.country_name AS country,
    c.region,
    c.city,
    b.channel,
    b.context_device_manufacturer AS device_manufacturer,
    b.context_device_model AS device_model,
    b.features,
    b.book_instance_id
   FROM (bloomreader.v_book_or_shelf_opened_raw b
     LEFT JOIN public.countryregioncitylu c ON ((b.location_uid = c.loc_uid)))
  WHERE ((b."timestamp" >= '2018-01-01 00:00:00+00'::timestamp with time zone) AND (b."timestamp" < clock_timestamp()));


ALTER TABLE bloomreader.v_book_or_shelf_opened OWNER TO silpgadmin;

--
-- TOC entry 508 (class 1259 OID 997835)
-- Name: v_books_finished; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_books_finished AS
 SELECT v_pages_read.book_title,
    count(*) AS opened,
    sum((v_pages_read.finished_reading_book)::integer) AS finished,
    ((sum((v_pages_read.finished_reading_book)::integer))::double precision / (count(*))::double precision) AS percentage_finished,
    v_pages_read.book_branding,
    v_pages_read.country
   FROM bloomreader.v_pages_read
  GROUP BY v_pages_read.book_title, v_pages_read.book_branding, v_pages_read.country;


ALTER TABLE bloomreader.v_books_finished OWNER TO silpgadmin;

--
-- TOC entry 525 (class 1259 OID 1476107)
-- Name: v_books_finished_by_user; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_books_finished_by_user AS
 SELECT v_pages_read.anonymous_id,
    count(*) AS num_books_finished,
    count(DISTINCT v_pages_read.book_title) AS num_distinct_books_finished,
    v_pages_read.book_branding,
    v_pages_read.country
   FROM bloomreader.v_pages_read
  WHERE (v_pages_read.finished_reading_book = true)
  GROUP BY v_pages_read.anonymous_id, v_pages_read.book_branding, v_pages_read.country;


ALTER TABLE bloomreader.v_books_finished_by_user OWNER TO silpgadmin;

--
-- TOC entry 529 (class 1259 OID 1511613)
-- Name: comprehension; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.comprehension (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_traits_anonymous_id text,
    copyright_holder text,
    uuid_ts timestamp with time zone,
    context_device_id text,
    context_device_model text,
    context_device_type text,
    context_network_wifi boolean,
    context_timezone text,
    content_lang text,
    context_app_version text,
    context_library_name text,
    question_count bigint,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    context_device_name text,
    context_user_agent text,
    event text,
    context_screen_density bigint,
    features text,
    original_copyright_holder text,
    possible_points bigint,
    context_app_build text,
    context_app_namespace text,
    context_library_version text,
    context_locale text,
    context_os_name text,
    actual_points bigint,
    branding_project_name text,
    context_app_name text,
    session_id text,
    context_os_version text,
    event_text text,
    original_timestamp timestamp with time zone,
    percent_right bigint,
    context_major_minor text,
    context_screen_height bigint,
    creator text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_screen_width bigint,
    total_numbered_pages bigint,
    anonymous_id text,
    context_device_manufacturer text,
    context_ip text,
    context_network_carrier text,
    book_instance_id text,
    publisher text,
    original_publisher text,
    original_title text,
    location_uid bigint
);


ALTER TABLE bloomreaderbeta.comprehension OWNER TO segment;

--
-- TOC entry 546 (class 1259 OID 1890752)
-- Name: v_comprehension_raw; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_comprehension_raw AS
 SELECT 'release'::text AS channel,
    questions_correct."timestamp",
    questions_correct.context_timezone,
    questions_correct.anonymous_id,
    questions_correct.context_device_id,
    questions_correct.context_major_minor,
    questions_correct.title,
    questions_correct.branding_project_name,
    questions_correct.location_uid,
    questions_correct.question_count,
    questions_correct.percent_right,
    questions_correct.book_instance_id
   FROM bloomreader.questions_correct
UNION ALL
 SELECT 'beta'::text AS channel,
    questions_correct."timestamp",
    questions_correct.context_timezone,
    questions_correct.anonymous_id,
    questions_correct.context_device_id,
    questions_correct.context_major_minor,
    questions_correct.title,
    questions_correct.branding_project_name,
    questions_correct.location_uid,
    questions_correct.question_count,
    questions_correct.percent_right,
    questions_correct.book_instance_id
   FROM bloomreaderbeta.questions_correct
UNION ALL
 SELECT 'release'::text AS channel,
    comprehension."timestamp",
    comprehension.context_timezone,
    comprehension.anonymous_id,
    comprehension.context_device_id,
    comprehension.context_major_minor,
    comprehension.title,
    comprehension.branding_project_name,
    comprehension.location_uid,
    comprehension.question_count,
    comprehension.percent_right,
    comprehension.book_instance_id
   FROM bloomreader.comprehension
UNION ALL
 SELECT 'beta'::text AS channel,
    comprehension."timestamp",
    comprehension.context_timezone,
    comprehension.anonymous_id,
    comprehension.context_device_id,
    comprehension.context_major_minor,
    comprehension.title,
    comprehension.branding_project_name,
    comprehension.location_uid,
    comprehension.question_count,
    comprehension.percent_right,
    comprehension.book_instance_id
   FROM bloomreaderbeta.comprehension;


ALTER TABLE bloomreader.v_comprehension_raw OWNER TO silpgadmin;

--
-- TOC entry 547 (class 1259 OID 1890796)
-- Name: v_comprehension; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_comprehension AS
 SELECT comp."timestamp" AS time_utc,
    timezone(comp.context_timezone, comp."timestamp") AS time_local,
    (timezone(comp.context_timezone, comp."timestamp"))::date AS date_local,
    comp.context_timezone,
    initcap(to_char(timezone(comp.context_timezone, comp."timestamp"), 'day'::text)) AS time_local_day,
    (date_part('hour'::text, timezone(comp.context_timezone, comp."timestamp")))::integer AS time_local_hour,
    comp.anonymous_id,
    comp.context_device_id AS device_unique_id,
    comp.context_major_minor AS bloom_reader_version,
        CASE
            WHEN ((comp.title = 'The Moon and the Cap'::text) AND (comp.branding_project_name = 'SIL-International'::text)) THEN 'Sample-Book'::text
            WHEN ((comp.title = 'The Moon and the Cap'::text) AND (comp.branding_project_name = 'Default'::text)) THEN 'Sample-Book'::text
            WHEN ((comp.title = 'The Moon and the Cap'::text) AND (comp.branding_project_name IS NULL)) THEN 'Sample-Book'::text
            ELSE comp.branding_project_name
        END AS book_branding,
    comp.title AS book_title,
    comp.question_count,
    comp.percent_right,
    c.country_name AS country,
    c.region,
    c.city,
    comp.channel,
    comp.book_instance_id
   FROM (bloomreader.v_comprehension_raw comp
     LEFT JOIN public.countryregioncitylu c ON ((comp.location_uid = c.loc_uid)))
  WHERE ((comp."timestamp" >= '2018-01-01 00:00:00+00'::timestamp with time zone) AND (comp."timestamp" < clock_timestamp()));


ALTER TABLE bloomreader.v_comprehension OWNER TO silpgadmin;

--
-- TOC entry 526 (class 1259 OID 1476224)
-- Name: v_number_of_books_opened; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_number_of_books_opened AS
 SELECT v_book_or_shelf_opened.anonymous_id,
    count(*) AS number_of_books_opened,
    count(DISTINCT v_book_or_shelf_opened.book_title) AS number_of_distinct_books_opened,
    v_book_or_shelf_opened.book_branding,
    v_book_or_shelf_opened.country
   FROM bloomreader.v_book_or_shelf_opened
  GROUP BY v_book_or_shelf_opened.anonymous_id, v_book_or_shelf_opened.book_branding, v_book_or_shelf_opened.country;


ALTER TABLE bloomreader.v_number_of_books_opened OWNER TO silpgadmin;

--
-- TOC entry 528 (class 1259 OID 1483392)
-- Name: v_number_of_sign_language_books_opened; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_number_of_sign_language_books_opened AS
 SELECT v_book_or_shelf_opened.anonymous_id,
    count(*) AS number_of_books_opened,
    count(DISTINCT v_book_or_shelf_opened.book_title) AS number_of_distinct_books_opened,
    v_book_or_shelf_opened.book_branding,
    v_book_or_shelf_opened.country
   FROM bloomreader.v_book_or_shelf_opened
  WHERE (v_book_or_shelf_opened.features ~~ '%signLanguage%'::text)
  GROUP BY v_book_or_shelf_opened.anonymous_id, v_book_or_shelf_opened.book_branding, v_book_or_shelf_opened.country;


ALTER TABLE bloomreader.v_number_of_sign_language_books_opened OWNER TO silpgadmin;

--
-- TOC entry 514 (class 1259 OID 1001767)
-- Name: v_number_pages_read_by_book; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_number_pages_read_by_book AS
 SELECT v_pages_read.book_title,
    sum(v_pages_read.pages_read_audio) AS number_audio_pages_played,
    sum(v_pages_read.pages_read_nonaudio) AS number_nonaudio_pages_read,
    v_pages_read.book_branding,
    v_pages_read.country,
    max(v_pages_read.book_pages) AS max_number_pages
   FROM bloomreader.v_pages_read
  GROUP BY v_pages_read.book_title, v_pages_read.book_branding, v_pages_read.country;


ALTER TABLE bloomreader.v_number_pages_read_by_book OWNER TO silpgadmin;

--
-- TOC entry 527 (class 1259 OID 1476240)
-- Name: v_pages_read_by_user; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_pages_read_by_user AS
 SELECT v_pages_read.anonymous_id,
    sum(v_pages_read.pages_read) AS sum,
    v_pages_read.book_branding,
    v_pages_read.country
   FROM bloomreader.v_pages_read
  GROUP BY v_pages_read.anonymous_id, v_pages_read.book_branding, v_pages_read.country;


ALTER TABLE bloomreader.v_pages_read_by_user OWNER TO silpgadmin;

--
-- TOC entry 509 (class 1259 OID 998565)
-- Name: v_sessions_per_day; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_sessions_per_day AS
 SELECT (v_pages_read.time_local)::date AS date_local,
    v_pages_read.book_branding,
    v_pages_read.country,
    count(*) AS number_sessions
   FROM bloomreader.v_pages_read
  GROUP BY ((v_pages_read.time_local)::date), v_pages_read.book_branding, v_pages_read.country;


ALTER TABLE bloomreader.v_sessions_per_day OWNER TO silpgadmin;

--
-- TOC entry 510 (class 1259 OID 998704)
-- Name: v_sessions_per_day_per_user; Type: VIEW; Schema: bloomreader; Owner: silpgadmin
--

CREATE VIEW bloomreader.v_sessions_per_day_per_user AS
 SELECT v_pages_read.anonymous_id,
    (v_pages_read.time_local)::date AS date_local,
    v_pages_read.book_branding,
    v_pages_read.country,
    count(*) AS number_sessions
   FROM bloomreader.v_pages_read
  GROUP BY v_pages_read.anonymous_id, ((v_pages_read.time_local)::date), v_pages_read.book_branding, v_pages_read.country
  ORDER BY ((v_pages_read.time_local)::date);


ALTER TABLE bloomreader.v_sessions_per_day_per_user OWNER TO silpgadmin;

--
-- TOC entry 392 (class 1259 OID 339023)
-- Name: accounts; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.accounts (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_major_minor text,
    context_os_name text,
    context_screen_width bigint,
    uuid_ts timestamp with time zone,
    context_library_version text,
    context_locale text,
    context_timezone text,
    context_user_agent text,
    context_device_manufacturer text,
    context_screen_density numeric,
    context_library_name text,
    context_app_namespace text,
    context_device_id text,
    context_network_cellular boolean,
    context_network_wifi boolean,
    context_traits_user_id text,
    context_app_build bigint,
    context_ip text,
    context_network_bluetooth boolean,
    context_os_version text,
    user_id text,
    context_app_name text,
    context_app_version text,
    context_screen_height bigint,
    context_device_type text,
    context_traits_anonymous_id text,
    context_device_model text,
    context_device_name text,
    context_network_carrier text
);


ALTER TABLE bloomreaderbeta.accounts OWNER TO segment;

--
-- TOC entry 518 (class 1259 OID 1072392)
-- Name: application_backgrounded; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.application_backgrounded (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_screen_width bigint,
    context_major_minor text,
    context_network_cellular boolean,
    context_library_version text,
    context_network_wifi boolean,
    context_os_version text,
    context_screen_density numeric,
    context_timezone text,
    event text,
    anonymous_id text,
    context_device_type text,
    sent_at timestamp with time zone,
    context_os_name text,
    context_traits_anonymous_id text,
    event_text text,
    context_app_namespace text,
    context_device_model text,
    context_app_name text,
    uuid_ts timestamp with time zone,
    context_network_bluetooth boolean,
    context_user_agent text,
    context_locale text,
    context_network_carrier text,
    context_screen_height bigint,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_app_build text,
    context_device_id text,
    context_ip text,
    context_device_name text,
    context_library_name text,
    context_app_version text,
    context_device_manufacturer text
);


ALTER TABLE bloomreaderbeta.application_backgrounded OWNER TO segment;

--
-- TOC entry 365 (class 1259 OID 106260)
-- Name: application_updated; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.application_updated (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density bigint,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    previous_build bigint,
    previous_version text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_network_cellular boolean,
    context_network_bluetooth boolean,
    context_network_wifi boolean,
    user_id text,
    context_traits_user_id text
);


ALTER TABLE bloomreaderbeta.application_updated OWNER TO segment;

--
-- TOC entry 366 (class 1259 OID 106268)
-- Name: book_opened; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.book_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    content_lang text,
    total_numbered_pages bigint,
    context_network_bluetooth boolean,
    context_network_wifi boolean,
    context_network_cellular boolean
);


ALTER TABLE bloomreaderbeta.book_opened OWNER TO segment;

--
-- TOC entry 382 (class 1259 OID 233191)
-- Name: groups; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.groups (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_user_agent text,
    group_id text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreaderbeta.groups OWNER TO segment;

--
-- TOC entry 391 (class 1259 OID 338991)
-- Name: identifies; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.identifies (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_user_agent text,
    context_screen_height bigint,
    context_traits_anonymous_id text,
    context_app_namespace text,
    context_ip text,
    context_library_name text,
    context_network_bluetooth boolean,
    context_os_name text,
    user_id text,
    sent_at timestamp with time zone,
    context_app_version text,
    context_device_id text,
    context_device_type text,
    context_library_version text,
    context_os_version text,
    context_app_name text,
    context_screen_width bigint,
    context_timezone text,
    context_traits_user_id text,
    "timestamp" timestamp with time zone,
    context_app_build bigint,
    context_device_model text,
    context_screen_density numeric,
    context_network_wifi boolean,
    uuid_ts timestamp with time zone,
    context_device_manufacturer text,
    context_device_name text,
    context_locale text,
    context_major_minor text,
    context_network_cellular boolean,
    anonymous_id text,
    original_timestamp timestamp with time zone,
    context_network_carrier text
);


ALTER TABLE bloomreaderbeta.identifies OWNER TO segment;

--
-- TOC entry 505 (class 1259 OID 991377)
-- Name: install_attributed; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.install_attributed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    sent_at timestamp with time zone,
    context_major_minor text,
    context_network_carrier text,
    event text,
    anonymous_id text,
    context_library_version text,
    context_network_bluetooth boolean,
    event_text text,
    uuid_ts timestamp with time zone,
    context_device_type text,
    context_locale text,
    context_user_agent text,
    context_device_name text,
    context_os_version text,
    context_traits_anonymous_id text,
    "timestamp" timestamp with time zone,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_screen_width bigint,
    context_timezone text,
    original_timestamp timestamp with time zone,
    provider text,
    context_app_namespace text,
    context_app_version text,
    context_ip text,
    context_network_wifi boolean,
    context_app_build text,
    context_library_name text,
    context_network_cellular boolean,
    installer text,
    context_app_name text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_os_name text
);


ALTER TABLE bloomreaderbeta.install_attributed OWNER TO segment;

--
-- TOC entry 375 (class 1259 OID 205350)
-- Name: phonespng; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.phonespng AS
 SELECT count(*) AS phone_count,
    a."timestamp"
   FROM bloomreaderbeta.application_installed a
  WHERE (EXISTS ( SELECT 1
           FROM public.ip2location b
          WHERE (((public.ip2int((a.context_ip)::character varying) >= b.ip_from) AND (public.ip2int((a.context_ip)::character varying) <= b.ip_to)) AND ((b.country_name)::text = 'Papua New Guinea'::text))))
  GROUP BY a."timestamp";


ALTER TABLE bloomreaderbeta.phonespng OWNER TO silpgadmin;

--
-- TOC entry 458 (class 1259 OID 720214)
-- Name: png_application_installed_view; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.png_application_installed_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.anonymous_id,
    a.build,
    a.context_app_build,
    a.context_app_name,
    a.context_app_namespace,
    a.context_app_version,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_device_model,
    a.context_device_name,
    a.context_device_type,
    a.context_library_name,
    a.context_library_version,
    a.context_locale,
    a.context_os_name,
    a.context_os_version,
    a.context_screen_density,
    a.context_screen_height,
    a.context_screen_width,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.event,
    a.event_text,
    a.original_timestamp,
    a.sent_at,
    a."timestamp",
    a.version,
    a.context_major_minor,
    a.context_network_wifi,
    a.context_network_bluetooth,
    a.context_network_carrier,
    a.context_network_cellular,
    a.context_traits_user_id,
    a.user_id,
    a.location_uid
   FROM bloomreaderbeta.application_installed a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreaderbeta.png_application_installed_view OWNER TO silpgadmin;

--
-- TOC entry 454 (class 1259 OID 720127)
-- Name: png_application_opened_view; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.png_application_opened_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.anonymous_id,
    a.build,
    a.context_app_build,
    a.context_app_name,
    a.context_app_namespace,
    a.context_app_version,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_device_model,
    a.context_device_name,
    a.context_device_type,
    a.context_library_name,
    a.context_library_version,
    a.context_locale,
    a.context_major_minor,
    a.context_network_carrier,
    a.context_os_name,
    a.context_os_version,
    a.context_screen_density,
    a.context_screen_height,
    a.context_screen_width,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.event,
    a.event_text,
    a.original_timestamp,
    a.sent_at,
    a."timestamp",
    a.version,
    a.context_traits_user_id,
    a.user_id,
    a.context_network_bluetooth,
    a.context_network_cellular,
    a.context_network_wifi,
    a.location_uid
   FROM bloomreaderbeta.application_opened a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreaderbeta.png_application_opened_view OWNER TO silpgadmin;

--
-- TOC entry 460 (class 1259 OID 751776)
-- Name: png_book_or_shelf_opened_view; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.png_book_or_shelf_opened_view AS
 SELECT a.id,
    a.received_at,
    a.original_timestamp,
    a.question_count,
    a.title,
    a.context_app_name,
    a.context_device_name,
    a.context_network_wifi,
    a.context_screen_width,
    a."timestamp",
    a.context_app_build,
    a.context_device_model,
    a.context_library_version,
    a.sent_at,
    a.branding_project_name,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.total_numbered_pages,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_major_minor,
    a.context_network_carrier,
    a.context_network_cellular,
    a.context_os_version,
    a.event_text,
    a.context_app_version,
    a.context_network_bluetooth,
    a.uuid_ts,
    a.anonymous_id,
    a.context_locale,
    a.context_os_name,
    a.context_screen_density,
    a.context_screen_height,
    a.context_device_type,
    a.context_app_namespace,
    a.context_library_name,
    a.context_timezone,
    a.event,
    a.content_lang,
    a.context_traits_user_id,
    a.user_id,
    a.location_uid
   FROM bloomreaderbeta.book_or_shelf_opened a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreaderbeta.png_book_or_shelf_opened_view OWNER TO silpgadmin;

--
-- TOC entry 456 (class 1259 OID 720187)
-- Name: png_pages_read_view; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.png_pages_read_view AS
 SELECT a.id,
    a.received_at,
    a.uuid_ts,
    a.anonymous_id,
    a.context_app_build,
    a.context_app_name,
    a.context_app_namespace,
    a.context_app_version,
    a.context_device_id,
    a.context_device_manufacturer,
    a.context_device_model,
    a.context_device_name,
    a.context_device_type,
    a.context_library_name,
    a.context_library_version,
    a.context_locale,
    a.context_major_minor,
    a.context_network_carrier,
    a.context_os_name,
    a.context_os_version,
    a.context_screen_density,
    a.context_screen_height,
    a.context_screen_width,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.context_user_agent,
    a.event,
    a.event_text,
    a.last_page,
    a.original_timestamp,
    a.sent_at,
    a."timestamp",
    a.title,
    a.audio_pages,
    a.non_audio_pages,
    a.context_traits_user_id,
    a.user_id,
    a.branding_project_name,
    a.context_network_bluetooth,
    a.context_network_cellular,
    a.context_network_wifi,
    a.content_lang,
    a.last_numbered_page_read,
    a.total_numbered_pages,
    a.question_count,
    a.country_name,
    a.location_uid
   FROM bloomreaderbeta.pages_read a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreaderbeta.png_pages_read_view OWNER TO silpgadmin;

--
-- TOC entry 462 (class 1259 OID 751830)
-- Name: png_questions_correct_view; Type: VIEW; Schema: bloomreaderbeta; Owner: silpgadmin
--

CREATE VIEW bloomreaderbeta.png_questions_correct_view AS
 SELECT a.id,
    a.received_at,
    a.sent_at,
    a.title,
    a.uuid_ts,
    a.event_text,
    a.branding_project_name,
    a.context_device_manufacturer,
    a.context_device_name,
    a.context_locale,
    a.context_screen_width,
    a.context_app_build,
    a.context_network_wifi,
    a.context_os_version,
    a.context_app_version,
    a.context_library_name,
    a.context_network_cellular,
    a.context_screen_height,
    a.percent_right,
    a.context_device_model,
    a.context_network_bluetooth AS n,
    a.context_screen_density,
    a.context_user_agent,
    a.context_app_namespace,
    a.event,
    a.right_first_time,
    a."timestamp",
    a.context_major_minor,
    a.context_network_carrier,
    a.context_timezone,
    a.context_traits_anonymous_id,
    a.original_timestamp,
    a.question_count,
    a.anonymous_id,
    a.context_app_name,
    a.context_device_id,
    a.context_device_type,
    a.context_library_version,
    a.context_os_name,
    a.context_traits_user_id,
    a.user_id,
    a.location_uid
   FROM bloomreaderbeta.questions_correct a
  WHERE (a.location_uid IN ( SELECT b.loc_uid
           FROM public.countryregioncitylu b
          WHERE ((b.country_name)::text = 'Papua New Guinea'::text)));


ALTER TABLE bloomreaderbeta.png_questions_correct_view OWNER TO silpgadmin;

--
-- TOC entry 369 (class 1259 OID 106311)
-- Name: screens; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.screens (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    name text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_network_cellular boolean,
    context_network_bluetooth boolean,
    context_network_wifi boolean,
    user_id text,
    context_traits_user_id text
);


ALTER TABLE bloomreaderbeta.screens OWNER TO segment;

--
-- TOC entry 368 (class 1259 OID 106303)
-- Name: tracks; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_network_cellular boolean,
    context_network_wifi boolean,
    context_network_bluetooth boolean,
    user_id text,
    context_traits_user_id text
);


ALTER TABLE bloomreaderbeta.tracks OWNER TO segment;

--
-- TOC entry 390 (class 1259 OID 338977)
-- Name: users; Type: TABLE; Schema: bloomreaderbeta; Owner: segment
--

CREATE TABLE bloomreaderbeta.users (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_network_cellular boolean,
    context_screen_height bigint,
    context_ip text,
    context_os_name text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_app_version text,
    context_device_id text,
    context_device_model text,
    context_device_type text,
    context_screen_width bigint,
    uuid_ts timestamp with time zone,
    context_device_manufacturer text,
    context_library_name text,
    context_locale text,
    context_network_wifi boolean,
    context_app_namespace text,
    context_app_build bigint,
    context_library_version text,
    context_network_bluetooth boolean,
    context_os_version text,
    context_device_name text,
    context_screen_density numeric,
    context_user_agent text,
    context_app_name text,
    context_major_minor text,
    context_timezone text,
    context_network_carrier text
);


ALTER TABLE bloomreaderbeta.users OWNER TO segment;

--
-- TOC entry 359 (class 1259 OID 90682)
-- Name: accounts; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.accounts (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density bigint,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_user_agent text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.accounts OWNER TO segment;

--
-- TOC entry 481 (class 1259 OID 874845)
-- Name: added_books; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.added_books (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_device_id text,
    context_timezone text,
    original_timestamp timestamp with time zone,
    context_user_agent text,
    event_text text,
    context_app_name text,
    context_device_model text,
    context_library_name text,
    context_os_name text,
    context_device_name text,
    context_traits_anonymous_id text,
    method text,
    "timestamp" timestamp with time zone,
    anonymous_id text,
    context_app_namespace text,
    context_app_version text,
    context_network_carrier text,
    uuid_ts timestamp with time zone,
    context_app_build text,
    context_device_manufacturer text,
    context_device_type text,
    context_screen_density numeric,
    sent_at timestamp with time zone,
    titles text,
    context_library_version text,
    context_os_version text,
    context_screen_width bigint,
    event text,
    context_locale text,
    context_screen_height bigint,
    context_ip text,
    user_id text,
    context_traits_user_id text
);


ALTER TABLE bloomreadertest.added_books OWNER TO segment;

--
-- TOC entry 517 (class 1259 OID 1072178)
-- Name: application_backgrounded; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.application_backgrounded (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    anonymous_id text,
    context_ip text,
    context_os_name text,
    context_screen_density numeric,
    context_user_agent text,
    context_device_type text,
    context_network_carrier text,
    context_network_wifi boolean,
    context_os_version text,
    context_screen_height bigint,
    context_app_name text,
    context_library_name text,
    context_library_version text,
    event_text text,
    uuid_ts timestamp with time zone,
    context_device_model text,
    context_device_name text,
    context_major_minor text,
    context_network_bluetooth boolean,
    event text,
    context_app_version text,
    context_network_cellular boolean,
    context_app_build text,
    context_device_id text,
    context_device_manufacturer text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_app_namespace text,
    context_locale text,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    original_timestamp timestamp with time zone
);


ALTER TABLE bloomreadertest.application_backgrounded OWNER TO segment;

--
-- TOC entry 356 (class 1259 OID 49848)
-- Name: application_installed; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.application_installed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.application_installed OWNER TO segment;

--
-- TOC entry 340 (class 1259 OID 49457)
-- Name: application_opened; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.application_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    context_device_ad_tracking_enabled boolean,
    context_device_advertising_id text,
    from_background boolean
);


ALTER TABLE bloomreadertest.application_opened OWNER TO segment;

--
-- TOC entry 351 (class 1259 OID 49681)
-- Name: application_updated; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.application_updated (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    build bigint,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density bigint,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    previous_build bigint,
    previous_version text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    version text,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.application_updated OWNER TO segment;

--
-- TOC entry 329 (class 1259 OID 49357)
-- Name: book_closed; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.book_closed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    last_page bigint,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text
);


ALTER TABLE bloomreadertest.book_closed OWNER TO segment;

--
-- TOC entry 357 (class 1259 OID 49934)
-- Name: book_opened; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.book_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    content_lang text,
    total_numbered_pages bigint,
    context_network_cellular boolean,
    context_network_bluetooth boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.book_opened OWNER TO segment;

--
-- TOC entry 447 (class 1259 OID 710515)
-- Name: book_or_shelf_opened; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.book_or_shelf_opened (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_name text,
    context_library_version text,
    context_network_carrier text,
    context_network_wifi boolean,
    context_screen_height bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_network_bluetooth boolean,
    original_timestamp timestamp with time zone,
    context_app_build bigint,
    context_device_manufacturer text,
    context_ip text,
    context_network_cellular boolean,
    context_os_version text,
    context_screen_density numeric,
    event text,
    title text,
    context_app_name text,
    context_app_namespace text,
    context_device_id text,
    context_os_name text,
    context_screen_width bigint,
    context_traits_user_id text,
    event_text text,
    context_device_name text,
    question_count bigint,
    "timestamp" timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    branding_project_name text,
    context_device_model text,
    sent_at timestamp with time zone,
    user_id text,
    content_lang text,
    context_app_version text,
    context_device_type text,
    context_locale text,
    context_major_minor text,
    context_user_agent text,
    total_numbered_pages bigint,
    features text,
    session_id text,
    original_copyright_holder text,
    copyright_holder text,
    creator text,
    original_publisher text,
    publisher text,
    book_instance_id text,
    original_title text,
    context_page_path text,
    context_page_search text,
    context_page_title text,
    context_page_referrer text,
    context_page_url text,
    lat numeric,
    long numeric,
    location_age_days bigint,
    latitude numeric,
    location_accuracy numeric,
    longitude numeric,
    location_source text,
    city_center_id bigint,
    location_uid bigint
);


ALTER TABLE bloomreadertest.book_or_shelf_opened OWNER TO segment;

--
-- TOC entry 6477 (class 0 OID 0)
-- Dependencies: 447
-- Name: COLUMN book_or_shelf_opened.city_center_id; Type: COMMENT; Schema: bloomreadertest; Owner: segment
--

COMMENT ON COLUMN bloomreadertest.book_or_shelf_opened.city_center_id IS 'This is calculated from the latitude and longitude using the geography_city_centers table and the postgis extension.';


--
-- TOC entry 400 (class 1259 OID 396975)
-- Name: bookcreatedpermonth; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.bookcreatedpermonth AS
 SELECT count(*) AS num_created,
    ((date_part('YEAR'::text, timezone('AEST'::text, a."timestamp")))::text || lpad((date_part('MONTH'::text, timezone('AEST'::text, a."timestamp")))::text, 2, '0'::text)) AS month_published,
    ((a."timestamp")::timestamp without time zone)::date AS "timestamp",
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2ipv4((a.ip)::character varying) = d.context_ip)) AS country
   FROM bloomapp.create_book a
  GROUP BY a."timestamp", (((a."timestamp")::timestamp without time zone)::date), a.ip;


ALTER TABLE bloomreadertest.bookcreatedpermonth OWNER TO silpgadmin;

--
-- TOC entry 477 (class 1259 OID 845799)
-- Name: bookscreatedalltimenew; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.bookscreatedalltimenew AS
 SELECT count(DISTINCT a.book_id) AS distinct_book_count,
    a.language1_iso639_code,
    date_trunc('month'::text, a."timestamp") AS mon
   FROM bloomapp.create_book a
  WHERE (a.book_id IS NOT NULL)
  GROUP BY (date_trunc('month'::text, a."timestamp")), a.language1_iso639_code;


ALTER TABLE bloomreadertest.bookscreatedalltimenew OWNER TO silpgadmin;

--
-- TOC entry 404 (class 1259 OID 408780)
-- Name: booksuploadedalltime; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.booksuploadedalltime AS
 SELECT a.id,
    a."timestamp"
   FROM bloomapp.upload_book_success a
  WHERE (a."timestamp" < date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone));


ALTER TABLE bloomreadertest.booksuploadedalltime OWNER TO silpgadmin;

--
-- TOC entry 417 (class 1259 OID 451087)
-- Name: clone_delete_page; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.clone_delete_page (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint
);


ALTER TABLE bloomreadertest.clone_delete_page OWNER TO segment;

--
-- TOC entry 424 (class 1259 OID 454210)
-- Name: clone_launch; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.clone_launch (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    original_timestamp timestamp with time zone,
    osversion text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    collection_country text,
    country text,
    language3_iso639_code text,
    location_uid bigint
);


ALTER TABLE bloomreadertest.clone_launch OWNER TO segment;

--
-- TOC entry 516 (class 1259 OID 1048361)
-- Name: comprehension; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.comprehension (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_os_name text,
    event_text text,
    context_app_build text,
    context_app_name text,
    context_device_model text,
    context_device_name text,
    context_network_wifi boolean,
    context_screen_height bigint,
    sent_at timestamp with time zone,
    context_library_name text,
    context_timezone text,
    percent_right bigint,
    possible_points bigint,
    uuid_ts timestamp with time zone,
    actual_points bigint,
    context_app_namespace text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_type text,
    context_major_minor text,
    original_timestamp timestamp with time zone,
    context_app_version text,
    context_ip text,
    context_user_agent text,
    "timestamp" timestamp with time zone,
    title text,
    branding_project_name text,
    context_library_version text,
    context_network_bluetooth boolean,
    context_screen_density numeric,
    context_screen_width bigint,
    context_traits_anonymous_id text,
    event text,
    anonymous_id text,
    context_locale text,
    context_network_cellular boolean,
    context_os_version text,
    total_numbered_pages bigint,
    content_lang text,
    session_id text,
    features text,
    question_count bigint,
    context_network_carrier text,
    original_copyright_holder text,
    copyright_holder text,
    creator text,
    book_instance_id text,
    publisher text,
    original_title text,
    original_publisher text,
    location_source text
);


ALTER TABLE bloomreadertest.comprehension OWNER TO segment;

--
-- TOC entry 414 (class 1259 OID 447285)
-- Name: contentlanguagespng; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.contentlanguagespng AS
 SELECT DISTINCT a.content_lang AS language_count
   FROM ( SELECT DISTINCT book_or_shelf_opened.content_lang,
            book_or_shelf_opened.context_ip
           FROM bloomreader.book_or_shelf_opened
        UNION
         SELECT DISTINCT book_or_shelf_opened.content_lang,
            book_or_shelf_opened.context_ip
           FROM bloomreaderbeta.book_or_shelf_opened) a
  WHERE (EXISTS ( SELECT 1
           FROM public.ip2location b
          WHERE (((public.ip2int((a.context_ip)::character varying) >= b.ip_from) AND (public.ip2int((a.context_ip)::character varying) <= b.ip_to)) AND ((b.country_name)::text = 'Papua New Guinea'::text))));


ALTER TABLE bloomreadertest.contentlanguagespng OWNER TO silpgadmin;

--
-- TOC entry 370 (class 1259 OID 122966)
-- Name: countries; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.countries AS
 SELECT DISTINCT "substring"(a.context_timezone, '[^/]*$'::text) AS city,
    a.id,
    a.context_ip,
    a."timestamp",
    a.event,
    b.country_name AS country,
    b.ip_from,
    b.ip_to
   FROM (bloomreadertest.application_opened a
     JOIN public.ip2location b ON (((public.ip2int((a.context_ip)::character varying) >= b.ip_from) AND (public.ip2int((a.context_ip)::character varying) <= b.ip_to))));


ALTER TABLE bloomreadertest.countries OWNER TO silpgadmin;

--
-- TOC entry 442 (class 1259 OID 479088)
-- Name: countries_for_devices; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.countries_for_devices AS
 SELECT a.id,
    a."timestamp",
    ( SELECT d.country_name
           FROM public.countryregioncitylu d
          WHERE (a.location_uid = d.loc_uid)) AS country
   FROM bloomreader.application_installed a;


ALTER TABLE bloomreadertest.countries_for_devices OWNER TO silpgadmin;

--
-- TOC entry 401 (class 1259 OID 398443)
-- Name: dayrows; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.dayrows AS
 SELECT count(a.user_id) AS user_count,
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2ipv4((a.ip)::character varying) = d.context_ip)) AS country,
    a.channel,
    a.version,
    a.browser,
    a.ip,
    ((a."timestamp")::timestamp without time zone)::date AS day_user
   FROM bloomapp.launch a
  GROUP BY a.user_id, (((a."timestamp")::timestamp without time zone)::date), a.country, a.ip, a.channel, a.version, a.browser
  ORDER BY a.ip, (((a."timestamp")::timestamp without time zone)::date) DESC;


ALTER TABLE bloomreadertest.dayrows OWNER TO silpgadmin;

--
-- TOC entry 539 (class 1259 OID 1854166)
-- Name: download_book; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.download_book (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_user_agent text,
    event_text text,
    book_id text,
    book_instance_id text,
    context_library_version text,
    context_locale text,
    context_page_referrer text,
    context_page_title text,
    language text,
    original_timestamp timestamp with time zone,
    title text,
    topic text,
    context_ip text,
    context_page_search text,
    event_type text,
    level text,
    anonymous_id text,
    context_library_name text,
    context_page_path text,
    uuid_ts timestamp with time zone,
    context_page_url text,
    event text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone
);


ALTER TABLE bloomreadertest.download_book OWNER TO segment;

--
-- TOC entry 360 (class 1259 OID 90726)
-- Name: groups; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.groups (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_user_agent text,
    group_id text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.groups OWNER TO segment;

--
-- TOC entry 362 (class 1259 OID 90784)
-- Name: identifies; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.identifies (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density bigint,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_user_agent text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.identifies OWNER TO segment;

--
-- TOC entry 504 (class 1259 OID 989017)
-- Name: install_attributed; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.install_attributed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    installer text,
    context_app_version text,
    context_major_minor text,
    context_screen_density numeric,
    context_locale text,
    context_app_namespace text,
    context_device_manufacturer text,
    context_device_type text,
    context_ip text,
    original_timestamp timestamp with time zone,
    anonymous_id text,
    context_library_version text,
    context_network_bluetooth boolean,
    event text,
    event_text text,
    context_app_name text,
    context_device_id text,
    context_device_model text,
    context_network_wifi boolean,
    uuid_ts timestamp with time zone,
    context_device_name text,
    context_screen_height bigint,
    context_user_agent text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_timezone text,
    provider text,
    context_app_build text,
    context_library_name text,
    context_network_cellular boolean,
    context_os_name text,
    context_os_version text,
    context_screen_width bigint,
    context_traits_anonymous_id text,
    context_network_carrier text
);


ALTER TABLE bloomreadertest.install_attributed OWNER TO segment;

--
-- TOC entry 394 (class 1259 OID 366548)
-- Name: languages_for_vcs; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.languages_for_vcs AS
 SELECT a.language_count,
    a."timestamp",
    a.collection_country AS country
   FROM ( SELECT count(DISTINCT b.language1_iso639_code) AS language_count,
            ((b."timestamp")::timestamp without time zone)::date AS "timestamp",
            b.collection_country,
            rank() OVER (PARTITION BY (((b."timestamp")::timestamp without time zone)::date) ORDER BY (((b."timestamp")::timestamp without time zone)::date)) AS rank
           FROM bloomapp.create_new_vernacular_collection b
          GROUP BY (((b."timestamp")::timestamp without time zone)::date), b.collection_country) a
  WHERE (a.rank = 1);


ALTER TABLE bloomreadertest.languages_for_vcs OWNER TO silpgadmin;

--
-- TOC entry 402 (class 1259 OID 399688)
-- Name: lastyearsusersfromlaunch; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.lastyearsusersfromlaunch AS
 SELECT DISTINCT ON (a.user_id) a.user_id,
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2ipv4((a.ip)::character varying) = d.context_ip)) AS country,
    '1 Year'::text AS timeperiod
   FROM bloomapp.launch a
  WHERE (a."timestamp" > ((date_trunc('month'::text, (('now'::text)::date)::timestamp with time zone) - '1 day'::interval) - '1 year'::interval))
  ORDER BY a.user_id, ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2ipv4((a.ip)::character varying) = d.context_ip));


ALTER TABLE bloomreadertest.lastyearsusersfromlaunch OWNER TO silpgadmin;

--
-- TOC entry 403 (class 1259 OID 405980)
-- Name: launchlocs; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.launchlocs AS
 SELECT DISTINCT ON (a.user_id, a.ip) a.user_id,
    a.ip,
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2ipv4((a.ip)::character varying) = d.context_ip)) AS country
   FROM bloomapp.launch a
  ORDER BY a.user_id, a.ip;


ALTER TABLE bloomreadertest.launchlocs OWNER TO silpgadmin;

--
-- TOC entry 436 (class 1259 OID 471045)
-- Name: mpdata_book_search; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_book_search (
    id character varying(1024),
    received_at bigint,
    all_licenses boolean,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_initial_referrer text,
    context_page_referrer text,
    context_page_initial_ref_domain text,
    context_page_ref_domain text,
    source_for_context_page_search text,
    context_page_url text,
    user_id text,
    browser text,
    browser_version text,
    os text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    utm_content text,
    event text,
    event_text text,
    lang text,
    search_string text,
    shelf text,
    _tag text,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    city text,
    region text,
    mp_country text,
    anonymous_id text,
    context_referrer text,
    context_ref_domain text,
    context_user_agent text
);


ALTER TABLE bloomreadertest.mpdata_book_search OWNER TO segment;

--
-- TOC entry 405 (class 1259 OID 417912)
-- Name: mpdata_change_content_languages; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_change_content_languages (
    id character varying(1024),
    received_at bigint,
    uuid_ts timestamp with time zone,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text,
    rownumber bigint
);


ALTER TABLE bloomreadertest.mpdata_change_content_languages OWNER TO segment;

--
-- TOC entry 409 (class 1259 OID 428427)
-- Name: mpdata_change_page_layout; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_change_page_layout (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    new_layout text,
    old_lineage text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    language1_iso639_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    branding_project_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_change_page_layout OWNER TO segment;

--
-- TOC entry 410 (class 1259 OID 435883)
-- Name: mpdata_change_picture; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_change_picture (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    mp_country text,
    city text,
    region text,
    ip text
);


ALTER TABLE bloomreadertest.mpdata_change_picture OWNER TO segment;

--
-- TOC entry 411 (class 1259 OID 436910)
-- Name: mpdata_create_bloom_pack; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_create_bloom_pack (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_create_bloom_pack OWNER TO segment;

--
-- TOC entry 412 (class 1259 OID 437296)
-- Name: mpdata_create_book; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_create_book (
    id character varying(1024),
    received_at bigint,
    book_id text,
    browser text,
    category text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_create_book OWNER TO segment;

--
-- TOC entry 413 (class 1259 OID 444029)
-- Name: mpdata_create_new_vernacular_collection; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_create_new_vernacular_collection (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_create_new_vernacular_collection OWNER TO segment;

--
-- TOC entry 415 (class 1259 OID 450903)
-- Name: mpdata_created; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_created (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_created OWNER TO segment;

--
-- TOC entry 416 (class 1259 OID 451034)
-- Name: mpdata_created_new_source_collection; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_created_new_source_collection (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    country text,
    collection_country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_created_new_source_collection OWNER TO segment;

--
-- TOC entry 418 (class 1259 OID 451226)
-- Name: mpdata_delete_page; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_delete_page (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_delete_page OWNER TO segment;

--
-- TOC entry 437 (class 1259 OID 472344)
-- Name: mpdata_download_book; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_download_book (
    id character varying(1024),
    received_at bigint,
    user_id text,
    anonymous_id text,
    book text,
    book_title text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_initial_referrer text,
    context_page_referrer text,
    context_page_initial_ref_domain text,
    context_page_ref_domain text,
    source_for_context_page_search text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    href text,
    browser text,
    browser_version text,
    os text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    utm_content text,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_download_book OWNER TO segment;

--
-- TOC entry 419 (class 1259 OID 452255)
-- Name: mpdata_downloaded_book_failure; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_downloaded_book_failure (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    country text,
    collection_country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_downloaded_book_failure OWNER TO segment;

--
-- TOC entry 420 (class 1259 OID 452389)
-- Name: mpdata_duplicate_page; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_duplicate_page (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_duplicate_page OWNER TO segment;

--
-- TOC entry 421 (class 1259 OID 452515)
-- Name: mpdata_exported_to_doc_format; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_exported_to_doc_format (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_exported_to_doc_format OWNER TO segment;

--
-- TOC entry 422 (class 1259 OID 452620)
-- Name: mpdata_exported_xml_for_in_design; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_exported_xml_for_in_design (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_name text,
    branding_project_name text,
    collection_country text,
    country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_exported_xml_for_in_design OWNER TO segment;

--
-- TOC entry 423 (class 1259 OID 454100)
-- Name: mpdata_insert_template_page; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_insert_template_page (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    page text,
    template_source text,
    ip text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_insert_template_page OWNER TO segment;

--
-- TOC entry 425 (class 1259 OID 454513)
-- Name: mpdata_launch; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_launch (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_launch OWNER TO segment;

--
-- TOC entry 438 (class 1259 OID 472630)
-- Name: mpdata_log_in; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_log_in (
    id character varying(1024),
    received_at bigint,
    anonymous_id text,
    user_id text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_initial_referrer text,
    context_page_referrer text,
    context_page_initial_ref_domain text,
    context_page_ref_domain text,
    source_for_context_page_search text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    username text,
    browser text,
    browser_version text,
    osversion text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_log_in OWNER TO segment;

--
-- TOC entry 439 (class 1259 OID 472751)
-- Name: mpdata_log_out; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_log_out (
    id character varying(1024),
    received_at bigint,
    user_id text,
    anonymous_id text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_initial_referrer text,
    context_page_referrer text,
    context_page_initial_ref_domain text,
    context_page_ref_domain text,
    source_for_context_page_search text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    user_name text,
    browser text,
    browser_version text,
    osversion text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    context_campaign_source text,
    context_campaign_term text,
    context_campaign_name text,
    context_campaign_medium text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_log_out OWNER TO segment;

--
-- TOC entry 440 (class 1259 OID 472840)
-- Name: mpdata_pages; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_pages (
    id character varying(1024),
    received_at bigint,
    user_id text,
    anonymous_id text,
    context_campaign_medium text,
    context_campaign_name text,
    context_campaign_source text,
    context_campaign_term text,
    context_library_name text,
    context_library_version text,
    context_page_path text,
    context_page_initial_referrer text,
    context_page_referrer text,
    context_page_initial_ref_domain text,
    context_page_ref_domain text,
    source_for_context_page_search text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    name text,
    path text,
    referrer text,
    search text,
    title text,
    url text,
    browser text,
    browser_version text,
    osversion text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_pages OWNER TO segment;

--
-- TOC entry 441 (class 1259 OID 477842)
-- Name: mpdata_preview; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_preview (
    id character varying(1024),
    received_at bigint,
    user_id text,
    anonymous_id text,
    book text,
    context_library_name text,
    context_library_version text,
    context_campaign_medium text,
    context_campaign_name text,
    context_campaign_source text,
    context_campaign_term text,
    context_page_initial_referrer text,
    context_page_referrer text,
    context_page_initial_ref_domain text,
    context_page_ref_domain text,
    source_for_context_page_search text,
    context_page_url text,
    context_user_agent text,
    event text,
    event_text text,
    browser text,
    browser_version text,
    osversion text,
    screen_height bigint,
    screen_width bigint,
    device text,
    search_engine text,
    search_keyword text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_preview OWNER TO segment;

--
-- TOC entry 426 (class 1259 OID 454590)
-- Name: mpdata_print_pdf; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_print_pdf (
    id character varying(1024),
    received_at bigint,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_print_pdf OWNER TO segment;

--
-- TOC entry 427 (class 1259 OID 455693)
-- Name: mpdata_publish_android; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_publish_android (
    id character varying(1024),
    received_at bigint,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    country text,
    culture text,
    current_directory text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    language text,
    mode text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    desktop_environment text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_publish_android OWNER TO segment;

--
-- TOC entry 428 (class 1259 OID 455699)
-- Name: mpdata_register; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_register (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_register OWNER TO segment;

--
-- TOC entry 429 (class 1259 OID 455807)
-- Name: mpdata_relocate_page; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_relocate_page (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_relocate_page OWNER TO segment;

--
-- TOC entry 430 (class 1259 OID 459993)
-- Name: mpdata_save_e_pub; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_save_e_pub (
    id character varying(1024),
    received_at bigint,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_save_e_pub OWNER TO segment;

--
-- TOC entry 431 (class 1259 OID 460262)
-- Name: mpdata_save_pdf; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_save_pdf (
    id character varying(1024),
    received_at bigint,
    book_id text,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    country text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    ip text,
    layout text,
    osversion text,
    portion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_save_pdf OWNER TO segment;

--
-- TOC entry 432 (class 1259 OID 461231)
-- Name: mpdata_upgrade; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_upgrade (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    old_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    ip text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_upgrade OWNER TO segment;

--
-- TOC entry 433 (class 1259 OID 461311)
-- Name: mpdata_upload_book_failure; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_upload_book_failure (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    dot_net_version text,
    error text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    collection_country text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    country text,
    branding_project_name text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_upload_book_failure OWNER TO segment;

--
-- TOC entry 434 (class 1259 OID 461352)
-- Name: mpdata_upload_book_failure_system_time; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_upload_book_failure_system_time (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_upload_book_failure_system_time OWNER TO segment;

--
-- TOC entry 435 (class 1259 OID 461404)
-- Name: mpdata_upload_book_success; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.mpdata_upload_book_success (
    id character varying(1024),
    received_at bigint,
    browser text,
    channel text,
    command_line text,
    context_library_name text,
    context_library_version text,
    culture text,
    current_directory text,
    desktop_environment text,
    dot_net_version text,
    event text,
    event_text text,
    full_version text,
    osversion text,
    title text,
    url text,
    user_id text,
    user_name text,
    version text,
    working_set text,
    branding_project_name text,
    language1_iso639_code text,
    language1_iso639_name text,
    language2_iso639_code text,
    language3_iso639_code text,
    collection_country text,
    country text,
    city text,
    region text,
    mp_country text
);


ALTER TABLE bloomreadertest.mpdata_upload_book_success OWNER TO segment;

--
-- TOC entry 395 (class 1259 OID 366595)
-- Name: numofbloomusers; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.numofbloomusers AS
 SELECT count(a.id) AS num_users,
    ((date_part('YEAR'::text, timezone('AEST'::text, a.received_at)))::text || lpad((date_part('MONTH'::text, timezone('AEST'::text, a.received_at)))::text, 2, '0'::text)) AS month_published,
    ((a.received_at)::timestamp without time zone)::date AS received_at
   FROM bloomapp.users a
  GROUP BY a.received_at, (((a.received_at)::timestamp without time zone)::date);


ALTER TABLE bloomreadertest.numofbloomusers OWNER TO silpgadmin;

--
-- TOC entry 358 (class 1259 OID 56019)
-- Name: page_read; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.page_read (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    last_page bigint,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    with_narration boolean
);


ALTER TABLE bloomreadertest.page_read OWNER TO segment;

--
-- TOC entry 538 (class 1259 OID 1854152)
-- Name: pages; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.pages (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_page_path text,
    context_page_url text,
    context_user_agent text,
    search text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_page_referrer text,
    context_page_title text,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    referrer text,
    title text,
    context_page_search text,
    original_timestamp timestamp with time zone,
    path text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    url text
);


ALTER TABLE bloomreadertest.pages OWNER TO segment;

--
-- TOC entry 353 (class 1259 OID 49765)
-- Name: pages_read; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.pages_read (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    last_page bigint,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    title text,
    audio_pages bigint,
    non_audio_pages bigint,
    context_traits_user_id text,
    user_id text,
    branding_project_name text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    content_lang text,
    last_numbered_page_read boolean,
    total_numbered_pages bigint,
    question_count bigint,
    country_name character varying(64),
    context_device_advertising_id text,
    context_device_ad_tracking_enabled boolean,
    features text,
    last_numbered_page boolean,
    total_audio_page_duration bigint,
    total_video_page_duration numeric,
    video_pages_played bigint,
    video_duration bigint,
    audio_duration bigint,
    session_id text,
    video_pages bigint,
    copyright_holder text,
    original_copyright_holder text,
    creator text,
    publisher text,
    original_title text,
    book_instance_id text,
    original_publisher text,
    lat numeric,
    long numeric,
    location_accuracy numeric,
    location_source text,
    latitude numeric,
    location_age_days bigint,
    longitude numeric,
    city_center_id bigint,
    location_uid bigint
);


ALTER TABLE bloomreadertest.pages_read OWNER TO segment;

--
-- TOC entry 6524 (class 0 OID 0)
-- Dependencies: 353
-- Name: COLUMN pages_read.city_center_id; Type: COMMENT; Schema: bloomreadertest; Owner: segment
--

COMMENT ON COLUMN bloomreadertest.pages_read.city_center_id IS 'This is calculated from the latitude and longitude using the data in the geography_city_centers table and the postgis extension.';


--
-- TOC entry 381 (class 1259 OID 232288)
-- Name: questions_correct; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.questions_correct (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    sent_at timestamp with time zone,
    title text,
    uuid_ts timestamp with time zone,
    event_text text,
    branding_project_name text,
    context_device_manufacturer text,
    context_device_name text,
    context_ip text,
    context_locale text,
    context_screen_width bigint,
    context_app_build bigint,
    context_network_wifi boolean,
    context_os_version text,
    context_app_version text,
    context_library_name text,
    context_network_cellular boolean,
    context_screen_height bigint,
    percent_right bigint,
    context_device_model text,
    context_network_bluetooth boolean,
    context_screen_density numeric,
    context_user_agent text,
    context_app_namespace text,
    event text,
    right_first_time bigint,
    "timestamp" timestamp with time zone,
    context_major_minor text,
    context_network_carrier text,
    context_timezone text,
    context_traits_anonymous_id text,
    original_timestamp timestamp with time zone,
    question_count bigint,
    anonymous_id text,
    context_app_name text,
    context_device_id text,
    context_device_type text,
    context_library_version text,
    context_os_name text,
    context_traits_user_id text,
    user_id text,
    book_instance_id text
);


ALTER TABLE bloomreadertest.questions_correct OWNER TO segment;

--
-- TOC entry 577 (class 1259 OID 2003198)
-- Name: request_gps; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.request_gps (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_app_namespace text,
    context_ip text,
    context_library_name text,
    event text,
    event_text text,
    context_network_wifi boolean,
    context_timezone text,
    context_user_agent text,
    context_traits_anonymous_id text,
    granted boolean,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_device_id text,
    context_device_manufacturer text,
    context_device_name text,
    context_device_type text,
    context_os_name text,
    context_device_model text,
    context_screen_height bigint,
    context_library_version text,
    context_screen_width bigint,
    context_screen_density bigint,
    sent_at timestamp with time zone,
    context_app_build text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_version text,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_name text,
    context_app_version text
);


ALTER TABLE bloomreadertest.request_gps OWNER TO segment;

--
-- TOC entry 335 (class 1259 OID 49416)
-- Name: screens; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.screens (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    name text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    context_device_ad_tracking_enabled boolean,
    context_device_advertising_id text,
    shelf text
);


ALTER TABLE bloomreadertest.screens OWNER TO segment;

--
-- TOC entry 446 (class 1259 OID 664207)
-- Name: testing; Type: VIEW; Schema: bloomreadertest; Owner: silpgadmin
--

CREATE VIEW bloomreadertest.testing AS
 SELECT a.id,
    (timezone('AEST'::text, a."timestamp"))::date AS timezone,
    ( SELECT d.country_name
           FROM public.ip2loc_sm_tab d
          WHERE (public.ip2int((a.context_ip)::character varying) = d.context_ip)) AS country
   FROM ( SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi
           FROM bloomreader.application_opened
        UNION ALL
         SELECT application_opened.id,
            application_opened.received_at,
            application_opened.uuid_ts,
            application_opened.anonymous_id,
            application_opened.build,
            application_opened.context_app_build,
            application_opened.context_app_name,
            application_opened.context_app_namespace,
            application_opened.context_app_version,
            application_opened.context_device_id,
            application_opened.context_device_manufacturer,
            application_opened.context_device_model,
            application_opened.context_device_name,
            application_opened.context_device_type,
            application_opened.context_ip,
            application_opened.context_library_name,
            application_opened.context_library_version,
            application_opened.context_locale,
            application_opened.context_major_minor,
            application_opened.context_network_carrier,
            application_opened.context_os_name,
            application_opened.context_os_version,
            application_opened.context_screen_density,
            application_opened.context_screen_height,
            application_opened.context_screen_width,
            application_opened.context_timezone,
            application_opened.context_traits_anonymous_id,
            application_opened.context_user_agent,
            application_opened.event,
            application_opened.event_text,
            application_opened.original_timestamp,
            application_opened.sent_at,
            application_opened."timestamp",
            application_opened.version,
            application_opened.context_traits_user_id,
            application_opened.user_id,
            application_opened.context_network_bluetooth,
            application_opened.context_network_cellular,
            application_opened.context_network_wifi
           FROM bloomreaderbeta.application_opened) a
  WHERE (((timezone('AEST'::text, a."timestamp"))::date > ((date_trunc('month'::text, ((timezone('AEST'::text, (('now'::text)::date)::timestamp with time zone))::date)::timestamp with time zone) - '1 day'::interval) - '1 year'::interval)) AND ((timezone('AEST'::text, a."timestamp"))::date < date_trunc('month'::text, ((timezone('AEST'::text, (('now'::text)::date)::timestamp with time zone))::date)::timestamp with time zone)))
  GROUP BY ((timezone('AEST'::text, a."timestamp"))::date), a.id, a.context_ip;


ALTER TABLE bloomreadertest.testing OWNER TO silpgadmin;

--
-- TOC entry 345 (class 1259 OID 49556)
-- Name: tracks; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    anonymous_id text,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density numeric,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_user_agent text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    context_traits_user_id text,
    user_id text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean,
    context_device_ad_tracking_enabled boolean,
    context_device_advertising_id text,
    context_page_referrer text,
    context_page_title text,
    context_page_url text,
    context_page_path text,
    context_page_search text
);


ALTER TABLE bloomreadertest.tracks OWNER TO segment;

--
-- TOC entry 361 (class 1259 OID 90752)
-- Name: users; Type: TABLE; Schema: bloomreadertest; Owner: segment
--

CREATE TABLE bloomreadertest.users (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_app_build bigint,
    context_app_name text,
    context_app_namespace text,
    context_app_version text,
    context_device_id text,
    context_device_manufacturer text,
    context_device_model text,
    context_device_name text,
    context_device_type text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    context_locale text,
    context_major_minor text,
    context_network_carrier text,
    context_os_name text,
    context_os_version text,
    context_screen_density bigint,
    context_screen_height bigint,
    context_screen_width bigint,
    context_timezone text,
    context_traits_anonymous_id text,
    context_traits_user_id text,
    context_user_agent text,
    context_network_bluetooth boolean,
    context_network_cellular boolean,
    context_network_wifi boolean
);


ALTER TABLE bloomreadertest.users OWNER TO segment;

--
-- TOC entry 555 (class 1259 OID 1966691)
-- Name: mv_book_detail; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_book_detail AS
 SELECT v_book_detail.book_id,
    v_book_detail.book_instance_id,
    v_book_detail."timestamp"
   FROM bloomlibrary_org.v_book_detail
  WITH NO DATA;


ALTER TABLE common.mv_book_detail OWNER TO silpgadmin;

--
-- TOC entry 583 (class 1259 OID 2024410)
-- Name: mv_comprehension; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_comprehension AS
 SELECT v_comprehension.time_utc,
    v_comprehension.time_local,
    v_comprehension.date_local,
    v_comprehension.context_timezone,
    v_comprehension.time_local_day,
    v_comprehension.time_local_hour,
    v_comprehension.anonymous_id,
    v_comprehension.device_unique_id,
    v_comprehension.bloom_reader_version,
    v_comprehension.book_branding,
    v_comprehension.book_title,
    v_comprehension.question_count,
    v_comprehension.percent_right,
    v_comprehension.country,
    v_comprehension.region,
    v_comprehension.city,
    v_comprehension.channel,
    v_comprehension.book_instance_id,
    'bloomreader'::text AS source
   FROM bloomreader.v_comprehension
UNION ALL
 SELECT v_comprehension.time_utc,
    v_comprehension.time_local,
    v_comprehension.date_local,
    v_comprehension.context_timezone,
    v_comprehension.time_local_day,
    v_comprehension.time_local_hour,
    v_comprehension.anonymous_id,
    v_comprehension.device_unique_id,
    v_comprehension.bloom_reader_version,
    v_comprehension.book_branding,
    v_comprehension.book_title,
    v_comprehension.question_count,
    v_comprehension.percent_right,
    v_comprehension.country,
    v_comprehension.region,
    v_comprehension.city,
    v_comprehension.channel,
    v_comprehension.book_instance_id,
    'bloomlibrary'::text AS source
   FROM bloomlibrary_org.v_comprehension
  WITH NO DATA;


ALTER TABLE common.mv_comprehension OWNER TO silpgadmin;

--
-- TOC entry 557 (class 1259 OID 1972825)
-- Name: mv_download_book; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_download_book AS
 SELECT v_download_book.time_utc,
    v_download_book.book_id,
    v_download_book.book_instance_id,
    v_download_book.event_type,
    v_download_book.book_title,
    v_download_book.book_branding,
    v_download_book.country,
    v_download_book.region,
    v_download_book.city,
    v_download_book.topic
   FROM bloomlibrary_org.v_download_book
  WITH NO DATA;


ALTER TABLE common.mv_download_book OWNER TO silpgadmin;

--
-- TOC entry 579 (class 1259 OID 2015991)
-- Name: mv_pages_read; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_pages_read AS
 SELECT v_pages_read.time_utc,
    v_pages_read.time_local,
    v_pages_read.date_local,
    v_pages_read.context_timezone,
    v_pages_read.time_local_day,
    v_pages_read.time_local_hour,
    v_pages_read.pages_read_audio,
    v_pages_read.pages_read_nonaudio,
    v_pages_read.pages_read,
    v_pages_read.anonymous_id,
    v_pages_read.device_unique_id,
    v_pages_read.device_project_hardware_code,
    v_pages_read.bloom_reader_version,
    v_pages_read.book_title,
    v_pages_read.book_branding,
    v_pages_read.book_language_code,
    v_pages_read.book_language,
    v_pages_read.book_pages,
    v_pages_read.finished_reading_book,
    v_pages_read.country,
    v_pages_read.region,
    v_pages_read.city,
    v_pages_read.channel,
    v_pages_read.video_pages_played,
    v_pages_read.features,
    v_pages_read.book_instance_id,
    'bloomreader'::text AS source
   FROM bloomreader.v_pages_read
UNION ALL
 SELECT v_pages_read.time_utc,
    v_pages_read.time_local,
    v_pages_read.date_local,
    v_pages_read.context_timezone,
    v_pages_read.time_local_day,
    v_pages_read.time_local_hour,
    v_pages_read.pages_read_audio,
    v_pages_read.pages_read_nonaudio,
    v_pages_read.pages_read,
    v_pages_read.anonymous_id,
    v_pages_read.device_unique_id,
    v_pages_read.device_project_hardware_code,
    v_pages_read.bloom_reader_version,
    v_pages_read.book_title,
    v_pages_read.book_branding,
    v_pages_read.book_language_code,
    v_pages_read.book_language,
    v_pages_read.book_pages,
    v_pages_read.finished_reading_book,
    v_pages_read.country,
    v_pages_read.region,
    v_pages_read.city,
    v_pages_read.channel,
    v_pages_read.video_pages_played,
    v_pages_read.features,
    v_pages_read.book_instance_id,
    'bloomlibrary'::text AS source
   FROM bloomlibrary_org.v_pages_read
  WITH NO DATA;


ALTER TABLE common.mv_pages_read OWNER TO silpgadmin;

--
-- TOC entry 580 (class 1259 OID 2016211)
-- Name: mv_reading_perbook_events; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_reading_perbook_events AS
 WITH dataperbook AS (
         SELECT mv_pages_read.book_instance_id,
            mode() WITHIN GROUP (ORDER BY mv_pages_read.book_title) AS book_title,
            mode() WITHIN GROUP (ORDER BY mv_pages_read.book_language_code) AS book_language_code
           FROM common.mv_pages_read
          GROUP BY mv_pages_read.book_instance_id
        )
 SELECT r.book_instance_id,
    max(dataperbook.book_title) AS book_title,
    r.book_branding,
    r.country,
    max(dataperbook.book_language_code) AS book_language_code,
    count(*) AS started,
    sum((r.finished_reading_book)::integer) AS finished,
    r.date_local
   FROM (common.mv_pages_read r
     JOIN dataperbook ON ((r.book_instance_id = dataperbook.book_instance_id)))
  WHERE (r.book_instance_id IS NOT NULL)
  GROUP BY r.book_instance_id, r.book_branding, r.country, r.date_local
  WITH NO DATA;


ALTER TABLE common.mv_reading_perbook_events OWNER TO silpgadmin;

--
-- TOC entry 549 (class 1259 OID 1908620)
-- Name: mv_reading_perday_events; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_reading_perday_events AS
 SELECT r.book_instance_id,
    r.date_local,
    r.book_branding,
    r.country,
    count(*) AS number_sessions
   FROM bloomreader.v_pages_read r
  GROUP BY r.book_instance_id, r.date_local, r.book_branding, r.country
  WITH NO DATA;


ALTER TABLE common.mv_reading_perday_events OWNER TO silpgadmin;

--
-- TOC entry 548 (class 1259 OID 1908586)
-- Name: mv_reading_perday_events_by_branding_and_country; Type: MATERIALIZED VIEW; Schema: common; Owner: silpgadmin
--

CREATE MATERIALIZED VIEW common.mv_reading_perday_events_by_branding_and_country AS
 SELECT r.date_local,
    r.book_branding,
    r.country,
    count(*) AS number_sessions
   FROM bloomreader.v_pages_read r
  GROUP BY r.date_local, r.book_branding, r.country
  WITH NO DATA;


ALTER TABLE common.mv_reading_perday_events_by_branding_and_country OWNER TO silpgadmin;

--
-- TOC entry 289 (class 1259 OID 21588)
-- Name: added_skipped_style; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.added_skipped_style (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    style text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.added_skipped_style OWNER TO segment;

--
-- TOC entry 282 (class 1259 OID 21532)
-- Name: created; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.created (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE hearthis.created OWNER TO segment;

--
-- TOC entry 278 (class 1259 OID 21500)
-- Name: error_setting_paratext_projects_folder; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.error_setting_paratext_projects_folder (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    error text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE hearthis.error_setting_paratext_projects_folder OWNER TO segment;

--
-- TOC entry 284 (class 1259 OID 21548)
-- Name: exception; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.exception (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    message text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    stack_trace text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.exception OWNER TO segment;

--
-- TOC entry 273 (class 1259 OID 21460)
-- Name: flubbed_record_press; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.flubbed_record_press (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    length text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.flubbed_record_press OWNER TO segment;

--
-- TOC entry 276 (class 1259 OID 21484)
-- Name: identifies; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.identifies (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_ip text,
    context_language text,
    context_library_name text,
    context_library_version text,
    email text,
    first_name text,
    last_name text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    uilanguage text,
    user_id text
);


ALTER TABLE hearthis.identifies OWNER TO segment;

--
-- TOC entry 325 (class 1259 OID 43354)
-- Name: ip2location_db1; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.ip2location_db1 (
    ip_from bigint NOT NULL,
    ip_to bigint NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL
);


ALTER TABLE hearthis.ip2location_db1 OWNER TO segment;

--
-- TOC entry 277 (class 1259 OID 21492)
-- Name: launch; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.launch (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.launch OWNER TO segment;

--
-- TOC entry 523 (class 1259 OID 1341325)
-- Name: loaded_glyssen_script_project; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.loaded_glyssen_script_project (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_version text,
    event_text text,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    full_version text,
    sent_at timestamp with time zone,
    user_id text,
    uuid_ts timestamp with time zone,
    version text,
    browser text,
    context_library_name text,
    event text,
    user_name text,
    ip text
);


ALTER TABLE hearthis.loaded_glyssen_script_project OWNER TO segment;

--
-- TOC entry 520 (class 1259 OID 1287026)
-- Name: loaded_paratext_project; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.loaded_paratext_project (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    version text,
    browser text,
    event_text text,
    "timestamp" timestamp with time zone,
    user_id text,
    sent_at timestamp with time zone,
    original_timestamp timestamp with time zone,
    user_name text,
    context_library_name text,
    context_library_version text,
    event text,
    full_version text,
    ip text
);


ALTER TABLE hearthis.loaded_paratext_project OWNER TO segment;

--
-- TOC entry 524 (class 1259 OID 1399484)
-- Name: loaded_text_release_bundle_project; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.loaded_text_release_bundle_project (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_version text,
    original_timestamp timestamp with time zone,
    version text,
    context_library_name text,
    event text,
    event_text text,
    full_version text,
    sent_at timestamp with time zone,
    user_name text,
    browser text,
    "timestamp" timestamp with time zone,
    user_id text,
    uuid_ts timestamp with time zone,
    ip text
);


ALTER TABLE hearthis.loaded_text_release_bundle_project OWNER TO segment;

--
-- TOC entry 280 (class 1259 OID 21516)
-- Name: play; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.play (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book text,
    browser text,
    chapter text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    script_block text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    words_in_line text,
    ip text
);


ALTER TABLE hearthis.play OWNER TO segment;

--
-- TOC entry 521 (class 1259 OID 1321611)
-- Name: project_created_from_bundle; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.project_created_from_bundle (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    context_library_name text,
    context_library_version text,
    original_timestamp timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    browser text,
    full_version text,
    sent_at timestamp with time zone,
    user_name text,
    uuid_ts timestamp with time zone,
    version text,
    event_text text,
    event text,
    ip text
);


ALTER TABLE hearthis.project_created_from_bundle OWNER TO segment;

--
-- TOC entry 522 (class 1259 OID 1341290)
-- Name: project_created_from_glyssen_script; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.project_created_from_glyssen_script (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    user_name text,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    version text,
    "timestamp" timestamp with time zone,
    user_id text,
    event text,
    full_version text,
    sent_at timestamp with time zone,
    original_timestamp timestamp with time zone,
    context_library_version text,
    event_text text,
    ip text
);


ALTER TABLE hearthis.project_created_from_glyssen_script OWNER TO segment;

--
-- TOC entry 288 (class 1259 OID 21580)
-- Name: published; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.published (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    files_input text,
    files_output text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    type text,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.published OWNER TO segment;

--
-- TOC entry 287 (class 1259 OID 21572)
-- Name: punctuation_settings_changed; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.punctuation_settings_changed (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    additional_block_break_characters text,
    break_quotes_into_blocks text,
    browser text,
    clause_break_characters text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.punctuation_settings_changed OWNER TO segment;

--
-- TOC entry 290 (class 1259 OID 21596)
-- Name: re_recorded_a_clip; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.re_recorded_a_clip (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book text,
    browser text,
    chapter text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    script_block text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    words_in_line text,
    ip text
);


ALTER TABLE hearthis.re_recorded_a_clip OWNER TO segment;

--
-- TOC entry 279 (class 1259 OID 21508)
-- Name: re_recorded_a_line; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.re_recorded_a_line (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book text,
    chapter text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    original_timestamp text,
    script_block text,
    script_line text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    words_in_line text
);


ALTER TABLE hearthis.re_recorded_a_line OWNER TO segment;

--
-- TOC entry 285 (class 1259 OID 21556)
-- Name: recorded_a_line; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.recorded_a_line (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book text,
    break_lines_at_clauses text,
    browser text,
    chapter text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    length text,
    original_timestamp timestamp with time zone,
    script_block text,
    script_line text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    words_in_line text,
    ip text
);


ALTER TABLE hearthis.recorded_a_line OWNER TO segment;

--
-- TOC entry 286 (class 1259 OID 21564)
-- Name: recording_clip; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.recording_clip (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    book text,
    browser text,
    chapter text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    script_block text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    words_in_line text,
    ip text
);


ALTER TABLE hearthis.recording_clip OWNER TO segment;

--
-- TOC entry 274 (class 1259 OID 21468)
-- Name: set_project; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.set_project (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE hearthis.set_project OWNER TO segment;

--
-- TOC entry 283 (class 1259 OID 21540)
-- Name: tracks; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text
);


ALTER TABLE hearthis.tracks OWNER TO segment;

--
-- TOC entry 275 (class 1259 OID 21476)
-- Name: upgrade; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.upgrade (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    old_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE hearthis.upgrade OWNER TO segment;

--
-- TOC entry 281 (class 1259 OID 21524)
-- Name: users; Type: TABLE; Schema: hearthis; Owner: segment
--

CREATE TABLE hearthis.users (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_ip text,
    context_language text,
    context_library_name text,
    context_library_version text,
    email text,
    first_name text,
    last_name text,
    uilanguage text
);


ALTER TABLE hearthis.users OWNER TO segment;

--
-- TOC entry 338 (class 1259 OID 49443)
-- Name: created; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.created (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    original_timestamp text,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    version text,
    browser text,
    full_version text,
    user_name text
);


ALTER TABLE pdfdropletapp.created OWNER TO segment;

--
-- TOC entry 333 (class 1259 OID 49403)
-- Name: exception; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.exception (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    message text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    stack_trace text,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE pdfdropletapp.exception OWNER TO segment;

--
-- TOC entry 344 (class 1259 OID 49522)
-- Name: identifies; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.identifies (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_ip text,
    context_library_name text,
    context_library_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text
);


ALTER TABLE pdfdropletapp.identifies OWNER TO segment;

--
-- TOC entry 342 (class 1259 OID 49487)
-- Name: launch; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.launch (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text,
    ip text
);


ALTER TABLE pdfdropletapp.launch OWNER TO segment;

--
-- TOC entry 331 (class 1259 OID 49387)
-- Name: show_about; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.show_about (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text
);


ALTER TABLE pdfdropletapp.show_about OWNER TO segment;

--
-- TOC entry 328 (class 1259 OID 49356)
-- Name: show_instructions; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.show_instructions (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    full_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    user_name text,
    version text
);


ALTER TABLE pdfdropletapp.show_instructions OWNER TO segment;

--
-- TOC entry 346 (class 1259 OID 49570)
-- Name: tracks; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.tracks (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text
);


ALTER TABLE pdfdropletapp.tracks OWNER TO segment;

--
-- TOC entry 337 (class 1259 OID 49433)
-- Name: upgrade; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.upgrade (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    context_library_name text,
    context_library_version text,
    event text,
    event_text text,
    old_version text,
    original_timestamp timestamp with time zone,
    sent_at timestamp with time zone,
    "timestamp" timestamp with time zone,
    user_id text,
    version text,
    browser text,
    user_name text,
    full_version text
);


ALTER TABLE pdfdropletapp.upgrade OWNER TO segment;

--
-- TOC entry 348 (class 1259 OID 49604)
-- Name: users; Type: TABLE; Schema: pdfdropletapp; Owner: segment
--

CREATE TABLE pdfdropletapp.users (
    id character varying(1024) NOT NULL,
    received_at timestamp with time zone,
    uuid_ts timestamp with time zone,
    browser text,
    context_ip text,
    context_library_name text,
    context_library_version text
);


ALTER TABLE pdfdropletapp.users OWNER TO segment;

--
-- TOC entry 374 (class 1259 OID 172277)
-- Name: countrycodes; Type: TABLE; Schema: public; Owner: silpgadmin
--

CREATE TABLE public.countrycodes (
    countryname character varying(50),
    countrycode character(3)
);


ALTER TABLE public.countrycodes OWNER TO silpgadmin;

--
-- TOC entry 576 (class 1259 OID 1988595)
-- Name: geography_city_centers; Type: TABLE; Schema: public; Owner: silpgadmin
--

CREATE TABLE public.geography_city_centers (
    geoid bigint NOT NULL,
    closest_city_center character varying(200),
    latitude numeric,
    longitude numeric,
    countrycode character(3),
    regioncode character varying(25),
    geom public.geometry(Point)
);


ALTER TABLE public.geography_city_centers OWNER TO silpgadmin;

--
-- TOC entry 6557 (class 0 OID 0)
-- Dependencies: 576
-- Name: COLUMN geography_city_centers.closest_city_center; Type: COMMENT; Schema: public; Owner: silpgadmin
--

COMMENT ON COLUMN public.geography_city_centers.closest_city_center IS 'The name is chosen to be meaningful to users when extracting data based on using this data to find the closest city.  In urban areas, the location may actually be inside one city but closer to the center of an adjacent city.';


--
-- TOC entry 575 (class 1259 OID 1988441)
-- Name: geography_regioncodes; Type: TABLE; Schema: public; Owner: silpgadmin
--

CREATE TABLE public.geography_regioncodes (
    code character varying(25) NOT NULL,
    name character varying(200)
);


ALTER TABLE public.geography_regioncodes OWNER TO silpgadmin;

--
-- TOC entry 464 (class 1259 OID 751906)
-- Name: ip2location_as_of_2019_01_08; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.ip2location_as_of_2019_01_08 (
    ip_from bigint NOT NULL,
    ip_to bigint NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL
);


ALTER TABLE public.ip2location_as_of_2019_01_08 OWNER TO segment;

--
-- TOC entry 463 (class 1259 OID 751861)
-- Name: ip2location_up_to_2019_01_08; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.ip2location_up_to_2019_01_08 (
    ip_from bigint NOT NULL,
    ip_to bigint NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL
);


ALTER TABLE public.ip2location_up_to_2019_01_08 OWNER TO segment;

--
-- TOC entry 406 (class 1259 OID 424103)
-- Name: ipv42location; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.ipv42location (
    ipv4_from bigint NOT NULL,
    ipv4_to bigint NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL,
    region character varying(100) NOT NULL,
    city character varying(100) NOT NULL
);


ALTER TABLE public.ipv42location OWNER TO segment;

--
-- TOC entry 407 (class 1259 OID 426578)
-- Name: ipv62location; Type: TABLE; Schema: public; Owner: segment
--

CREATE TABLE public.ipv62location (
    ipv6_from numeric(39,0) NOT NULL,
    ipv6_to numeric(39,0) NOT NULL,
    country_code character(2) NOT NULL,
    country_name character varying(64) NOT NULL,
    region character varying(100) NOT NULL,
    city character varying(100) NOT NULL
);


ALTER TABLE public.ipv62location OWNER TO segment;

--
-- TOC entry 5646 (class 2606 OID 28306)
-- Name: change_content_languages change_content_languages_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.change_content_languages
    ADD CONSTRAINT change_content_languages_pkey PRIMARY KEY (id);


--
-- TOC entry 5652 (class 2606 OID 28333)
-- Name: change_page_layout change_page_layout_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.change_page_layout
    ADD CONSTRAINT change_page_layout_pkey PRIMARY KEY (id);


--
-- TOC entry 5624 (class 2606 OID 28218)
-- Name: change_picture change_picture_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.change_picture
    ADD CONSTRAINT change_picture_pkey PRIMARY KEY (id);


--
-- TOC entry 5827 (class 2606 OID 359409)
-- Name: change_video change_video_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.change_video
    ADD CONSTRAINT change_video_pkey PRIMARY KEY (id);


--
-- TOC entry 5622 (class 2606 OID 28210)
-- Name: create_bloom_pack create_bloom_pack_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.create_bloom_pack
    ADD CONSTRAINT create_bloom_pack_pkey PRIMARY KEY (id);


--
-- TOC entry 5616 (class 2606 OID 28186)
-- Name: create_book create_book_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.create_book
    ADD CONSTRAINT create_book_pkey PRIMARY KEY (id);


--
-- TOC entry 5618 (class 2606 OID 28194)
-- Name: create_new_vernacular_collection create_new_vernacular_collection_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.create_new_vernacular_collection
    ADD CONSTRAINT create_new_vernacular_collection_pkey PRIMARY KEY (id);


--
-- TOC entry 5640 (class 2606 OID 28282)
-- Name: created_new_source_collection created_new_source_collection_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.created_new_source_collection
    ADD CONSTRAINT created_new_source_collection_pkey PRIMARY KEY (id);


--
-- TOC entry 5655 (class 2606 OID 28341)
-- Name: created created_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.created
    ADD CONSTRAINT created_pkey PRIMARY KEY (id);


--
-- TOC entry 5592 (class 2606 OID 28114)
-- Name: delete_page delete_page_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.delete_page
    ADD CONSTRAINT delete_page_pkey PRIMARY KEY (id);


--
-- TOC entry 5657 (class 2606 OID 28349)
-- Name: downloaded_book_failure downloaded_book_failure_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.downloaded_book_failure
    ADD CONSTRAINT downloaded_book_failure_pkey PRIMARY KEY (id);


--
-- TOC entry 5613 (class 2606 OID 28178)
-- Name: downloaded_book_success downloaded_book_success_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.downloaded_book_success
    ADD CONSTRAINT downloaded_book_success_pkey PRIMARY KEY (id);


--
-- TOC entry 5650 (class 2606 OID 28322)
-- Name: duplicate_page duplicate_page_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.duplicate_page
    ADD CONSTRAINT duplicate_page_pkey PRIMARY KEY (id);


--
-- TOC entry 5601 (class 2606 OID 28146)
-- Name: exception exception_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.exception
    ADD CONSTRAINT exception_pkey PRIMARY KEY (id);


--
-- TOC entry 5642 (class 2606 OID 28290)
-- Name: exported_to_doc_format exported_to_doc_format_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.exported_to_doc_format
    ADD CONSTRAINT exported_to_doc_format_pkey PRIMARY KEY (id);


--
-- TOC entry 5599 (class 2606 OID 28138)
-- Name: exported_xml_for_in_design exported_xml_for_in_design_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.exported_xml_for_in_design
    ADD CONSTRAINT exported_xml_for_in_design_pkey PRIMARY KEY (id);


--
-- TOC entry 5648 (class 2606 OID 28314)
-- Name: identifies identifies_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.identifies
    ADD CONSTRAINT identifies_pkey PRIMARY KEY (id);


--
-- TOC entry 5628 (class 2606 OID 28234)
-- Name: insert_template_page insert_template_page_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.insert_template_page
    ADD CONSTRAINT insert_template_page_pkey PRIMARY KEY (id);


--
-- TOC entry 5610 (class 2606 OID 28170)
-- Name: launch launch_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.launch
    ADD CONSTRAINT launch_pkey PRIMARY KEY (id);


--
-- TOC entry 5632 (class 2606 OID 28250)
-- Name: print_pdf print_pdf_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.print_pdf
    ADD CONSTRAINT print_pdf_pkey PRIMARY KEY (id);


--
-- TOC entry 5634 (class 2606 OID 28258)
-- Name: publish_android publish_android_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.publish_android
    ADD CONSTRAINT publish_android_pkey PRIMARY KEY (id);


--
-- TOC entry 5603 (class 2606 OID 28154)
-- Name: register register_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.register
    ADD CONSTRAINT register_pkey PRIMARY KEY (id);


--
-- TOC entry 5626 (class 2606 OID 28226)
-- Name: relocate_page relocate_page_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.relocate_page
    ADD CONSTRAINT relocate_page_pkey PRIMARY KEY (id);


--
-- TOC entry 5638 (class 2606 OID 28274)
-- Name: save_e_pub save_e_pub_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.save_e_pub
    ADD CONSTRAINT save_e_pub_pkey PRIMARY KEY (id);


--
-- TOC entry 5644 (class 2606 OID 28298)
-- Name: save_epub save_epub_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.save_epub
    ADD CONSTRAINT save_epub_pkey PRIMARY KEY (id);


--
-- TOC entry 5659 (class 2606 OID 28357)
-- Name: save_pdf save_pdf_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.save_pdf
    ADD CONSTRAINT save_pdf_pkey PRIMARY KEY (id);


--
-- TOC entry 5853 (class 2606 OID 661594)
-- Name: select_page select_page_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.select_page
    ADD CONSTRAINT select_page_pkey PRIMARY KEY (id);


--
-- TOC entry 5747 (class 2606 OID 103621)
-- Name: some_event2 some_event2_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.some_event2
    ADD CONSTRAINT some_event2_pkey PRIMARY KEY (id);


--
-- TOC entry 5749 (class 2606 OID 103686)
-- Name: some_event some_event_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.some_event
    ADD CONSTRAINT some_event_pkey PRIMARY KEY (id);


--
-- TOC entry 5597 (class 2606 OID 28130)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5630 (class 2606 OID 28242)
-- Name: upgrade upgrade_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.upgrade
    ADD CONSTRAINT upgrade_pkey PRIMARY KEY (id);


--
-- TOC entry 5620 (class 2606 OID 28202)
-- Name: upload_book_failure upload_book_failure_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.upload_book_failure
    ADD CONSTRAINT upload_book_failure_pkey PRIMARY KEY (id);


--
-- TOC entry 5636 (class 2606 OID 28266)
-- Name: upload_book_failure_system_time upload_book_failure_system_time_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.upload_book_failure_system_time
    ADD CONSTRAINT upload_book_failure_system_time_pkey PRIMARY KEY (id);


--
-- TOC entry 5605 (class 2606 OID 28162)
-- Name: upload_book_success upload_book_success_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.upload_book_success
    ADD CONSTRAINT upload_book_success_pkey PRIMARY KEY (id);


--
-- TOC entry 5595 (class 2606 OID 28122)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: bloomapp; Owner: segment
--

ALTER TABLE ONLY bloomapp.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 5931 (class 2606 OID 1966492)
-- Name: book_detail book_detail_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.book_detail
    ADD CONSTRAINT book_detail_pkey PRIMARY KEY (id);


--
-- TOC entry 5927 (class 2606 OID 1966428)
-- Name: book_or_shelf_opened book_or_shelf_opened_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.book_or_shelf_opened
    ADD CONSTRAINT book_or_shelf_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5679 (class 2606 OID 49402)
-- Name: book_search book_search_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.book_search
    ADD CONSTRAINT book_search_pkey PRIMARY KEY (id);


--
-- TOC entry 5949 (class 2606 OID 2017511)
-- Name: comprehension comprehension_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.comprehension
    ADD CONSTRAINT comprehension_pkey PRIMARY KEY (id);


--
-- TOC entry 5729 (class 2606 OID 49794)
-- Name: download_book download_book_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.download_book
    ADD CONSTRAINT download_book_pkey PRIMARY KEY (id);


--
-- TOC entry 5702 (class 2606 OID 49521)
-- Name: error_parse_com error_parse_com_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.error_parse_com
    ADD CONSTRAINT error_parse_com_pkey PRIMARY KEY (id);


--
-- TOC entry 5714 (class 2606 OID 49655)
-- Name: error_restangular error_restangular_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.error_restangular
    ADD CONSTRAINT error_restangular_pkey PRIMARY KEY (id);


--
-- TOC entry 5687 (class 2606 OID 49440)
-- Name: log_in log_in_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.log_in
    ADD CONSTRAINT log_in_pkey PRIMARY KEY (id);


--
-- TOC entry 5693 (class 2606 OID 49468)
-- Name: log_out log_out_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.log_out
    ADD CONSTRAINT log_out_pkey PRIMARY KEY (id);


--
-- TOC entry 5935 (class 2606 OID 1973597)
-- Name: open_collection open_collection_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.open_collection
    ADD CONSTRAINT open_collection_pkey PRIMARY KEY (id);


--
-- TOC entry 5731 (class 2606 OID 49835)
-- Name: pages pages_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.pages
    ADD CONSTRAINT pages_pkey PRIMARY KEY (id);


--
-- TOC entry 5929 (class 2606 OID 1966466)
-- Name: pages_read pages_read_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.pages_read
    ADD CONSTRAINT pages_read_pkey PRIMARY KEY (id);


--
-- TOC entry 5669 (class 2606 OID 49384)
-- Name: preview preview_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.preview
    ADD CONSTRAINT preview_pkey PRIMARY KEY (id);


--
-- TOC entry 5933 (class 2606 OID 1973553)
-- Name: search_failed search_failed_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.search_failed
    ADD CONSTRAINT search_failed_pkey PRIMARY KEY (id);


--
-- TOC entry 5710 (class 2606 OID 49597)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: bloomlibrary_org; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_org.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5902 (class 2606 OID 1853659)
-- Name: book_detail book_detail_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.book_detail
    ADD CONSTRAINT book_detail_pkey PRIMARY KEY (id);


--
-- TOC entry 5915 (class 2606 OID 1856015)
-- Name: book_or_shelf_opened book_or_shelf_opened_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.book_or_shelf_opened
    ADD CONSTRAINT book_or_shelf_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5925 (class 2606 OID 1862873)
-- Name: comprehension comprehension_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.comprehension
    ADD CONSTRAINT comprehension_pkey PRIMARY KEY (id);


--
-- TOC entry 5905 (class 2606 OID 1853673)
-- Name: download_book download_book_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.download_book
    ADD CONSTRAINT download_book_pkey PRIMARY KEY (id);


--
-- TOC entry 5917 (class 2606 OID 1856029)
-- Name: log_in log_in_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.log_in
    ADD CONSTRAINT log_in_pkey PRIMARY KEY (id);


--
-- TOC entry 5919 (class 2606 OID 1856043)
-- Name: log_out log_out_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.log_out
    ADD CONSTRAINT log_out_pkey PRIMARY KEY (id);


--
-- TOC entry 5907 (class 2606 OID 1853687)
-- Name: open_collection open_collection_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.open_collection
    ADD CONSTRAINT open_collection_pkey PRIMARY KEY (id);


--
-- TOC entry 5909 (class 2606 OID 1853710)
-- Name: pages pages_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.pages
    ADD CONSTRAINT pages_pkey PRIMARY KEY (id);


--
-- TOC entry 5923 (class 2606 OID 1856077)
-- Name: pages_read pages_read_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.pages_read
    ADD CONSTRAINT pages_read_pkey PRIMARY KEY (id);


--
-- TOC entry 5921 (class 2606 OID 1856057)
-- Name: search_failed search_failed_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.search_failed
    ADD CONSTRAINT search_failed_pkey PRIMARY KEY (id);


--
-- TOC entry 5899 (class 2606 OID 1853644)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: bloomlibrary_test; Owner: segment
--

ALTER TABLE ONLY bloomlibrary_test.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5819 (class 2606 OID 338950)
-- Name: accounts accounts_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- TOC entry 5883 (class 2606 OID 1072689)
-- Name: application_backgrounded application_backgrounded_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.application_backgrounded
    ADD CONSTRAINT application_backgrounded_pkey PRIMARY KEY (id);


--
-- TOC entry 5698 (class 2606 OID 49474)
-- Name: application_installed application_installed_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.application_installed
    ADD CONSTRAINT application_installed_pkey PRIMARY KEY (id);


--
-- TOC entry 5806 (class 2606 OID 255855)
-- Name: application_opened application_opened_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.application_opened
    ADD CONSTRAINT application_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5779 (class 2606 OID 224157)
-- Name: application_updated application_updated_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.application_updated
    ADD CONSTRAINT application_updated_pkey PRIMARY KEY (id);


--
-- TOC entry 5675 (class 2606 OID 49385)
-- Name: book_closed book_closed_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.book_closed
    ADD CONSTRAINT book_closed_pkey PRIMARY KEY (id);


--
-- TOC entry 5683 (class 2606 OID 49424)
-- Name: book_opened book_opened_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.book_opened
    ADD CONSTRAINT book_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5777 (class 2606 OID 216720)
-- Name: book_or_shelf_opened book_or_shelf_opened_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.book_or_shelf_opened
    ADD CONSTRAINT book_or_shelf_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5897 (class 2606 OID 1560457)
-- Name: comprehension comprehension_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.comprehension
    ADD CONSTRAINT comprehension_pkey PRIMARY KEY (id);


--
-- TOC entry 5803 (class 2606 OID 233206)
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- TOC entry 5815 (class 2606 OID 338812)
-- Name: identifies identifies_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.identifies
    ADD CONSTRAINT identifies_pkey PRIMARY KEY (id);


--
-- TOC entry 5875 (class 2606 OID 1044506)
-- Name: install_attributed install_attributed_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.install_attributed
    ADD CONSTRAINT install_attributed_pkey PRIMARY KEY (id);


--
-- TOC entry 5787 (class 2606 OID 231556)
-- Name: pages_read pages_read_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.pages_read
    ADD CONSTRAINT pages_read_pkey PRIMARY KEY (id);


--
-- TOC entry 5772 (class 2606 OID 215579)
-- Name: questions_correct questions_correct_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.questions_correct
    ADD CONSTRAINT questions_correct_pkey PRIMARY KEY (id);


--
-- TOC entry 5720 (class 2606 OID 49761)
-- Name: screens screens_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.screens
    ADD CONSTRAINT screens_pkey PRIMARY KEY (id);


--
-- TOC entry 5716 (class 2606 OID 49692)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5817 (class 2606 OID 338918)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: bloomreader; Owner: segment
--

ALTER TABLE ONLY bloomreader.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 5825 (class 2606 OID 339030)
-- Name: accounts accounts_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- TOC entry 5881 (class 2606 OID 1072399)
-- Name: application_backgrounded application_backgrounded_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.application_backgrounded
    ADD CONSTRAINT application_backgrounded_pkey PRIMARY KEY (id);


--
-- TOC entry 5755 (class 2606 OID 106302)
-- Name: application_installed application_installed_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.application_installed
    ADD CONSTRAINT application_installed_pkey PRIMARY KEY (id);


--
-- TOC entry 5809 (class 2606 OID 255864)
-- Name: application_opened application_opened_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.application_opened
    ADD CONSTRAINT application_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5751 (class 2606 OID 106267)
-- Name: application_updated application_updated_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.application_updated
    ADD CONSTRAINT application_updated_pkey PRIMARY KEY (id);


--
-- TOC entry 5753 (class 2606 OID 106275)
-- Name: book_opened book_opened_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.book_opened
    ADD CONSTRAINT book_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5767 (class 2606 OID 169854)
-- Name: book_or_shelf_opened book_or_shelf_opened_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.book_or_shelf_opened
    ADD CONSTRAINT book_or_shelf_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5895 (class 2606 OID 1511620)
-- Name: comprehension comprehension_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.comprehension
    ADD CONSTRAINT comprehension_pkey PRIMARY KEY (id);


--
-- TOC entry 5801 (class 2606 OID 233198)
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- TOC entry 5823 (class 2606 OID 338998)
-- Name: identifies identifies_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.identifies
    ADD CONSTRAINT identifies_pkey PRIMARY KEY (id);


--
-- TOC entry 5873 (class 2606 OID 991384)
-- Name: install_attributed install_attributed_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.install_attributed
    ADD CONSTRAINT install_attributed_pkey PRIMARY KEY (id);


--
-- TOC entry 5795 (class 2606 OID 231570)
-- Name: pages_read pages_read_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.pages_read
    ADD CONSTRAINT pages_read_pkey PRIMARY KEY (id);


--
-- TOC entry 5769 (class 2606 OID 169905)
-- Name: questions_correct questions_correct_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.questions_correct
    ADD CONSTRAINT questions_correct_pkey PRIMARY KEY (id);


--
-- TOC entry 5759 (class 2606 OID 106318)
-- Name: screens screens_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.screens
    ADD CONSTRAINT screens_pkey PRIMARY KEY (id);


--
-- TOC entry 5757 (class 2606 OID 106310)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5821 (class 2606 OID 338984)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: bloomreaderbeta; Owner: segment
--

ALTER TABLE ONLY bloomreaderbeta.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 5739 (class 2606 OID 90707)
-- Name: accounts accounts_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.accounts
    ADD CONSTRAINT accounts_pkey PRIMARY KEY (id);


--
-- TOC entry 5869 (class 2606 OID 874852)
-- Name: added_books added_books_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.added_books
    ADD CONSTRAINT added_books_pkey PRIMARY KEY (id);


--
-- TOC entry 5879 (class 2606 OID 1072188)
-- Name: application_backgrounded application_backgrounded_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.application_backgrounded
    ADD CONSTRAINT application_backgrounded_pkey PRIMARY KEY (id);


--
-- TOC entry 5733 (class 2606 OID 49861)
-- Name: application_installed application_installed_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.application_installed
    ADD CONSTRAINT application_installed_pkey PRIMARY KEY (id);


--
-- TOC entry 5695 (class 2606 OID 49472)
-- Name: application_opened application_opened_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.application_opened
    ADD CONSTRAINT application_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5718 (class 2606 OID 49701)
-- Name: application_updated application_updated_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.application_updated
    ADD CONSTRAINT application_updated_pkey PRIMARY KEY (id);


--
-- TOC entry 5673 (class 2606 OID 49386)
-- Name: book_closed book_closed_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.book_closed
    ADD CONSTRAINT book_closed_pkey PRIMARY KEY (id);


--
-- TOC entry 5735 (class 2606 OID 49941)
-- Name: book_opened book_opened_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.book_opened
    ADD CONSTRAINT book_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5855 (class 2606 OID 710522)
-- Name: book_or_shelf_opened book_or_shelf_opened_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.book_or_shelf_opened
    ADD CONSTRAINT book_or_shelf_opened_pkey PRIMARY KEY (id);


--
-- TOC entry 5849 (class 2606 OID 451094)
-- Name: clone_delete_page clone_delete_page_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.clone_delete_page
    ADD CONSTRAINT clone_delete_page_pkey PRIMARY KEY (id);


--
-- TOC entry 5851 (class 2606 OID 454217)
-- Name: clone_launch clone_launch_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.clone_launch
    ADD CONSTRAINT clone_launch_pkey PRIMARY KEY (id);


--
-- TOC entry 5877 (class 2606 OID 1048368)
-- Name: comprehension comprehension_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.comprehension
    ADD CONSTRAINT comprehension_pkey PRIMARY KEY (id);


--
-- TOC entry 5913 (class 2606 OID 1854173)
-- Name: download_book download_book_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.download_book
    ADD CONSTRAINT download_book_pkey PRIMARY KEY (id);


--
-- TOC entry 5741 (class 2606 OID 90733)
-- Name: groups groups_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.groups
    ADD CONSTRAINT groups_pkey PRIMARY KEY (id);


--
-- TOC entry 5745 (class 2606 OID 90792)
-- Name: identifies identifies_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.identifies
    ADD CONSTRAINT identifies_pkey PRIMARY KEY (id);


--
-- TOC entry 5871 (class 2606 OID 989024)
-- Name: install_attributed install_attributed_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.install_attributed
    ADD CONSTRAINT install_attributed_pkey PRIMARY KEY (id);


--
-- TOC entry 5737 (class 2606 OID 56041)
-- Name: page_read page_read_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.page_read
    ADD CONSTRAINT page_read_pkey PRIMARY KEY (id);


--
-- TOC entry 5911 (class 2606 OID 1854159)
-- Name: pages pages_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.pages
    ADD CONSTRAINT pages_pkey PRIMARY KEY (id);


--
-- TOC entry 5726 (class 2606 OID 49783)
-- Name: pages_read pages_read_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.pages_read
    ADD CONSTRAINT pages_read_pkey PRIMARY KEY (id);


--
-- TOC entry 5798 (class 2606 OID 232295)
-- Name: questions_correct questions_correct_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.questions_correct
    ADD CONSTRAINT questions_correct_pkey PRIMARY KEY (id);


--
-- TOC entry 5943 (class 2606 OID 2003205)
-- Name: request_gps request_gps_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.request_gps
    ADD CONSTRAINT request_gps_pkey PRIMARY KEY (id);


--
-- TOC entry 5685 (class 2606 OID 49426)
-- Name: screens screens_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.screens
    ADD CONSTRAINT screens_pkey PRIMARY KEY (id);


--
-- TOC entry 5706 (class 2606 OID 49563)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5743 (class 2606 OID 90759)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: bloomreadertest; Owner: segment
--

ALTER TABLE ONLY bloomreadertest.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 5588 (class 2606 OID 21595)
-- Name: added_skipped_style added_skipped_style_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.added_skipped_style
    ADD CONSTRAINT added_skipped_style_pkey PRIMARY KEY (id);


--
-- TOC entry 5574 (class 2606 OID 21539)
-- Name: created created_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.created
    ADD CONSTRAINT created_pkey PRIMARY KEY (id);


--
-- TOC entry 5566 (class 2606 OID 21507)
-- Name: error_setting_paratext_projects_folder error_setting_paratext_projects_folder_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.error_setting_paratext_projects_folder
    ADD CONSTRAINT error_setting_paratext_projects_folder_pkey PRIMARY KEY (id);


--
-- TOC entry 5578 (class 2606 OID 21555)
-- Name: exception exception_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.exception
    ADD CONSTRAINT exception_pkey PRIMARY KEY (id);


--
-- TOC entry 5556 (class 2606 OID 21467)
-- Name: flubbed_record_press flubbed_record_press_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.flubbed_record_press
    ADD CONSTRAINT flubbed_record_press_pkey PRIMARY KEY (id);


--
-- TOC entry 5562 (class 2606 OID 21491)
-- Name: identifies identifies_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.identifies
    ADD CONSTRAINT identifies_pkey PRIMARY KEY (id);


--
-- TOC entry 5661 (class 2606 OID 43358)
-- Name: ip2location_db1 ip2location_db1_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.ip2location_db1
    ADD CONSTRAINT ip2location_db1_pkey PRIMARY KEY (ip_from, ip_to);


--
-- TOC entry 5564 (class 2606 OID 21499)
-- Name: launch launch_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.launch
    ADD CONSTRAINT launch_pkey PRIMARY KEY (id);


--
-- TOC entry 5891 (class 2606 OID 1341332)
-- Name: loaded_glyssen_script_project loaded_glyssen_script_project_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.loaded_glyssen_script_project
    ADD CONSTRAINT loaded_glyssen_script_project_pkey PRIMARY KEY (id);


--
-- TOC entry 5885 (class 2606 OID 1287033)
-- Name: loaded_paratext_project loaded_paratext_project_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.loaded_paratext_project
    ADD CONSTRAINT loaded_paratext_project_pkey PRIMARY KEY (id);


--
-- TOC entry 5893 (class 2606 OID 1399491)
-- Name: loaded_text_release_bundle_project loaded_text_release_bundle_project_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.loaded_text_release_bundle_project
    ADD CONSTRAINT loaded_text_release_bundle_project_pkey PRIMARY KEY (id);


--
-- TOC entry 5570 (class 2606 OID 21523)
-- Name: play play_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.play
    ADD CONSTRAINT play_pkey PRIMARY KEY (id);


--
-- TOC entry 5887 (class 2606 OID 1321618)
-- Name: project_created_from_bundle project_created_from_bundle_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.project_created_from_bundle
    ADD CONSTRAINT project_created_from_bundle_pkey PRIMARY KEY (id);


--
-- TOC entry 5889 (class 2606 OID 1341297)
-- Name: project_created_from_glyssen_script project_created_from_glyssen_script_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.project_created_from_glyssen_script
    ADD CONSTRAINT project_created_from_glyssen_script_pkey PRIMARY KEY (id);


--
-- TOC entry 5586 (class 2606 OID 21587)
-- Name: published published_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.published
    ADD CONSTRAINT published_pkey PRIMARY KEY (id);


--
-- TOC entry 5584 (class 2606 OID 21579)
-- Name: punctuation_settings_changed punctuation_settings_changed_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.punctuation_settings_changed
    ADD CONSTRAINT punctuation_settings_changed_pkey PRIMARY KEY (id);


--
-- TOC entry 5590 (class 2606 OID 21603)
-- Name: re_recorded_a_clip re_recorded_a_clip_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.re_recorded_a_clip
    ADD CONSTRAINT re_recorded_a_clip_pkey PRIMARY KEY (id);


--
-- TOC entry 5568 (class 2606 OID 21515)
-- Name: re_recorded_a_line re_recorded_a_line_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.re_recorded_a_line
    ADD CONSTRAINT re_recorded_a_line_pkey PRIMARY KEY (id);


--
-- TOC entry 5580 (class 2606 OID 21563)
-- Name: recorded_a_line recorded_a_line_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.recorded_a_line
    ADD CONSTRAINT recorded_a_line_pkey PRIMARY KEY (id);


--
-- TOC entry 5582 (class 2606 OID 21571)
-- Name: recording_clip recording_clip_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.recording_clip
    ADD CONSTRAINT recording_clip_pkey PRIMARY KEY (id);


--
-- TOC entry 5558 (class 2606 OID 21475)
-- Name: set_project set_project_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.set_project
    ADD CONSTRAINT set_project_pkey PRIMARY KEY (id);


--
-- TOC entry 5576 (class 2606 OID 21547)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5560 (class 2606 OID 21483)
-- Name: upgrade upgrade_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.upgrade
    ADD CONSTRAINT upgrade_pkey PRIMARY KEY (id);


--
-- TOC entry 5572 (class 2606 OID 21531)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: hearthis; Owner: segment
--

ALTER TABLE ONLY hearthis.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 5691 (class 2606 OID 49450)
-- Name: created created_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.created
    ADD CONSTRAINT created_pkey PRIMARY KEY (id);


--
-- TOC entry 5681 (class 2606 OID 49410)
-- Name: exception exception_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.exception
    ADD CONSTRAINT exception_pkey PRIMARY KEY (id);


--
-- TOC entry 5704 (class 2606 OID 49535)
-- Name: identifies identifies_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.identifies
    ADD CONSTRAINT identifies_pkey PRIMARY KEY (id);


--
-- TOC entry 5700 (class 2606 OID 49500)
-- Name: launch launch_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.launch
    ADD CONSTRAINT launch_pkey PRIMARY KEY (id);


--
-- TOC entry 5677 (class 2606 OID 49394)
-- Name: show_about show_about_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.show_about
    ADD CONSTRAINT show_about_pkey PRIMARY KEY (id);


--
-- TOC entry 5671 (class 2606 OID 49383)
-- Name: show_instructions show_instructions_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.show_instructions
    ADD CONSTRAINT show_instructions_pkey PRIMARY KEY (id);


--
-- TOC entry 5708 (class 2606 OID 49577)
-- Name: tracks tracks_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.tracks
    ADD CONSTRAINT tracks_pkey PRIMARY KEY (id);


--
-- TOC entry 5689 (class 2606 OID 49442)
-- Name: upgrade upgrade_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.upgrade
    ADD CONSTRAINT upgrade_pkey PRIMARY KEY (id);


--
-- TOC entry 5712 (class 2606 OID 49612)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: pdfdropletapp; Owner: segment
--

ALTER TABLE ONLY pdfdropletapp.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 5845 (class 2606 OID 427314)
-- Name: countryregioncitylu countryregioncitylu_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.countryregioncitylu
    ADD CONSTRAINT countryregioncitylu_db1_pkey PRIMARY KEY (loc_uid);


--
-- TOC entry 5761 (class 2606 OID 156729)
-- Name: languagecodes firstkey; Type: CONSTRAINT; Schema: public; Owner: silpgadmin
--

ALTER TABLE ONLY public.languagecodes
    ADD CONSTRAINT firstkey PRIMARY KEY (langid);


--
-- TOC entry 5941 (class 2606 OID 1988602)
-- Name: geography_city_centers geography_cities_pkey; Type: CONSTRAINT; Schema: public; Owner: silpgadmin
--

ALTER TABLE ONLY public.geography_city_centers
    ADD CONSTRAINT geography_cities_pkey PRIMARY KEY (geoid);


--
-- TOC entry 5939 (class 2606 OID 1988445)
-- Name: geography_regioncodes geography_regioncodes_pkey; Type: CONSTRAINT; Schema: public; Owner: silpgadmin
--

ALTER TABLE ONLY public.geography_regioncodes
    ADD CONSTRAINT geography_regioncodes_pkey PRIMARY KEY (code);


--
-- TOC entry 5812 (class 2606 OID 308614)
-- Name: ip2loc_sm_tab ip2loc_sm_tab_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.ip2loc_sm_tab
    ADD CONSTRAINT ip2loc_sm_tab_db1_pkey PRIMARY KEY (context_ip);


--
-- TOC entry 5664 (class 2606 OID 43390)
-- Name: ip2location ip2location_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.ip2location
    ADD CONSTRAINT ip2location_db1_pkey PRIMARY KEY (ip_from, ip_to);


--
-- TOC entry 5864 (class 2606 OID 751910)
-- Name: ip2location_as_of_2019_01_08 ip2location_new_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.ip2location_as_of_2019_01_08
    ADD CONSTRAINT ip2location_new_db1_pkey PRIMARY KEY (ip_from, ip_to);


--
-- TOC entry 5858 (class 2606 OID 751865)
-- Name: ip2location_up_to_2019_01_08 ip2location_up_to_2019_01_08_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.ip2location_up_to_2019_01_08
    ADD CONSTRAINT ip2location_up_to_2019_01_08_db1_pkey PRIMARY KEY (ip_from, ip_to);


--
-- TOC entry 5833 (class 2606 OID 424107)
-- Name: ipv42location ipv42location_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.ipv42location
    ADD CONSTRAINT ipv42location_db1_pkey PRIMARY KEY (ipv4_from, ipv4_to);


--
-- TOC entry 5840 (class 2606 OID 426582)
-- Name: ipv62location ipv62location_db1_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.ipv62location
    ADD CONSTRAINT ipv62location_db1_pkey PRIMARY KEY (ipv6_from, ipv6_to);


--
-- TOC entry 5830 (class 2606 OID 395521)
-- Name: used_languages used_languages_pkey; Type: CONSTRAINT; Schema: public; Owner: segment
--

ALTER TABLE ONLY public.used_languages
    ADD CONSTRAINT used_languages_pkey PRIMARY KEY (language_id);


--
-- TOC entry 5614 (class 1259 OID 479044)
-- Name: create_book_loc_uid_idx; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX create_book_loc_uid_idx ON bloomapp.create_book USING btree (location_uid);


--
-- TOC entry 5653 (class 1259 OID 479006)
-- Name: created_loc_uid_idx; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX created_loc_uid_idx ON bloomapp.created USING btree (location_uid);


--
-- TOC entry 5593 (class 1259 OID 383253)
-- Name: language_idx3; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX language_idx3 ON bloomapp.users USING btree (uilanguage);


--
-- TOC entry 5607 (class 1259 OID 479005)
-- Name: launch_loc_uid_idx; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX launch_loc_uid_idx ON bloomapp.launch USING btree (location_uid);


--
-- TOC entry 5608 (class 1259 OID 525163)
-- Name: launch_location_uid_and_user_id_idx; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX launch_location_uid_and_user_id_idx ON bloomapp.launch USING btree (user_id, location_uid);


--
-- TOC entry 5611 (class 1259 OID 525162)
-- Name: launch_user_id_idx; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX launch_user_id_idx ON bloomapp.launch USING btree (user_id);


--
-- TOC entry 5606 (class 1259 OID 516798)
-- Name: upload_book_success_url_idx; Type: INDEX; Schema: bloomapp; Owner: segment
--

CREATE INDEX upload_book_success_url_idx ON bloomapp.upload_book_success USING btree (url);


--
-- TOC entry 5900 (class 1259 OID 1858507)
-- Name: book_detail_book_instance_id_idx; Type: INDEX; Schema: bloomlibrary_test; Owner: segment
--

CREATE INDEX book_detail_book_instance_id_idx ON bloomlibrary_test.book_detail USING btree (book_instance_id);


--
-- TOC entry 5903 (class 1259 OID 1858517)
-- Name: download_book_book_idx; Type: INDEX; Schema: bloomlibrary_test; Owner: segment
--

CREATE INDEX download_book_book_idx ON bloomlibrary_test.download_book USING btree (book);


--
-- TOC entry 5696 (class 1259 OID 479077)
-- Name: app_installed_loc_uid_idx; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX app_installed_loc_uid_idx ON bloomreader.application_installed USING btree (location_uid);


--
-- TOC entry 5804 (class 1259 OID 720105)
-- Name: application_opened_loc_uid_idx; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX application_opened_loc_uid_idx ON bloomreader.application_opened USING btree (location_uid);


--
-- TOC entry 5780 (class 1259 OID 910911)
-- Name: audio_idx1; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX audio_idx1 ON bloomreader.pages_read USING btree (audio_pages);


--
-- TOC entry 5775 (class 1259 OID 1858503)
-- Name: book_or_shelf_opened_book_instance_id_idx; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX book_or_shelf_opened_book_instance_id_idx ON bloomreader.book_or_shelf_opened USING btree (book_instance_id);


--
-- TOC entry 5781 (class 1259 OID 910912)
-- Name: context_idx1; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX context_idx1 ON bloomreader.pages_read USING btree (context_ip);


--
-- TOC entry 5782 (class 1259 OID 231557)
-- Name: language_idx1; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX language_idx1 ON bloomreader.pages_read USING btree (content_lang);


--
-- TOC entry 5783 (class 1259 OID 910913)
-- Name: lastpage_idx1; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX lastpage_idx1 ON bloomreader.pages_read USING btree (last_numbered_page_read);


--
-- TOC entry 5784 (class 1259 OID 1476330)
-- Name: pages_read_branding_project_name_idx; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX pages_read_branding_project_name_idx ON bloomreader.pages_read USING btree (branding_project_name);


--
-- TOC entry 5785 (class 1259 OID 720104)
-- Name: pages_read_loc_uid_idx; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX pages_read_loc_uid_idx ON bloomreader.pages_read USING btree (location_uid);


--
-- TOC entry 5788 (class 1259 OID 231558)
-- Name: title_idx1; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX title_idx1 ON bloomreader.pages_read USING btree (lower(title));


--
-- TOC entry 5773 (class 1259 OID 215580)
-- Name: title_idx2; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX title_idx2 ON bloomreader.questions_correct USING btree (lower(title));


--
-- TOC entry 5774 (class 1259 OID 910914)
-- Name: title_idx4; Type: INDEX; Schema: bloomreader; Owner: segment
--

CREATE INDEX title_idx4 ON bloomreader.questions_correct USING btree (lower(title));


--
-- TOC entry 5807 (class 1259 OID 720110)
-- Name: application_opened_loc_uid_idx; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX application_opened_loc_uid_idx ON bloomreaderbeta.application_opened USING btree (location_uid);


--
-- TOC entry 5789 (class 1259 OID 256015)
-- Name: audio_idx2; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX audio_idx2 ON bloomreaderbeta.pages_read USING btree (audio_pages);


--
-- TOC entry 5790 (class 1259 OID 256016)
-- Name: context_idx2; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX context_idx2 ON bloomreaderbeta.pages_read USING btree (context_ip);


--
-- TOC entry 5791 (class 1259 OID 231571)
-- Name: language_idx1; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX language_idx1 ON bloomreaderbeta.pages_read USING btree (content_lang);


--
-- TOC entry 5792 (class 1259 OID 1476326)
-- Name: pages_read_branding_project_name_idx; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX pages_read_branding_project_name_idx ON bloomreaderbeta.pages_read USING btree (branding_project_name);


--
-- TOC entry 5793 (class 1259 OID 720109)
-- Name: pages_read_loc_uid_idx; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX pages_read_loc_uid_idx ON bloomreaderbeta.pages_read USING btree (location_uid);


--
-- TOC entry 5796 (class 1259 OID 231572)
-- Name: title_idx1; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX title_idx1 ON bloomreaderbeta.pages_read USING btree (lower(title));


--
-- TOC entry 5770 (class 1259 OID 215547)
-- Name: title_idx2; Type: INDEX; Schema: bloomreaderbeta; Owner: segment
--

CREATE INDEX title_idx2 ON bloomreaderbeta.questions_correct USING btree (lower(title));


--
-- TOC entry 5721 (class 1259 OID 256002)
-- Name: audio_idx2; Type: INDEX; Schema: bloomreadertest; Owner: segment
--

CREATE INDEX audio_idx2 ON bloomreadertest.pages_read USING btree (audio_pages);


--
-- TOC entry 5722 (class 1259 OID 256003)
-- Name: context_idx2; Type: INDEX; Schema: bloomreadertest; Owner: segment
--

CREATE INDEX context_idx2 ON bloomreadertest.pages_read USING btree (context_ip);


--
-- TOC entry 5723 (class 1259 OID 213874)
-- Name: language_idx1; Type: INDEX; Schema: bloomreadertest; Owner: segment
--

CREATE INDEX language_idx1 ON bloomreadertest.pages_read USING btree (content_lang);


--
-- TOC entry 5724 (class 1259 OID 256041)
-- Name: lastpage_idx2; Type: INDEX; Schema: bloomreadertest; Owner: segment
--

CREATE INDEX lastpage_idx2 ON bloomreadertest.pages_read USING btree (last_numbered_page_read);


--
-- TOC entry 5727 (class 1259 OID 212445)
-- Name: title_idx1; Type: INDEX; Schema: bloomreadertest; Owner: segment
--

CREATE INDEX title_idx1 ON bloomreadertest.pages_read USING btree (lower(title));


--
-- TOC entry 5799 (class 1259 OID 232296)
-- Name: title_idx2; Type: INDEX; Schema: bloomreadertest; Owner: segment
--

CREATE INDEX title_idx2 ON bloomreadertest.questions_correct USING btree (lower(title));


--
-- TOC entry 5944 (class 1259 OID 2016069)
-- Name: book_instance_id; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX book_instance_id ON common.mv_pages_read USING btree (book_instance_id);


--
-- TOC entry 5945 (class 1259 OID 2016076)
-- Name: book_instance_id_and_date_local; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX book_instance_id_and_date_local ON common.mv_pages_read USING btree (book_instance_id, date_local);


--
-- TOC entry 5946 (class 1259 OID 2016074)
-- Name: book_instance_id_and_source; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX book_instance_id_and_source ON common.mv_pages_read USING btree (book_instance_id, source);


--
-- TOC entry 5947 (class 1259 OID 2016075)
-- Name: book_instance_id_and_source_and_date_local; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX book_instance_id_and_source_and_date_local ON common.mv_pages_read USING btree (book_instance_id, source, date_local);


--
-- TOC entry 5950 (class 1259 OID 2024466)
-- Name: idx_mvcomp_book_instance_id; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX idx_mvcomp_book_instance_id ON common.mv_comprehension USING btree (book_instance_id);


--
-- TOC entry 5951 (class 1259 OID 2024469)
-- Name: idx_mvcomp_book_instance_id_and_date_local; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX idx_mvcomp_book_instance_id_and_date_local ON common.mv_comprehension USING btree (book_instance_id, date_local);


--
-- TOC entry 5952 (class 1259 OID 2024467)
-- Name: idx_mvcomp_book_instance_id_and_source; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX idx_mvcomp_book_instance_id_and_source ON common.mv_comprehension USING btree (book_instance_id, source);


--
-- TOC entry 5953 (class 1259 OID 2024468)
-- Name: idx_mvcomp_book_instance_id_and_source_and_date_local; Type: INDEX; Schema: common; Owner: silpgadmin
--

CREATE INDEX idx_mvcomp_book_instance_id_and_source_and_date_local ON common.mv_comprehension USING btree (book_instance_id, source, date_local);


--
-- TOC entry 5831 (class 1259 OID 424108)
-- Name: country_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX country_idx1 ON public.ipv42location USING btree (country_name);


--
-- TOC entry 5838 (class 1259 OID 426583)
-- Name: country_idx2; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX country_idx2 ON public.ipv62location USING btree (country_name);


--
-- TOC entry 5662 (class 1259 OID 256009)
-- Name: country_idx3; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX country_idx3 ON public.ip2location USING btree (country_name);


--
-- TOC entry 5810 (class 1259 OID 308615)
-- Name: country_idx4; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX country_idx4 ON public.ip2loc_sm_tab USING btree (country_name);


--
-- TOC entry 5846 (class 1259 OID 427315)
-- Name: crc_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX crc_idx1 ON public.countryregioncitylu USING btree (country_name, region, city);


--
-- TOC entry 5862 (class 1259 OID 751911)
-- Name: ip2location_new_country_idx3; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_new_country_idx3 ON public.ip2location_as_of_2019_01_08 USING btree (country_name);


--
-- TOC entry 5865 (class 1259 OID 751913)
-- Name: ip2location_new_ipfrom_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_new_ipfrom_idx1 ON public.ip2location_as_of_2019_01_08 USING btree (ip_from);


--
-- TOC entry 5866 (class 1259 OID 751914)
-- Name: ip2location_new_ipto_idx2; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_new_ipto_idx2 ON public.ip2location_as_of_2019_01_08 USING btree (ip_to);


--
-- TOC entry 5867 (class 1259 OID 751912)
-- Name: ip2location_new_range_gist; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_new_range_gist ON public.ip2location_as_of_2019_01_08 USING gist (box(point((ip_from)::double precision, (ip_from)::double precision), point((ip_to)::double precision, (ip_to)::double precision)));


--
-- TOC entry 5665 (class 1259 OID 43965)
-- Name: ip2location_range_gist; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_range_gist ON public.ip2location USING gist (box(point((ip_from)::double precision, (ip_from)::double precision), point((ip_to)::double precision, (ip_to)::double precision)));


--
-- TOC entry 5856 (class 1259 OID 751866)
-- Name: ip2location_up_to_2019_01_08_country_idx3; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_up_to_2019_01_08_country_idx3 ON public.ip2location_up_to_2019_01_08 USING btree (country_name);


--
-- TOC entry 5859 (class 1259 OID 751868)
-- Name: ip2location_up_to_2019_01_08_ipfrom_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_up_to_2019_01_08_ipfrom_idx1 ON public.ip2location_up_to_2019_01_08 USING btree (ip_from);


--
-- TOC entry 5860 (class 1259 OID 751869)
-- Name: ip2location_up_to_2019_01_08_ipto_idx2; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_up_to_2019_01_08_ipto_idx2 ON public.ip2location_up_to_2019_01_08 USING btree (ip_to);


--
-- TOC entry 5861 (class 1259 OID 751867)
-- Name: ip2location_up_to_2019_01_08_range_gist; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip2location_up_to_2019_01_08_range_gist ON public.ip2location_up_to_2019_01_08 USING gist (box(point((ip_from)::double precision, (ip_from)::double precision), point((ip_to)::double precision, (ip_to)::double precision)));


--
-- TOC entry 5813 (class 1259 OID 308616)
-- Name: ip_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ip_idx1 ON public.ip2loc_sm_tab USING btree (context_ip);


--
-- TOC entry 5666 (class 1259 OID 256004)
-- Name: ipfrom_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipfrom_idx1 ON public.ip2location USING btree (ip_from);


--
-- TOC entry 5667 (class 1259 OID 256005)
-- Name: ipto_idx2; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipto_idx2 ON public.ip2location USING btree (ip_to);


--
-- TOC entry 5834 (class 1259 OID 424109)
-- Name: ipv42location_range_gist; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv42location_range_gist ON public.ipv42location USING gist (box(point((ipv4_from)::double precision, (ipv4_from)::double precision), point((ipv4_to)::double precision, (ipv4_to)::double precision)));


--
-- TOC entry 5835 (class 1259 OID 427165)
-- Name: ipv4_crc_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv4_crc_idx1 ON public.ipv42location USING btree (country_name, region, city);


--
-- TOC entry 5836 (class 1259 OID 424110)
-- Name: ipv4from_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv4from_idx1 ON public.ipv42location USING btree (ipv4_from);


--
-- TOC entry 5837 (class 1259 OID 424111)
-- Name: ipv4to_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv4to_idx1 ON public.ipv42location USING btree (ipv4_to);


--
-- TOC entry 5841 (class 1259 OID 426584)
-- Name: ipv62location_range_gist; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv62location_range_gist ON public.ipv62location USING gist (box(point((ipv6_from)::double precision, (ipv6_from)::double precision), point((ipv6_to)::double precision, (ipv6_to)::double precision)));


--
-- TOC entry 5842 (class 1259 OID 426585)
-- Name: ipv6from_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv6from_idx1 ON public.ipv62location USING btree (ipv6_from);


--
-- TOC entry 5843 (class 1259 OID 426586)
-- Name: ipv6to_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX ipv6to_idx1 ON public.ipv62location USING btree (ipv6_to);


--
-- TOC entry 5762 (class 1259 OID 1476438)
-- Name: lang2id_langid_idx; Type: INDEX; Schema: public; Owner: silpgadmin
--

CREATE INDEX lang2id_langid_idx ON public.languagecodes USING btree (langid2, langid);


--
-- TOC entry 5763 (class 1259 OID 1476448)
-- Name: lang2id_langid_idx2; Type: INDEX; Schema: public; Owner: silpgadmin
--

CREATE INDEX lang2id_langid_idx2 ON public.languagecodes USING btree ((COALESCE(langid2, langid)));


--
-- TOC entry 5828 (class 1259 OID 395522)
-- Name: language_idx1; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX language_idx1 ON public.used_languages USING btree (language_id);


--
-- TOC entry 5764 (class 1259 OID 213875)
-- Name: language_idx2; Type: INDEX; Schema: public; Owner: silpgadmin
--

CREATE INDEX language_idx2 ON public.languagecodes USING btree (langid);


--
-- TOC entry 5765 (class 1259 OID 213876)
-- Name: language_idx3; Type: INDEX; Schema: public; Owner: silpgadmin
--

CREATE INDEX language_idx3 ON public.languagecodes USING btree (langid2);


--
-- TOC entry 5847 (class 1259 OID 479001)
-- Name: loc_uid_idx; Type: INDEX; Schema: public; Owner: segment
--

CREATE INDEX loc_uid_idx ON public.countryregioncitylu USING btree (loc_uid);


--
-- TOC entry 5977 (class 2620 OID 710337)
-- Name: change_content_languages insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.change_content_languages FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5979 (class 2620 OID 710359)
-- Name: change_page_layout insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.change_page_layout FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5971 (class 2620 OID 710379)
-- Name: change_picture insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.change_picture FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 6012 (class 2620 OID 710392)
-- Name: change_video insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.change_video FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5969 (class 2620 OID 710400)
-- Name: create_bloom_pack insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.create_bloom_pack FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5965 (class 2620 OID 321851)
-- Name: create_book insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.create_book FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5967 (class 2620 OID 710417)
-- Name: create_new_vernacular_collection insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.create_new_vernacular_collection FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5982 (class 2620 OID 710433)
-- Name: created insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.created FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5975 (class 2620 OID 710434)
-- Name: created_new_source_collection insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.created_new_source_collection FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5954 (class 2620 OID 710451)
-- Name: delete_page insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.delete_page FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5963 (class 2620 OID 321638)
-- Name: launch insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.launch FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5973 (class 2620 OID 719921)
-- Name: print_pdf insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.print_pdf FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5959 (class 2620 OID 719799)
-- Name: register insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.register FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5961 (class 2620 OID 719896)
-- Name: upload_book_success insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.upload_book_success FOR EACH ROW EXECUTE PROCEDURE public.insert_ip_country_bloom_fctn();


--
-- TOC entry 5958 (class 2620 OID 834818)
-- Name: users insert_country_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomapp.users FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5956 (class 2620 OID 396823)
-- Name: users insert_language_row; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_language_row BEFORE INSERT ON bloomapp.users FOR EACH ROW EXECUTE PROCEDURE public.insert_language_row_fctn();


--
-- TOC entry 5978 (class 2620 OID 710341)
-- Name: change_content_languages insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.change_content_languages FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_change_content_languages_fctn();


--
-- TOC entry 5980 (class 2620 OID 710364)
-- Name: change_page_layout insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.change_page_layout FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_change_page_layout_fctn();


--
-- TOC entry 5972 (class 2620 OID 710384)
-- Name: change_picture insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.change_picture FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_change_picture_fctn();


--
-- TOC entry 6013 (class 2620 OID 710394)
-- Name: change_video insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.change_video FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_change_video_fctn();


--
-- TOC entry 5970 (class 2620 OID 710405)
-- Name: create_bloom_pack insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.create_bloom_pack FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_create_bloom_pack_fctn();


--
-- TOC entry 5966 (class 2620 OID 479045)
-- Name: create_book insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.create_book FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_create_book_fctn();


--
-- TOC entry 5968 (class 2620 OID 710419)
-- Name: create_new_vernacular_collection insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.create_new_vernacular_collection FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_create_new_vernacular_collection_fctn();


--
-- TOC entry 5981 (class 2620 OID 479029)
-- Name: created insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.created FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_created_fctn();


--
-- TOC entry 5976 (class 2620 OID 710439)
-- Name: created_new_source_collection insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.created_new_source_collection FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_created_new_source_collection_fctn();


--
-- TOC entry 5955 (class 2620 OID 710453)
-- Name: delete_page insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.delete_page FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_delete_page_fctn();


--
-- TOC entry 5964 (class 2620 OID 478972)
-- Name: launch insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.launch FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_launch_fctn();


--
-- TOC entry 5974 (class 2620 OID 719926)
-- Name: print_pdf insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.print_pdf FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_print_pdf_fctn();


--
-- TOC entry 5960 (class 2620 OID 719804)
-- Name: register insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.register FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_register_fctn();


--
-- TOC entry 5962 (class 2620 OID 719898)
-- Name: upload_book_success insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.upload_book_success FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_upload_book_success_fctn();


--
-- TOC entry 5957 (class 2620 OID 719978)
-- Name: users insert_location_uid; Type: TRIGGER; Schema: bloomapp; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomapp.users FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_users_fctn();


--
-- TOC entry 6024 (class 2620 OID 1969897)
-- Name: book_detail insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.book_detail FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6020 (class 2620 OID 1969895)
-- Name: book_or_shelf_opened insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6030 (class 2620 OID 2023603)
-- Name: comprehension insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.comprehension FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5986 (class 2620 OID 1969896)
-- Name: download_book insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.download_book FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6028 (class 2620 OID 1979686)
-- Name: open_collection insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.open_collection FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6022 (class 2620 OID 1969883)
-- Name: pages_read insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.pages_read FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6026 (class 2620 OID 1979688)
-- Name: search_failed insert_country_row; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomlibrary_org.search_failed FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6025 (class 2620 OID 1970311)
-- Name: book_detail insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.book_detail FOR EACH ROW EXECUTE PROCEDURE public.bl_find_location_uid_4_book_detail_fctn();


--
-- TOC entry 6021 (class 2620 OID 1970312)
-- Name: book_or_shelf_opened insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.bl_find_location_uid_4_book_or_shelf_opened_fctn();


--
-- TOC entry 6031 (class 2620 OID 2023709)
-- Name: comprehension insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.comprehension FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_fctn();


--
-- TOC entry 5987 (class 2620 OID 1970313)
-- Name: download_book insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.download_book FOR EACH ROW EXECUTE PROCEDURE public.bl_find_location_uid_4_download_book_fctn();


--
-- TOC entry 6029 (class 2620 OID 1979687)
-- Name: open_collection insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.open_collection FOR EACH ROW EXECUTE PROCEDURE public.bl_find_location_uid_4_open_collection_fctn();


--
-- TOC entry 6023 (class 2620 OID 1970040)
-- Name: pages_read insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.pages_read FOR EACH ROW EXECUTE PROCEDURE public.bl_find_location_uid_4_pages_read_fctn();


--
-- TOC entry 6027 (class 2620 OID 1979689)
-- Name: search_failed insert_location_uid; Type: TRIGGER; Schema: bloomlibrary_org; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomlibrary_org.search_failed FOR EACH ROW EXECUTE PROCEDURE public.bl_find_location_uid_4_search_failed_fctn();


--
-- TOC entry 5984 (class 2620 OID 1237770)
-- Name: application_installed insert_country_row; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreader.application_installed FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6009 (class 2620 OID 1237771)
-- Name: application_opened insert_country_row; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreader.application_opened FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5998 (class 2620 OID 1237772)
-- Name: book_or_shelf_opened insert_country_row; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreader.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6018 (class 2620 OID 1903367)
-- Name: comprehension insert_country_row; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreader.comprehension FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6000 (class 2620 OID 1237773)
-- Name: pages_read insert_country_row; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreader.pages_read FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5996 (class 2620 OID 1237774)
-- Name: questions_correct insert_country_row; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreader.questions_correct FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5983 (class 2620 OID 479076)
-- Name: application_installed insert_location_uid; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreader.application_installed FOR EACH ROW EXECUTE PROCEDURE public.find_location_uid_4_app_installed_fctn();


--
-- TOC entry 6008 (class 2620 OID 720045)
-- Name: application_opened insert_location_uid; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreader.application_opened FOR EACH ROW EXECUTE PROCEDURE public.br_find_location_uid_4_application_opened_fctn();


--
-- TOC entry 5997 (class 2620 OID 751716)
-- Name: book_or_shelf_opened insert_location_uid; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreader.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.br_find_location_uid_4_book_or_shelf_opened_fctn();


--
-- TOC entry 6019 (class 2620 OID 1903369)
-- Name: comprehension insert_location_uid; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreader.comprehension FOR EACH ROW EXECUTE PROCEDURE public.br_find_location_uid_4_comprehension_fctn();


--
-- TOC entry 5999 (class 2620 OID 720115)
-- Name: pages_read insert_location_uid; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreader.pages_read FOR EACH ROW EXECUTE PROCEDURE public.br_find_location_uid_4_pages_read_fctn();


--
-- TOC entry 5995 (class 2620 OID 751794)
-- Name: questions_correct insert_location_uid; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreader.questions_correct FOR EACH ROW EXECUTE PROCEDURE public.br_find_location_uid_4_questions_correct_fctn();


--
-- TOC entry 6001 (class 2620 OID 1957693)
-- Name: pages_read refresh_mv_pages_read; Type: TRIGGER; Schema: bloomreader; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_pages_read AFTER INSERT ON bloomreader.pages_read DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_pages_read();

ALTER TABLE bloomreader.pages_read DISABLE TRIGGER refresh_mv_pages_read;


--
-- TOC entry 5989 (class 2620 OID 1237196)
-- Name: application_installed insert_country_row; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreaderbeta.application_installed FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6010 (class 2620 OID 1237195)
-- Name: application_opened insert_country_row; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreaderbeta.application_opened FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5991 (class 2620 OID 1237209)
-- Name: book_or_shelf_opened insert_country_row; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreaderbeta.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6015 (class 2620 OID 1903301)
-- Name: comprehension insert_country_row; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreaderbeta.comprehension FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 6003 (class 2620 OID 1237214)
-- Name: pages_read insert_country_row; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreaderbeta.pages_read FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5993 (class 2620 OID 1237215)
-- Name: questions_correct insert_country_row; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_country_row BEFORE INSERT ON bloomreaderbeta.questions_correct FOR EACH ROW EXECUTE PROCEDURE public.insert_context_ip_country_bloom_fctn();


--
-- TOC entry 5988 (class 2620 OID 720196)
-- Name: application_installed insert_location_uid; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreaderbeta.application_installed FOR EACH ROW EXECUTE PROCEDURE public.brb_find_location_uid_4_app_installed_fctn();


--
-- TOC entry 6011 (class 2620 OID 1237210)
-- Name: application_opened insert_location_uid; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreaderbeta.application_opened FOR EACH ROW EXECUTE PROCEDURE public.brb_find_location_uid_4_application_opened_fctn();


--
-- TOC entry 5990 (class 2620 OID 751745)
-- Name: book_or_shelf_opened insert_location_uid; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreaderbeta.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.brb_find_location_uid_4_book_or_shelf_opened_fctn();


--
-- TOC entry 6016 (class 2620 OID 1903303)
-- Name: comprehension insert_location_uid; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreaderbeta.comprehension FOR EACH ROW EXECUTE PROCEDURE public.brb_find_location_uid_4_comprehension_fctn();


--
-- TOC entry 6002 (class 2620 OID 720145)
-- Name: pages_read insert_location_uid; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreaderbeta.pages_read FOR EACH ROW EXECUTE PROCEDURE public.brb_find_location_uid_4_pages_read_fctn();


--
-- TOC entry 5992 (class 2620 OID 751798)
-- Name: questions_correct insert_location_uid; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE TRIGGER insert_location_uid BEFORE INSERT ON bloomreaderbeta.questions_correct FOR EACH ROW EXECUTE PROCEDURE public.brb_find_location_uid_4_questions_correct_fctn();


--
-- TOC entry 6017 (class 2620 OID 1957789)
-- Name: comprehension refresh_mv_comprehension; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_comprehension AFTER INSERT ON bloomreaderbeta.comprehension DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_comprehension();

ALTER TABLE bloomreaderbeta.comprehension DISABLE TRIGGER refresh_mv_comprehension;


--
-- TOC entry 5994 (class 2620 OID 1957709)
-- Name: questions_correct refresh_mv_comprehension; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_comprehension AFTER INSERT ON bloomreaderbeta.questions_correct DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_comprehension();

ALTER TABLE bloomreaderbeta.questions_correct DISABLE TRIGGER refresh_mv_comprehension;


--
-- TOC entry 6004 (class 2620 OID 1957791)
-- Name: pages_read refresh_mv_pages_read; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_pages_read AFTER INSERT ON bloomreaderbeta.pages_read DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_pages_read();

ALTER TABLE bloomreaderbeta.pages_read DISABLE TRIGGER refresh_mv_pages_read;


--
-- TOC entry 6005 (class 2620 OID 1957814)
-- Name: pages_read refresh_mv_reading_perbook_events; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_reading_perbook_events AFTER INSERT ON bloomreaderbeta.pages_read DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_reading_perbook_events();

ALTER TABLE bloomreaderbeta.pages_read DISABLE TRIGGER refresh_mv_reading_perbook_events;


--
-- TOC entry 6006 (class 2620 OID 1957816)
-- Name: pages_read refresh_mv_reading_perday_events; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_reading_perday_events AFTER INSERT ON bloomreaderbeta.pages_read DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_reading_perday_events();

ALTER TABLE bloomreaderbeta.pages_read DISABLE TRIGGER refresh_mv_reading_perday_events;


--
-- TOC entry 6007 (class 2620 OID 1957818)
-- Name: pages_read refresh_mv_reading_perday_events_by_branding_and_country; Type: TRIGGER; Schema: bloomreaderbeta; Owner: segment
--

CREATE CONSTRAINT TRIGGER refresh_mv_reading_perday_events_by_branding_and_country AFTER INSERT ON bloomreaderbeta.pages_read DEFERRABLE INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE common.refresh_mv_reading_perday_events_by_branding_and_country();

ALTER TABLE bloomreaderbeta.pages_read DISABLE TRIGGER refresh_mv_reading_perday_events_by_branding_and_country;


--
-- TOC entry 6014 (class 2620 OID 1994828)
-- Name: book_or_shelf_opened insert_location_data; Type: TRIGGER; Schema: bloomreadertest; Owner: segment
--

CREATE TRIGGER insert_location_data BEFORE INSERT ON bloomreadertest.book_or_shelf_opened FOR EACH ROW EXECUTE PROCEDURE public.find_closest_city_and_location_uid_fctn();


--
-- TOC entry 5985 (class 2620 OID 1994829)
-- Name: pages_read insert_location_data; Type: TRIGGER; Schema: bloomreadertest; Owner: segment
--

CREATE TRIGGER insert_location_data BEFORE INSERT ON bloomreadertest.pages_read FOR EACH ROW EXECUTE PROCEDURE public.find_closest_city_and_location_uid_fctn();


--
-- TOC entry 6265 (class 0 OID 0)
-- Dependencies: 6264
-- Name: DATABASE bloomsegment; Type: ACL; Schema: -; Owner: silpgadmin
--

GRANT ALL ON DATABASE bloomsegment TO segment;
GRANT ALL ON DATABASE bloomsegment TO readbloom;
GRANT CONNECT ON DATABASE bloomsegment TO readbloomtester;
GRANT CONNECT ON DATABASE bloomsegment TO bloomappuser;
GRANT CONNECT ON DATABASE bloomsegment TO bloomgtuser;
GRANT CONNECT ON DATABASE bloomsegment TO bloomreaderuser;
GRANT CONNECT ON DATABASE bloomsegment TO stats;


--
-- TOC entry 6266 (class 0 OID 0)
-- Dependencies: 91
-- Name: SCHEMA bloomapp; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA bloomapp TO readbloom;
GRANT ALL ON SCHEMA bloomapp TO readbloomtester;
GRANT USAGE ON SCHEMA bloomapp TO bloomappuser;
GRANT USAGE ON SCHEMA bloomapp TO bloompnguser;


--
-- TOC entry 6267 (class 0 OID 0)
-- Dependencies: 92
-- Name: SCHEMA bloomlibrary_org; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA bloomlibrary_org TO stats;


--
-- TOC entry 6268 (class 0 OID 0)
-- Dependencies: 64
-- Name: SCHEMA bloomlibrary_test; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA bloomlibrary_test TO stats;


--
-- TOC entry 6269 (class 0 OID 0)
-- Dependencies: 65
-- Name: SCHEMA bloomreader; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA bloomreader TO bloomgtuser;
GRANT USAGE ON SCHEMA bloomreader TO bloomreaderuser;
GRANT USAGE ON SCHEMA bloomreader TO readbloom;
GRANT USAGE ON SCHEMA bloomreader TO silpgadmin;
GRANT USAGE ON SCHEMA bloomreader TO stats;


--
-- TOC entry 6270 (class 0 OID 0)
-- Dependencies: 93
-- Name: SCHEMA bloomreaderbeta; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA bloomreaderbeta TO readbloom;


--
-- TOC entry 6271 (class 0 OID 0)
-- Dependencies: 22
-- Name: SCHEMA bloomreadertest; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA bloomreadertest TO readbloomtester;
GRANT USAGE ON SCHEMA bloomreadertest TO silpgadmin;


--
-- TOC entry 6272 (class 0 OID 0)
-- Dependencies: 61
-- Name: SCHEMA common; Type: ACL; Schema: -; Owner: silpgadmin
--

GRANT USAGE ON SCHEMA common TO stats;
GRANT USAGE ON SCHEMA common TO segment;


--
-- TOC entry 6273 (class 0 OID 0)
-- Dependencies: 78
-- Name: SCHEMA hearthis; Type: ACL; Schema: -; Owner: segment
--

GRANT USAGE ON SCHEMA hearthis TO readhearthis;


--
-- TOC entry 6274 (class 0 OID 0)
-- Dependencies: 14
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: azure_superuser
--

GRANT USAGE ON SCHEMA public TO readbloom;
GRANT USAGE ON SCHEMA public TO stats;


--
-- TOC entry 6278 (class 0 OID 0)
-- Dependencies: 1336
-- Name: FUNCTION refresh_mv_comprehension(); Type: ACL; Schema: common; Owner: silpgadmin
--

REVOKE ALL ON FUNCTION common.refresh_mv_comprehension() FROM PUBLIC;
GRANT ALL ON FUNCTION common.refresh_mv_comprehension() TO segment;


--
-- TOC entry 6279 (class 0 OID 0)
-- Dependencies: 1339
-- Name: FUNCTION refresh_mv_pages_read(); Type: ACL; Schema: common; Owner: silpgadmin
--

REVOKE ALL ON FUNCTION common.refresh_mv_pages_read() FROM PUBLIC;
GRANT ALL ON FUNCTION common.refresh_mv_pages_read() TO segment;


--
-- TOC entry 6280 (class 0 OID 0)
-- Dependencies: 1342
-- Name: FUNCTION refresh_mv_reading_perbook_events(); Type: ACL; Schema: common; Owner: silpgadmin
--

REVOKE ALL ON FUNCTION common.refresh_mv_reading_perbook_events() FROM PUBLIC;
GRANT ALL ON FUNCTION common.refresh_mv_reading_perbook_events() TO segment;


--
-- TOC entry 6281 (class 0 OID 0)
-- Dependencies: 1345
-- Name: FUNCTION refresh_mv_reading_perday_events(); Type: ACL; Schema: common; Owner: silpgadmin
--

REVOKE ALL ON FUNCTION common.refresh_mv_reading_perday_events() FROM PUBLIC;
GRANT ALL ON FUNCTION common.refresh_mv_reading_perday_events() TO segment;


--
-- TOC entry 6282 (class 0 OID 0)
-- Dependencies: 1332
-- Name: FUNCTION refresh_mv_reading_perday_events_by_branding_and_country(); Type: ACL; Schema: common; Owner: silpgadmin
--

REVOKE ALL ON FUNCTION common.refresh_mv_reading_perday_events_by_branding_and_country() FROM PUBLIC;
GRANT ALL ON FUNCTION common.refresh_mv_reading_perday_events_by_branding_and_country() TO segment;


--
-- TOC entry 6283 (class 0 OID 0)
-- Dependencies: 827
-- Name: FUNCTION insert_language_row_fctn(); Type: ACL; Schema: public; Owner: silpgadmin
--

GRANT ALL ON FUNCTION public.insert_language_row_fctn() TO segment;


--
-- TOC entry 6284 (class 0 OID 0)
-- Dependencies: 300
-- Name: TABLE create_book; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.create_book TO readbloom;
GRANT SELECT ON TABLE bloomapp.create_book TO bloomappuser;


--
-- TOC entry 6285 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.id; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(id) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6286 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.received_at; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(received_at) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6287 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.uuid_ts; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(uuid_ts) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6288 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.book_id; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(book_id) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6289 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.browser; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(browser) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6290 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.category; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(category) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6291 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.channel; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(channel) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6292 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.command_line; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(command_line) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6293 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.context_library_name; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(context_library_name) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6294 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.context_library_version; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(context_library_version) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6295 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.country; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(country) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6296 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.culture; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(culture) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6297 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.current_directory; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(current_directory) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6298 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.desktop_environment; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(desktop_environment) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6299 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.dot_net_version; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(dot_net_version) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6300 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.event; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(event) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6301 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.event_text; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(event_text) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6302 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.full_version; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(full_version) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6303 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.ip; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(ip) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6304 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.original_timestamp; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(original_timestamp) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6305 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.osversion; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(osversion) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6306 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.sent_at; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(sent_at) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6307 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book."timestamp"; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT("timestamp") ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6308 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.version; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(version) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6309 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.working_set; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(working_set) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6310 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.branding_project_name; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(branding_project_name) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6311 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.collection_country; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(collection_country) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6312 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.language1_iso639_code; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(language1_iso639_code) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6313 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.language1_iso639_name; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(language1_iso639_name) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6314 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.language2_iso639_code; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(language2_iso639_code) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6315 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.language3_iso639_code; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(language3_iso639_code) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6316 (class 0 OID 0)
-- Dependencies: 300
-- Name: COLUMN create_book.location_uid; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT(location_uid) ON TABLE bloomapp.create_book TO bloompnguser;


--
-- TOC entry 6317 (class 0 OID 0)
-- Dependencies: 408
-- Name: TABLE countryregioncitylu; Type: ACL; Schema: public; Owner: segment
--

GRANT ALL ON TABLE public.countryregioncitylu TO bloomappuser;
GRANT ALL ON TABLE public.countryregioncitylu TO readbloom;
GRANT ALL ON TABLE public.countryregioncitylu TO readbloomtester;
GRANT ALL ON TABLE public.countryregioncitylu TO silpgadmin;


--
-- TOC entry 6318 (class 0 OID 0)
-- Dependencies: 490
-- Name: TABLE bookcreatedforcountrymap; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.bookcreatedforcountrymap TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.bookcreatedforcountrymap TO readbloom;


--
-- TOC entry 6319 (class 0 OID 0)
-- Dependencies: 489
-- Name: TABLE bookscreatedalltime; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.bookscreatedalltime TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.bookscreatedalltime TO readbloom;


--
-- TOC entry 6320 (class 0 OID 0)
-- Dependencies: 297
-- Name: TABLE upload_book_success; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.upload_book_success TO readbloom;
GRANT ALL ON TABLE bloomapp.upload_book_success TO readbloomtester;
GRANT SELECT ON TABLE bloomapp.upload_book_success TO bloomappuser;


--
-- TOC entry 6321 (class 0 OID 0)
-- Dependencies: 491
-- Name: TABLE booksuploadedalltime; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.booksuploadedalltime TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.booksuploadedalltime TO readbloom;


--
-- TOC entry 6322 (class 0 OID 0)
-- Dependencies: 315
-- Name: TABLE change_content_languages; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.change_content_languages TO readbloom;
GRANT SELECT ON TABLE bloomapp.change_content_languages TO bloomappuser;


--
-- TOC entry 6323 (class 0 OID 0)
-- Dependencies: 318
-- Name: TABLE change_page_layout; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.change_page_layout TO readbloom;
GRANT SELECT ON TABLE bloomapp.change_page_layout TO bloomappuser;


--
-- TOC entry 6324 (class 0 OID 0)
-- Dependencies: 304
-- Name: TABLE change_picture; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.change_picture TO readbloom;
GRANT SELECT ON TABLE bloomapp.change_picture TO bloomappuser;


--
-- TOC entry 6325 (class 0 OID 0)
-- Dependencies: 393
-- Name: TABLE change_video; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.change_video TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.change_video TO readbloom;


--
-- TOC entry 6326 (class 0 OID 0)
-- Dependencies: 292
-- Name: TABLE users; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.users TO readbloom;
GRANT SELECT ON TABLE bloomapp.users TO bloomappuser;


--
-- TOC entry 6327 (class 0 OID 0)
-- Dependencies: 399
-- Name: TABLE context_languages_for_users; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT ALL ON TABLE bloomapp.context_languages_for_users TO bloomappuser;
GRANT ALL ON TABLE bloomapp.context_languages_for_users TO readbloom;
GRANT ALL ON TABLE bloomapp.context_languages_for_users TO readbloomtester;


--
-- TOC entry 6328 (class 0 OID 0)
-- Dependencies: 303
-- Name: TABLE create_bloom_pack; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.create_bloom_pack TO readbloom;
GRANT SELECT ON TABLE bloomapp.create_bloom_pack TO bloomappuser;


--
-- TOC entry 6329 (class 0 OID 0)
-- Dependencies: 301
-- Name: TABLE create_new_vernacular_collection; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.create_new_vernacular_collection TO readbloom;
GRANT SELECT ON TABLE bloomapp.create_new_vernacular_collection TO bloomappuser;


--
-- TOC entry 6330 (class 0 OID 0)
-- Dependencies: 319
-- Name: TABLE created; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.created TO readbloom;
GRANT SELECT ON TABLE bloomapp.created TO bloomappuser;


--
-- TOC entry 6331 (class 0 OID 0)
-- Dependencies: 312
-- Name: TABLE created_new_source_collection; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.created_new_source_collection TO readbloom;
GRANT SELECT ON TABLE bloomapp.created_new_source_collection TO bloomappuser;


--
-- TOC entry 6332 (class 0 OID 0)
-- Dependencies: 291
-- Name: TABLE delete_page; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.delete_page TO readbloom;
GRANT SELECT ON TABLE bloomapp.delete_page TO bloomappuser;


--
-- TOC entry 6333 (class 0 OID 0)
-- Dependencies: 320
-- Name: TABLE downloaded_book_failure; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.downloaded_book_failure TO readbloom;
GRANT SELECT ON TABLE bloomapp.downloaded_book_failure TO bloomappuser;


--
-- TOC entry 6334 (class 0 OID 0)
-- Dependencies: 299
-- Name: TABLE downloaded_book_success; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.downloaded_book_success TO readbloom;
GRANT SELECT ON TABLE bloomapp.downloaded_book_success TO bloomappuser;


--
-- TOC entry 6335 (class 0 OID 0)
-- Dependencies: 317
-- Name: TABLE duplicate_page; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.duplicate_page TO readbloom;
GRANT SELECT ON TABLE bloomapp.duplicate_page TO bloomappuser;


--
-- TOC entry 6336 (class 0 OID 0)
-- Dependencies: 295
-- Name: TABLE exception; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.exception TO readbloom;
GRANT SELECT ON TABLE bloomapp.exception TO bloomappuser;


--
-- TOC entry 6337 (class 0 OID 0)
-- Dependencies: 313
-- Name: TABLE exported_to_doc_format; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.exported_to_doc_format TO readbloom;
GRANT SELECT ON TABLE bloomapp.exported_to_doc_format TO bloomappuser;


--
-- TOC entry 6338 (class 0 OID 0)
-- Dependencies: 294
-- Name: TABLE exported_xml_for_in_design; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.exported_xml_for_in_design TO readbloom;
GRANT SELECT ON TABLE bloomapp.exported_xml_for_in_design TO bloomappuser;


--
-- TOC entry 6339 (class 0 OID 0)
-- Dependencies: 316
-- Name: TABLE identifies; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.identifies TO readbloom;
GRANT SELECT ON TABLE bloomapp.identifies TO bloomappuser;


--
-- TOC entry 6340 (class 0 OID 0)
-- Dependencies: 306
-- Name: TABLE insert_template_page; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.insert_template_page TO readbloom;
GRANT SELECT ON TABLE bloomapp.insert_template_page TO bloomappuser;


--
-- TOC entry 6341 (class 0 OID 0)
-- Dependencies: 298
-- Name: TABLE launch; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.launch TO readbloom;
GRANT SELECT ON TABLE bloomapp.launch TO bloomappuser;


--
-- TOC entry 6342 (class 0 OID 0)
-- Dependencies: 323
-- Name: TABLE organization_users; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.organization_users TO readbloom;
GRANT SELECT ON TABLE bloomapp.organization_users TO bloomappuser;


--
-- TOC entry 6343 (class 0 OID 0)
-- Dependencies: 396
-- Name: TABLE organization_users2; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT ALL ON TABLE bloomapp.organization_users2 TO bloomappuser;
GRANT ALL ON TABLE bloomapp.organization_users2 TO readbloom;
GRANT ALL ON TABLE bloomapp.organization_users2 TO segment;


--
-- TOC entry 6344 (class 0 OID 0)
-- Dependencies: 324
-- Name: TABLE organization_users3; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT ALL ON TABLE bloomapp.organization_users3 TO readbloom;
GRANT ALL ON TABLE bloomapp.organization_users3 TO silpgadmin;
GRANT SELECT ON TABLE bloomapp.organization_users3 TO bloomappuser;


--
-- TOC entry 6345 (class 0 OID 0)
-- Dependencies: 322
-- Name: TABLE organization_users_mirror; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT ALL ON TABLE bloomapp.organization_users_mirror TO readbloom;
GRANT SELECT ON TABLE bloomapp.organization_users_mirror TO bloomappuser;


--
-- TOC entry 6346 (class 0 OID 0)
-- Dependencies: 448
-- Name: TABLE png_create_book_view; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.png_create_book_view TO bloompnguser;
GRANT SELECT ON TABLE bloomapp.png_create_book_view TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.png_create_book_view TO readbloom;
GRANT ALL ON TABLE bloomapp.png_create_book_view TO segment;


--
-- TOC entry 6347 (class 0 OID 0)
-- Dependencies: 449
-- Name: TABLE png_launch_view; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.png_launch_view TO bloompnguser;
GRANT SELECT ON TABLE bloomapp.png_launch_view TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.png_launch_view TO readbloom;
GRANT ALL ON TABLE bloomapp.png_launch_view TO segment;


--
-- TOC entry 6348 (class 0 OID 0)
-- Dependencies: 308
-- Name: TABLE print_pdf; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.print_pdf TO readbloom;
GRANT SELECT ON TABLE bloomapp.print_pdf TO bloomappuser;


--
-- TOC entry 6349 (class 0 OID 0)
-- Dependencies: 450
-- Name: TABLE png_print_pdf_view; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.png_print_pdf_view TO bloompnguser;
GRANT SELECT ON TABLE bloomapp.png_print_pdf_view TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.png_print_pdf_view TO readbloom;
GRANT ALL ON TABLE bloomapp.png_print_pdf_view TO segment;


--
-- TOC entry 6350 (class 0 OID 0)
-- Dependencies: 451
-- Name: TABLE png_upload_book_success_view; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.png_upload_book_success_view TO bloompnguser;
GRANT SELECT ON TABLE bloomapp.png_upload_book_success_view TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.png_upload_book_success_view TO readbloom;
GRANT ALL ON TABLE bloomapp.png_upload_book_success_view TO segment;


--
-- TOC entry 6351 (class 0 OID 0)
-- Dependencies: 452
-- Name: TABLE png_users_view; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.png_users_view TO bloompnguser;
GRANT SELECT ON TABLE bloomapp.png_users_view TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.png_users_view TO readbloom;
GRANT ALL ON TABLE bloomapp.png_users_view TO segment;


--
-- TOC entry 6352 (class 0 OID 0)
-- Dependencies: 309
-- Name: TABLE publish_android; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.publish_android TO readbloom;
GRANT SELECT ON TABLE bloomapp.publish_android TO bloomappuser;


--
-- TOC entry 6353 (class 0 OID 0)
-- Dependencies: 296
-- Name: TABLE register; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.register TO readbloom;
GRANT SELECT ON TABLE bloomapp.register TO bloomappuser;


--
-- TOC entry 6354 (class 0 OID 0)
-- Dependencies: 305
-- Name: TABLE relocate_page; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.relocate_page TO readbloom;
GRANT SELECT ON TABLE bloomapp.relocate_page TO bloomappuser;


--
-- TOC entry 6355 (class 0 OID 0)
-- Dependencies: 311
-- Name: TABLE save_e_pub; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.save_e_pub TO readbloom;
GRANT SELECT ON TABLE bloomapp.save_e_pub TO bloomappuser;


--
-- TOC entry 6356 (class 0 OID 0)
-- Dependencies: 314
-- Name: TABLE save_epub; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.save_epub TO readbloom;
GRANT SELECT ON TABLE bloomapp.save_epub TO bloomappuser;


--
-- TOC entry 6357 (class 0 OID 0)
-- Dependencies: 321
-- Name: TABLE save_pdf; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.save_pdf TO readbloom;
GRANT SELECT ON TABLE bloomapp.save_pdf TO bloomappuser;


--
-- TOC entry 6358 (class 0 OID 0)
-- Dependencies: 445
-- Name: TABLE select_page; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.select_page TO readbloom;


--
-- TOC entry 6359 (class 0 OID 0)
-- Dependencies: 364
-- Name: TABLE some_event; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.some_event TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.some_event TO readbloom;


--
-- TOC entry 6360 (class 0 OID 0)
-- Dependencies: 363
-- Name: TABLE some_event2; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.some_event2 TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.some_event2 TO readbloom;


--
-- TOC entry 6361 (class 0 OID 0)
-- Dependencies: 444
-- Name: TABLE testingbooksuploadedalltime; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.testingbooksuploadedalltime TO readbloomtester;
GRANT SELECT ON TABLE bloomapp.testingbooksuploadedalltime TO readbloom;


--
-- TOC entry 6362 (class 0 OID 0)
-- Dependencies: 293
-- Name: TABLE tracks; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.tracks TO readbloom;
GRANT SELECT ON TABLE bloomapp.tracks TO bloomappuser;


--
-- TOC entry 6363 (class 0 OID 0)
-- Dependencies: 498
-- Name: TABLE uniqueuserchannel; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.uniqueuserchannel TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.uniqueuserchannel TO readbloom;


--
-- TOC entry 6364 (class 0 OID 0)
-- Dependencies: 500
-- Name: TABLE uniqueuserchannellast30days; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.uniqueuserchannellast30days TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.uniqueuserchannellast30days TO readbloom;


--
-- TOC entry 6365 (class 0 OID 0)
-- Dependencies: 502
-- Name: TABLE uniqueuseros; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.uniqueuseros TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.uniqueuseros TO readbloom;


--
-- TOC entry 6366 (class 0 OID 0)
-- Dependencies: 503
-- Name: TABLE uniqueuserosalltimecompact; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.uniqueuserosalltimecompact TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.uniqueuserosalltimecompact TO readbloom;


--
-- TOC entry 6367 (class 0 OID 0)
-- Dependencies: 501
-- Name: TABLE uniqueuserreachlast30days; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.uniqueuserreachlast30days TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.uniqueuserreachlast30days TO readbloom;


--
-- TOC entry 6368 (class 0 OID 0)
-- Dependencies: 497
-- Name: TABLE uniqueuserversion; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT ALL ON TABLE bloomapp.uniqueuserversion TO bloomappuser;
GRANT ALL ON TABLE bloomapp.uniqueuserversion TO readbloom;
GRANT ALL ON TABLE bloomapp.uniqueuserversion TO segment;


--
-- TOC entry 6369 (class 0 OID 0)
-- Dependencies: 499
-- Name: TABLE uniqueuserversionlast30days; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.uniqueuserversionlast30days TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.uniqueuserversionlast30days TO readbloom;


--
-- TOC entry 6370 (class 0 OID 0)
-- Dependencies: 307
-- Name: TABLE upgrade; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.upgrade TO readbloom;
GRANT SELECT ON TABLE bloomapp.upgrade TO bloomappuser;


--
-- TOC entry 6371 (class 0 OID 0)
-- Dependencies: 302
-- Name: TABLE upload_book_failure; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.upload_book_failure TO readbloom;
GRANT SELECT ON TABLE bloomapp.upload_book_failure TO bloomappuser;


--
-- TOC entry 6372 (class 0 OID 0)
-- Dependencies: 310
-- Name: TABLE upload_book_failure_system_time; Type: ACL; Schema: bloomapp; Owner: segment
--

GRANT SELECT ON TABLE bloomapp.upload_book_failure_system_time TO readbloom;
GRANT SELECT ON TABLE bloomapp.upload_book_failure_system_time TO bloomappuser;


--
-- TOC entry 6373 (class 0 OID 0)
-- Dependencies: 397
-- Name: TABLE used_languages; Type: ACL; Schema: public; Owner: segment
--

GRANT SELECT ON TABLE public.used_languages TO readbloomtester;
GRANT ALL ON TABLE public.used_languages TO silpgadmin;
GRANT SELECT ON TABLE public.used_languages TO readbloom;


--
-- TOC entry 6374 (class 0 OID 0)
-- Dependencies: 398
-- Name: TABLE user_languages; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT ALL ON TABLE bloomapp.user_languages TO bloomappuser;
GRANT ALL ON TABLE bloomapp.user_languages TO readbloom;


--
-- TOC entry 6375 (class 0 OID 0)
-- Dependencies: 488
-- Name: TABLE usersalltimefromlaunch; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.usersalltimefromlaunch TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.usersalltimefromlaunch TO readbloom;


--
-- TOC entry 6376 (class 0 OID 0)
-- Dependencies: 531
-- Name: TABLE v_create_book_count_by_month; Type: ACL; Schema: bloomapp; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomapp.v_create_book_count_by_month TO bloomappuser;
GRANT SELECT ON TABLE bloomapp.v_create_book_count_by_month TO readbloom;


--
-- TOC entry 6377 (class 0 OID 0)
-- Dependencies: 443
-- Name: TABLE testingbooksuploadedalltime; Type: ACL; Schema: bloomlibrary_org; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomlibrary_org.testingbooksuploadedalltime TO readbloomtester;


--
-- TOC entry 6378 (class 0 OID 0)
-- Dependencies: 554
-- Name: TABLE v_book_detail; Type: ACL; Schema: bloomlibrary_org; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomlibrary_org.v_book_detail TO stats;


--
-- TOC entry 6379 (class 0 OID 0)
-- Dependencies: 556
-- Name: TABLE v_download_book; Type: ACL; Schema: bloomlibrary_org; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomlibrary_org.v_download_book TO stats;


--
-- TOC entry 6380 (class 0 OID 0)
-- Dependencies: 578
-- Name: TABLE v_pages_read; Type: ACL; Schema: bloomlibrary_org; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomlibrary_org.v_pages_read TO stats;


--
-- TOC entry 6381 (class 0 OID 0)
-- Dependencies: 537
-- Name: TABLE v_book_detail; Type: ACL; Schema: bloomlibrary_test; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomlibrary_test.v_book_detail TO stats;


--
-- TOC entry 6382 (class 0 OID 0)
-- Dependencies: 553
-- Name: TABLE v_download_book; Type: ACL; Schema: bloomlibrary_test; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomlibrary_test.v_download_book TO stats;


--
-- TOC entry 6383 (class 0 OID 0)
-- Dependencies: 389
-- Name: TABLE accounts; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.accounts TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.accounts TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.accounts TO readbloom;


--
-- TOC entry 6384 (class 0 OID 0)
-- Dependencies: 341
-- Name: TABLE application_installed; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.application_installed TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.application_installed TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.application_installed TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.application_installed TO readbloom;


--
-- TOC entry 6385 (class 0 OID 0)
-- Dependencies: 367
-- Name: TABLE application_installed; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.application_installed TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.application_installed TO readbloom;


--
-- TOC entry 6386 (class 0 OID 0)
-- Dependencies: 492
-- Name: TABLE alldevices; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.alldevices TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.alldevices TO readbloom;


--
-- TOC entry 6387 (class 0 OID 0)
-- Dependencies: 519
-- Name: TABLE application_backgrounded; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.application_backgrounded TO readbloom;


--
-- TOC entry 6388 (class 0 OID 0)
-- Dependencies: 384
-- Name: TABLE application_opened; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.application_opened TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.application_opened TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.application_opened TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.application_opened TO readbloom;


--
-- TOC entry 6389 (class 0 OID 0)
-- Dependencies: 378
-- Name: TABLE application_updated; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.application_updated TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.application_updated TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.application_updated TO readbloom;


--
-- TOC entry 6390 (class 0 OID 0)
-- Dependencies: 330
-- Name: TABLE book_closed; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.book_closed TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.book_closed TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.book_closed TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.book_closed TO readbloom;


--
-- TOC entry 6391 (class 0 OID 0)
-- Dependencies: 334
-- Name: TABLE book_opened; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.book_opened TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.book_opened TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.book_opened TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.book_opened TO readbloom;


--
-- TOC entry 6392 (class 0 OID 0)
-- Dependencies: 377
-- Name: TABLE book_or_shelf_opened; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.book_or_shelf_opened TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.book_or_shelf_opened TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.book_or_shelf_opened TO readbloom;


--
-- TOC entry 6393 (class 0 OID 0)
-- Dependencies: 379
-- Name: TABLE pages_read; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.pages_read TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.pages_read TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.pages_read TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.pages_read TO readbloom;


--
-- TOC entry 6394 (class 0 OID 0)
-- Dependencies: 376
-- Name: TABLE questions_correct; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.questions_correct TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.questions_correct TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.questions_correct TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.questions_correct TO readbloom;


--
-- TOC entry 6395 (class 0 OID 0)
-- Dependencies: 380
-- Name: TABLE pages_read; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.pages_read TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.pages_read TO readbloom;


--
-- TOC entry 6396 (class 0 OID 0)
-- Dependencies: 373
-- Name: TABLE questions_correct; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.questions_correct TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.questions_correct TO readbloom;


--
-- TOC entry 6397 (class 0 OID 0)
-- Dependencies: 386
-- Name: TABLE ip2loc_sm_tab; Type: ACL; Schema: public; Owner: segment
--

GRANT SELECT ON TABLE public.ip2loc_sm_tab TO readbloom;


--
-- TOC entry 6398 (class 0 OID 0)
-- Dependencies: 371
-- Name: TABLE languagecodes; Type: ACL; Schema: public; Owner: silpgadmin
--

GRANT SELECT ON TABLE public.languagecodes TO readbloomtester;
GRANT SELECT ON TABLE public.languagecodes TO segment;
GRANT SELECT ON TABLE public.languagecodes TO readbloom;


--
-- TOC entry 6399 (class 0 OID 0)
-- Dependencies: 482
-- Name: TABLE books; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.books TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.books TO readbloom;


--
-- TOC entry 6400 (class 0 OID 0)
-- Dependencies: 480
-- Name: TABLE bookscreatedalltimenew; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.bookscreatedalltimenew TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.bookscreatedalltimenew TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.bookscreatedalltimenew TO readbloom;


--
-- TOC entry 6401 (class 0 OID 0)
-- Dependencies: 472
-- Name: TABLE unionquestionsgt; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.unionquestionsgt TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.unionquestionsgt TO readbloom;


--
-- TOC entry 6402 (class 0 OID 0)
-- Dependencies: 473
-- Name: TABLE booksgt; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.booksgt TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.booksgt TO readbloom;


--
-- TOC entry 6403 (class 0 OID 0)
-- Dependencies: 530
-- Name: TABLE comprehension; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.comprehension TO readbloom;


--
-- TOC entry 6404 (class 0 OID 0)
-- Dependencies: 468
-- Name: TABLE unionquestions; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.unionquestions TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.unionquestions TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.unionquestions TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.unionquestions TO readbloom;


--
-- TOC entry 6405 (class 0 OID 0)
-- Dependencies: 479
-- Name: TABLE comprehensionanycountry; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.comprehensionanycountry TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.comprehensionanycountry TO readbloom;


--
-- TOC entry 6406 (class 0 OID 0)
-- Dependencies: 474
-- Name: TABLE comprehensiongt; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.comprehensiongt TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.comprehensiongt TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.comprehensiongt TO readbloom;


--
-- TOC entry 6407 (class 0 OID 0)
-- Dependencies: 483
-- Name: TABLE comprehensionpng; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.comprehensionpng TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.comprehensionpng TO readbloom;


--
-- TOC entry 6408 (class 0 OID 0)
-- Dependencies: 372
-- Name: TABLE book_or_shelf_opened; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.book_or_shelf_opened TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.book_or_shelf_opened TO bloomgtuser;
GRANT SELECT ON TABLE bloomreaderbeta.book_or_shelf_opened TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreaderbeta.book_or_shelf_opened TO readbloom;


--
-- TOC entry 6409 (class 0 OID 0)
-- Dependencies: 326
-- Name: TABLE ip2location; Type: ACL; Schema: public; Owner: segment
--

GRANT ALL ON TABLE public.ip2location TO bloomappuser;
GRANT ALL ON TABLE public.ip2location TO readbloom;
GRANT ALL ON TABLE public.ip2location TO silpgadmin;
GRANT ALL ON TABLE public.ip2location TO readbloomtester;


--
-- TOC entry 6410 (class 0 OID 0)
-- Dependencies: 484
-- Name: TABLE contentlanguagespng; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.contentlanguagespng TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.contentlanguagespng TO readbloom;


--
-- TOC entry 6411 (class 0 OID 0)
-- Dependencies: 494
-- Name: TABLE countries_for_devices; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.countries_for_devices TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.countries_for_devices TO readbloom;


--
-- TOC entry 6412 (class 0 OID 0)
-- Dependencies: 383
-- Name: TABLE groups; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.groups TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.groups TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.groups TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.groups TO readbloom;


--
-- TOC entry 6413 (class 0 OID 0)
-- Dependencies: 387
-- Name: TABLE identifies; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.identifies TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.identifies TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.identifies TO readbloom;


--
-- TOC entry 6414 (class 0 OID 0)
-- Dependencies: 515
-- Name: TABLE install_attributed; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.install_attributed TO readbloom;


--
-- TOC entry 6415 (class 0 OID 0)
-- Dependencies: 493
-- Name: TABLE languages_for_books; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.languages_for_books TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.languages_for_books TO readbloom;


--
-- TOC entry 6416 (class 0 OID 0)
-- Dependencies: 487
-- Name: TABLE languagesanycountry; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.languagesanycountry TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.languagesanycountry TO readbloom;


--
-- TOC entry 6417 (class 0 OID 0)
-- Dependencies: 485
-- Name: TABLE numtitles; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.numtitles TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.numtitles TO readbloom;


--
-- TOC entry 6418 (class 0 OID 0)
-- Dependencies: 495
-- Name: TABLE numtitlesall; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.numtitlesall TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.numtitlesall TO readbloom;


--
-- TOC entry 6419 (class 0 OID 0)
-- Dependencies: 476
-- Name: TABLE phones_anycountry; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.phones_anycountry TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.phones_anycountry TO readbloom;


--
-- TOC entry 6420 (class 0 OID 0)
-- Dependencies: 465
-- Name: TABLE phonesgt; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.phonesgt TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.phonesgt TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.phonesgt TO readbloom;


--
-- TOC entry 6421 (class 0 OID 0)
-- Dependencies: 457
-- Name: TABLE png_application_installed_view; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.png_application_installed_view TO bloompnguser;
GRANT ALL ON TABLE bloomreader.png_application_installed_view TO segment;
GRANT SELECT ON TABLE bloomreader.png_application_installed_view TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.png_application_installed_view TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.png_application_installed_view TO readbloom;


--
-- TOC entry 6422 (class 0 OID 0)
-- Dependencies: 453
-- Name: TABLE png_application_opened_view; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.png_application_opened_view TO bloompnguser;
GRANT ALL ON TABLE bloomreader.png_application_opened_view TO segment;
GRANT SELECT ON TABLE bloomreader.png_application_opened_view TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.png_application_opened_view TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.png_application_opened_view TO readbloom;


--
-- TOC entry 6423 (class 0 OID 0)
-- Dependencies: 459
-- Name: TABLE png_book_or_shelf_opened_view; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.png_book_or_shelf_opened_view TO bloompnguser;
GRANT ALL ON TABLE bloomreader.png_book_or_shelf_opened_view TO segment;
GRANT SELECT ON TABLE bloomreader.png_book_or_shelf_opened_view TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.png_book_or_shelf_opened_view TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.png_book_or_shelf_opened_view TO readbloom;


--
-- TOC entry 6424 (class 0 OID 0)
-- Dependencies: 455
-- Name: TABLE png_pages_read_view; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.png_pages_read_view TO bloompnguser;
GRANT ALL ON TABLE bloomreader.png_pages_read_view TO segment;
GRANT SELECT ON TABLE bloomreader.png_pages_read_view TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.png_pages_read_view TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.png_pages_read_view TO readbloom;


--
-- TOC entry 6425 (class 0 OID 0)
-- Dependencies: 461
-- Name: TABLE png_questions_correct_view; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.png_questions_correct_view TO bloompnguser;
GRANT ALL ON TABLE bloomreader.png_questions_correct_view TO segment;
GRANT SELECT ON TABLE bloomreader.png_questions_correct_view TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.png_questions_correct_view TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.png_questions_correct_view TO readbloom;


--
-- TOC entry 6426 (class 0 OID 0)
-- Dependencies: 352
-- Name: TABLE screens; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.screens TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.screens TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.screens TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.screens TO readbloom;


--
-- TOC entry 6427 (class 0 OID 0)
-- Dependencies: 385
-- Name: TABLE application_opened; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.application_opened TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.application_opened TO readbloom;


--
-- TOC entry 6428 (class 0 OID 0)
-- Dependencies: 496
-- Name: TABLE timepermon; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.timepermon TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.timepermon TO readbloom;


--
-- TOC entry 6429 (class 0 OID 0)
-- Dependencies: 475
-- Name: TABLE timepermon_anycountry; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.timepermon_anycountry TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.timepermon_anycountry TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.timepermon_anycountry TO readbloom;


--
-- TOC entry 6430 (class 0 OID 0)
-- Dependencies: 470
-- Name: TABLE timepermongt; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.timepermongt TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.timepermongt TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.timepermongt TO readbloom;


--
-- TOC entry 6431 (class 0 OID 0)
-- Dependencies: 486
-- Name: TABLE timepermonpng; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.timepermonpng TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.timepermonpng TO readbloom;


--
-- TOC entry 6432 (class 0 OID 0)
-- Dependencies: 478
-- Name: TABLE titlesseen_anycountry; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.titlesseen_anycountry TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.titlesseen_anycountry TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.titlesseen_anycountry TO readbloom;


--
-- TOC entry 6433 (class 0 OID 0)
-- Dependencies: 350
-- Name: TABLE tracks; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.tracks TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.tracks TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.tracks TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.tracks TO readbloom;


--
-- TOC entry 6434 (class 0 OID 0)
-- Dependencies: 467
-- Name: TABLE unionpages; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.unionpages TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.unionpages TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.unionpages TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.unionpages TO readbloom;


--
-- TOC entry 6435 (class 0 OID 0)
-- Dependencies: 466
-- Name: TABLE phonesgt; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.phonesgt TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.phonesgt TO readbloom;


--
-- TOC entry 6436 (class 0 OID 0)
-- Dependencies: 471
-- Name: TABLE unionphonesgt; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.unionphonesgt TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.unionphonesgt TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.unionphonesgt TO readbloom;


--
-- TOC entry 6437 (class 0 OID 0)
-- Dependencies: 469
-- Name: TABLE uniontimes; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.uniontimes TO readbloomtester;
GRANT SELECT ON TABLE bloomreader.uniontimes TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.uniontimes TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.uniontimes TO readbloom;


--
-- TOC entry 6438 (class 0 OID 0)
-- Dependencies: 388
-- Name: TABLE users; Type: ACL; Schema: bloomreader; Owner: segment
--

GRANT SELECT ON TABLE bloomreader.users TO bloomgtuser;
GRANT SELECT ON TABLE bloomreader.users TO bloomreaderuser;
GRANT SELECT ON TABLE bloomreader.users TO readbloom;


--
-- TOC entry 6439 (class 0 OID 0)
-- Dependencies: 513
-- Name: TABLE v_pages_read_raw; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_pages_read_raw TO readbloom;


--
-- TOC entry 6440 (class 0 OID 0)
-- Dependencies: 506
-- Name: TABLE v_pages_read; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_pages_read TO readbloom;
GRANT SELECT ON TABLE bloomreader.v_pages_read TO stats;


--
-- TOC entry 6441 (class 0 OID 0)
-- Dependencies: 511
-- Name: TABLE v_avg_sessions_per_month_per_user; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_avg_sessions_per_month_per_user TO readbloom;


--
-- TOC entry 6442 (class 0 OID 0)
-- Dependencies: 512
-- Name: TABLE v_book_or_shelf_opened_raw; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_book_or_shelf_opened_raw TO readbloom;


--
-- TOC entry 6443 (class 0 OID 0)
-- Dependencies: 507
-- Name: TABLE v_book_or_shelf_opened; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_book_or_shelf_opened TO readbloom;
GRANT SELECT ON TABLE bloomreader.v_book_or_shelf_opened TO stats;


--
-- TOC entry 6444 (class 0 OID 0)
-- Dependencies: 508
-- Name: TABLE v_books_finished; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_books_finished TO readbloom;


--
-- TOC entry 6445 (class 0 OID 0)
-- Dependencies: 525
-- Name: TABLE v_books_finished_by_user; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_books_finished_by_user TO readbloom;


--
-- TOC entry 6446 (class 0 OID 0)
-- Dependencies: 529
-- Name: TABLE comprehension; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.comprehension TO readbloom;


--
-- TOC entry 6447 (class 0 OID 0)
-- Dependencies: 546
-- Name: TABLE v_comprehension_raw; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_comprehension_raw TO readbloom;


--
-- TOC entry 6448 (class 0 OID 0)
-- Dependencies: 547
-- Name: TABLE v_comprehension; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_comprehension TO readbloom;
GRANT SELECT ON TABLE bloomreader.v_comprehension TO stats;


--
-- TOC entry 6449 (class 0 OID 0)
-- Dependencies: 526
-- Name: TABLE v_number_of_books_opened; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_number_of_books_opened TO readbloom;


--
-- TOC entry 6450 (class 0 OID 0)
-- Dependencies: 528
-- Name: TABLE v_number_of_sign_language_books_opened; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_number_of_sign_language_books_opened TO readbloom;


--
-- TOC entry 6451 (class 0 OID 0)
-- Dependencies: 514
-- Name: TABLE v_number_pages_read_by_book; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_number_pages_read_by_book TO readbloom;


--
-- TOC entry 6452 (class 0 OID 0)
-- Dependencies: 527
-- Name: TABLE v_pages_read_by_user; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_pages_read_by_user TO readbloom;


--
-- TOC entry 6453 (class 0 OID 0)
-- Dependencies: 509
-- Name: TABLE v_sessions_per_day; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_sessions_per_day TO readbloom;


--
-- TOC entry 6454 (class 0 OID 0)
-- Dependencies: 510
-- Name: TABLE v_sessions_per_day_per_user; Type: ACL; Schema: bloomreader; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreader.v_sessions_per_day_per_user TO readbloom;


--
-- TOC entry 6455 (class 0 OID 0)
-- Dependencies: 392
-- Name: TABLE accounts; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.accounts TO readbloom;


--
-- TOC entry 6456 (class 0 OID 0)
-- Dependencies: 518
-- Name: TABLE application_backgrounded; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.application_backgrounded TO readbloom;


--
-- TOC entry 6457 (class 0 OID 0)
-- Dependencies: 365
-- Name: TABLE application_updated; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.application_updated TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.application_updated TO readbloom;


--
-- TOC entry 6458 (class 0 OID 0)
-- Dependencies: 366
-- Name: TABLE book_opened; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.book_opened TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.book_opened TO readbloom;


--
-- TOC entry 6459 (class 0 OID 0)
-- Dependencies: 382
-- Name: TABLE groups; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.groups TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.groups TO readbloom;


--
-- TOC entry 6460 (class 0 OID 0)
-- Dependencies: 391
-- Name: TABLE identifies; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.identifies TO readbloom;


--
-- TOC entry 6461 (class 0 OID 0)
-- Dependencies: 505
-- Name: TABLE install_attributed; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.install_attributed TO readbloom;


--
-- TOC entry 6462 (class 0 OID 0)
-- Dependencies: 375
-- Name: TABLE phonespng; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.phonespng TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.phonespng TO readbloom;


--
-- TOC entry 6463 (class 0 OID 0)
-- Dependencies: 458
-- Name: TABLE png_application_installed_view; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.png_application_installed_view TO bloompnguser;
GRANT ALL ON TABLE bloomreaderbeta.png_application_installed_view TO segment;
GRANT SELECT ON TABLE bloomreaderbeta.png_application_installed_view TO readbloom;


--
-- TOC entry 6464 (class 0 OID 0)
-- Dependencies: 454
-- Name: TABLE png_application_opened_view; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.png_application_opened_view TO bloompnguser;
GRANT ALL ON TABLE bloomreaderbeta.png_application_opened_view TO segment;
GRANT SELECT ON TABLE bloomreaderbeta.png_application_opened_view TO readbloom;


--
-- TOC entry 6465 (class 0 OID 0)
-- Dependencies: 460
-- Name: TABLE png_book_or_shelf_opened_view; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.png_book_or_shelf_opened_view TO bloompnguser;
GRANT ALL ON TABLE bloomreaderbeta.png_book_or_shelf_opened_view TO segment;
GRANT SELECT ON TABLE bloomreaderbeta.png_book_or_shelf_opened_view TO readbloom;


--
-- TOC entry 6466 (class 0 OID 0)
-- Dependencies: 456
-- Name: TABLE png_pages_read_view; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.png_pages_read_view TO bloompnguser;
GRANT ALL ON TABLE bloomreaderbeta.png_pages_read_view TO segment;
GRANT SELECT ON TABLE bloomreaderbeta.png_pages_read_view TO readbloom;


--
-- TOC entry 6467 (class 0 OID 0)
-- Dependencies: 462
-- Name: TABLE png_questions_correct_view; Type: ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreaderbeta.png_questions_correct_view TO bloompnguser;
GRANT ALL ON TABLE bloomreaderbeta.png_questions_correct_view TO segment;
GRANT SELECT ON TABLE bloomreaderbeta.png_questions_correct_view TO readbloom;


--
-- TOC entry 6468 (class 0 OID 0)
-- Dependencies: 369
-- Name: TABLE screens; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.screens TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.screens TO readbloom;


--
-- TOC entry 6469 (class 0 OID 0)
-- Dependencies: 368
-- Name: TABLE tracks; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.tracks TO readbloomtester;
GRANT SELECT ON TABLE bloomreaderbeta.tracks TO readbloom;


--
-- TOC entry 6470 (class 0 OID 0)
-- Dependencies: 390
-- Name: TABLE users; Type: ACL; Schema: bloomreaderbeta; Owner: segment
--

GRANT SELECT ON TABLE bloomreaderbeta.users TO readbloom;


--
-- TOC entry 6471 (class 0 OID 0)
-- Dependencies: 359
-- Name: TABLE accounts; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.accounts TO readbloomtester;


--
-- TOC entry 6472 (class 0 OID 0)
-- Dependencies: 356
-- Name: TABLE application_installed; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.application_installed TO readbloomtester;


--
-- TOC entry 6473 (class 0 OID 0)
-- Dependencies: 340
-- Name: TABLE application_opened; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.application_opened TO readbloomtester;


--
-- TOC entry 6474 (class 0 OID 0)
-- Dependencies: 351
-- Name: TABLE application_updated; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.application_updated TO readbloomtester;


--
-- TOC entry 6475 (class 0 OID 0)
-- Dependencies: 329
-- Name: TABLE book_closed; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.book_closed TO readbloomtester;


--
-- TOC entry 6476 (class 0 OID 0)
-- Dependencies: 357
-- Name: TABLE book_opened; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.book_opened TO readbloomtester;


--
-- TOC entry 6478 (class 0 OID 0)
-- Dependencies: 400
-- Name: TABLE bookcreatedpermonth; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.bookcreatedpermonth TO readbloomtester;


--
-- TOC entry 6479 (class 0 OID 0)
-- Dependencies: 477
-- Name: TABLE bookscreatedalltimenew; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.bookscreatedalltimenew TO readbloomtester;


--
-- TOC entry 6480 (class 0 OID 0)
-- Dependencies: 417
-- Name: TABLE clone_delete_page; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.clone_delete_page TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.clone_delete_page TO readbloom;


--
-- TOC entry 6481 (class 0 OID 0)
-- Dependencies: 424
-- Name: TABLE clone_launch; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.clone_launch TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.clone_launch TO readbloom;


--
-- TOC entry 6482 (class 0 OID 0)
-- Dependencies: 414
-- Name: TABLE contentlanguagespng; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.contentlanguagespng TO readbloomtester;


--
-- TOC entry 6483 (class 0 OID 0)
-- Dependencies: 370
-- Name: TABLE countries; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.countries TO readbloomtester;


--
-- TOC entry 6484 (class 0 OID 0)
-- Dependencies: 442
-- Name: TABLE countries_for_devices; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT ALL ON TABLE bloomreadertest.countries_for_devices TO readbloomtester;
GRANT ALL ON TABLE bloomreadertest.countries_for_devices TO readbloom;
GRANT ALL ON TABLE bloomreadertest.countries_for_devices TO segment;


--
-- TOC entry 6485 (class 0 OID 0)
-- Dependencies: 401
-- Name: TABLE dayrows; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.dayrows TO readbloomtester;


--
-- TOC entry 6486 (class 0 OID 0)
-- Dependencies: 360
-- Name: TABLE groups; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.groups TO readbloomtester;


--
-- TOC entry 6487 (class 0 OID 0)
-- Dependencies: 362
-- Name: TABLE identifies; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.identifies TO readbloomtester;


--
-- TOC entry 6488 (class 0 OID 0)
-- Dependencies: 394
-- Name: TABLE languages_for_vcs; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.languages_for_vcs TO readbloomtester;
GRANT ALL ON TABLE bloomreadertest.languages_for_vcs TO bloomappuser;
GRANT ALL ON TABLE bloomreadertest.languages_for_vcs TO readbloom;
GRANT ALL ON TABLE bloomreadertest.languages_for_vcs TO segment;


--
-- TOC entry 6489 (class 0 OID 0)
-- Dependencies: 402
-- Name: TABLE lastyearsusersfromlaunch; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.lastyearsusersfromlaunch TO readbloomtester;


--
-- TOC entry 6490 (class 0 OID 0)
-- Dependencies: 403
-- Name: TABLE launchlocs; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.launchlocs TO readbloomtester;


--
-- TOC entry 6491 (class 0 OID 0)
-- Dependencies: 436
-- Name: TABLE mpdata_book_search; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_book_search TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_book_search TO readbloomtester;


--
-- TOC entry 6492 (class 0 OID 0)
-- Dependencies: 405
-- Name: TABLE mpdata_change_content_languages; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_change_content_languages TO readbloomtester;


--
-- TOC entry 6493 (class 0 OID 0)
-- Dependencies: 409
-- Name: TABLE mpdata_change_page_layout; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_change_page_layout TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_change_page_layout TO readbloom;


--
-- TOC entry 6494 (class 0 OID 0)
-- Dependencies: 410
-- Name: TABLE mpdata_change_picture; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_change_picture TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_change_picture TO readbloom;


--
-- TOC entry 6495 (class 0 OID 0)
-- Dependencies: 411
-- Name: TABLE mpdata_create_bloom_pack; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_create_bloom_pack TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_create_bloom_pack TO readbloom;


--
-- TOC entry 6496 (class 0 OID 0)
-- Dependencies: 412
-- Name: TABLE mpdata_create_book; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_create_book TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_create_book TO readbloom;


--
-- TOC entry 6497 (class 0 OID 0)
-- Dependencies: 413
-- Name: TABLE mpdata_create_new_vernacular_collection; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_create_new_vernacular_collection TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_create_new_vernacular_collection TO readbloom;


--
-- TOC entry 6498 (class 0 OID 0)
-- Dependencies: 415
-- Name: TABLE mpdata_created; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_created TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_created TO readbloom;


--
-- TOC entry 6499 (class 0 OID 0)
-- Dependencies: 416
-- Name: TABLE mpdata_created_new_source_collection; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_created_new_source_collection TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_created_new_source_collection TO readbloom;


--
-- TOC entry 6500 (class 0 OID 0)
-- Dependencies: 418
-- Name: TABLE mpdata_delete_page; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_delete_page TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_delete_page TO readbloom;


--
-- TOC entry 6501 (class 0 OID 0)
-- Dependencies: 437
-- Name: TABLE mpdata_download_book; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_download_book TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_download_book TO readbloomtester;


--
-- TOC entry 6502 (class 0 OID 0)
-- Dependencies: 419
-- Name: TABLE mpdata_downloaded_book_failure; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_downloaded_book_failure TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_downloaded_book_failure TO readbloom;


--
-- TOC entry 6503 (class 0 OID 0)
-- Dependencies: 420
-- Name: TABLE mpdata_duplicate_page; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_duplicate_page TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_duplicate_page TO readbloom;


--
-- TOC entry 6504 (class 0 OID 0)
-- Dependencies: 421
-- Name: TABLE mpdata_exported_to_doc_format; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_exported_to_doc_format TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_exported_to_doc_format TO readbloom;


--
-- TOC entry 6505 (class 0 OID 0)
-- Dependencies: 422
-- Name: TABLE mpdata_exported_xml_for_in_design; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_exported_xml_for_in_design TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_exported_xml_for_in_design TO readbloom;


--
-- TOC entry 6506 (class 0 OID 0)
-- Dependencies: 423
-- Name: TABLE mpdata_insert_template_page; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_insert_template_page TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_insert_template_page TO readbloom;


--
-- TOC entry 6507 (class 0 OID 0)
-- Dependencies: 425
-- Name: TABLE mpdata_launch; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_launch TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_launch TO readbloom;


--
-- TOC entry 6508 (class 0 OID 0)
-- Dependencies: 438
-- Name: TABLE mpdata_log_in; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_log_in TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_log_in TO readbloomtester;


--
-- TOC entry 6509 (class 0 OID 0)
-- Dependencies: 439
-- Name: TABLE mpdata_log_out; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_log_out TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_log_out TO readbloomtester;


--
-- TOC entry 6510 (class 0 OID 0)
-- Dependencies: 440
-- Name: TABLE mpdata_pages; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_pages TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_pages TO readbloomtester;


--
-- TOC entry 6511 (class 0 OID 0)
-- Dependencies: 441
-- Name: TABLE mpdata_preview; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_preview TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_preview TO readbloomtester;


--
-- TOC entry 6512 (class 0 OID 0)
-- Dependencies: 426
-- Name: TABLE mpdata_print_pdf; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_print_pdf TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_print_pdf TO readbloom;


--
-- TOC entry 6513 (class 0 OID 0)
-- Dependencies: 427
-- Name: TABLE mpdata_publish_android; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_publish_android TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_publish_android TO readbloom;


--
-- TOC entry 6514 (class 0 OID 0)
-- Dependencies: 428
-- Name: TABLE mpdata_register; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_register TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_register TO readbloom;


--
-- TOC entry 6515 (class 0 OID 0)
-- Dependencies: 429
-- Name: TABLE mpdata_relocate_page; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_relocate_page TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_relocate_page TO readbloom;


--
-- TOC entry 6516 (class 0 OID 0)
-- Dependencies: 430
-- Name: TABLE mpdata_save_e_pub; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_save_e_pub TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_save_e_pub TO readbloom;


--
-- TOC entry 6517 (class 0 OID 0)
-- Dependencies: 431
-- Name: TABLE mpdata_save_pdf; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_save_pdf TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_save_pdf TO readbloom;


--
-- TOC entry 6518 (class 0 OID 0)
-- Dependencies: 432
-- Name: TABLE mpdata_upgrade; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_upgrade TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_upgrade TO readbloom;


--
-- TOC entry 6519 (class 0 OID 0)
-- Dependencies: 433
-- Name: TABLE mpdata_upload_book_failure; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_upload_book_failure TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_upload_book_failure TO readbloom;


--
-- TOC entry 6520 (class 0 OID 0)
-- Dependencies: 434
-- Name: TABLE mpdata_upload_book_failure_system_time; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_upload_book_failure_system_time TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_upload_book_failure_system_time TO readbloom;


--
-- TOC entry 6521 (class 0 OID 0)
-- Dependencies: 435
-- Name: TABLE mpdata_upload_book_success; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.mpdata_upload_book_success TO bloomappuser;
GRANT SELECT ON TABLE bloomreadertest.mpdata_upload_book_success TO readbloom;
GRANT ALL ON TABLE bloomreadertest.mpdata_upload_book_success TO readbloomtester;


--
-- TOC entry 6522 (class 0 OID 0)
-- Dependencies: 395
-- Name: TABLE numofbloomusers; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.numofbloomusers TO readbloomtester;


--
-- TOC entry 6523 (class 0 OID 0)
-- Dependencies: 358
-- Name: TABLE page_read; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.page_read TO readbloomtester;


--
-- TOC entry 6525 (class 0 OID 0)
-- Dependencies: 353
-- Name: TABLE pages_read; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.pages_read TO readbloomtester;


--
-- TOC entry 6526 (class 0 OID 0)
-- Dependencies: 381
-- Name: TABLE questions_correct; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.questions_correct TO readbloomtester;


--
-- TOC entry 6527 (class 0 OID 0)
-- Dependencies: 335
-- Name: TABLE screens; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.screens TO readbloomtester;


--
-- TOC entry 6528 (class 0 OID 0)
-- Dependencies: 446
-- Name: TABLE testing; Type: ACL; Schema: bloomreadertest; Owner: silpgadmin
--

GRANT SELECT ON TABLE bloomreadertest.testing TO readbloomtester;


--
-- TOC entry 6529 (class 0 OID 0)
-- Dependencies: 345
-- Name: TABLE tracks; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.tracks TO readbloomtester;


--
-- TOC entry 6530 (class 0 OID 0)
-- Dependencies: 361
-- Name: TABLE users; Type: ACL; Schema: bloomreadertest; Owner: segment
--

GRANT SELECT ON TABLE bloomreadertest.users TO readbloomtester;


--
-- TOC entry 6531 (class 0 OID 0)
-- Dependencies: 555
-- Name: TABLE mv_book_detail; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_book_detail TO stats;


--
-- TOC entry 6532 (class 0 OID 0)
-- Dependencies: 583
-- Name: TABLE mv_comprehension; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_comprehension TO stats;


--
-- TOC entry 6533 (class 0 OID 0)
-- Dependencies: 557
-- Name: TABLE mv_download_book; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_download_book TO stats;


--
-- TOC entry 6534 (class 0 OID 0)
-- Dependencies: 579
-- Name: TABLE mv_pages_read; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_pages_read TO stats;


--
-- TOC entry 6535 (class 0 OID 0)
-- Dependencies: 580
-- Name: TABLE mv_reading_perbook_events; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_reading_perbook_events TO stats;


--
-- TOC entry 6536 (class 0 OID 0)
-- Dependencies: 549
-- Name: TABLE mv_reading_perday_events; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_reading_perday_events TO stats;


--
-- TOC entry 6537 (class 0 OID 0)
-- Dependencies: 548
-- Name: TABLE mv_reading_perday_events_by_branding_and_country; Type: ACL; Schema: common; Owner: silpgadmin
--

GRANT SELECT ON TABLE common.mv_reading_perday_events_by_branding_and_country TO stats;


--
-- TOC entry 6538 (class 0 OID 0)
-- Dependencies: 289
-- Name: TABLE added_skipped_style; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.added_skipped_style TO readhearthis;


--
-- TOC entry 6539 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE created; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.created TO readhearthis;


--
-- TOC entry 6540 (class 0 OID 0)
-- Dependencies: 278
-- Name: TABLE error_setting_paratext_projects_folder; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.error_setting_paratext_projects_folder TO readhearthis;


--
-- TOC entry 6541 (class 0 OID 0)
-- Dependencies: 284
-- Name: TABLE exception; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.exception TO readhearthis;


--
-- TOC entry 6542 (class 0 OID 0)
-- Dependencies: 273
-- Name: TABLE flubbed_record_press; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.flubbed_record_press TO readhearthis;


--
-- TOC entry 6543 (class 0 OID 0)
-- Dependencies: 276
-- Name: TABLE identifies; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.identifies TO readhearthis;


--
-- TOC entry 6544 (class 0 OID 0)
-- Dependencies: 277
-- Name: TABLE launch; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.launch TO readhearthis;


--
-- TOC entry 6545 (class 0 OID 0)
-- Dependencies: 280
-- Name: TABLE play; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.play TO readhearthis;


--
-- TOC entry 6546 (class 0 OID 0)
-- Dependencies: 288
-- Name: TABLE published; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.published TO readhearthis;


--
-- TOC entry 6547 (class 0 OID 0)
-- Dependencies: 287
-- Name: TABLE punctuation_settings_changed; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.punctuation_settings_changed TO readhearthis;


--
-- TOC entry 6548 (class 0 OID 0)
-- Dependencies: 290
-- Name: TABLE re_recorded_a_clip; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.re_recorded_a_clip TO readhearthis;


--
-- TOC entry 6549 (class 0 OID 0)
-- Dependencies: 279
-- Name: TABLE re_recorded_a_line; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.re_recorded_a_line TO readhearthis;


--
-- TOC entry 6550 (class 0 OID 0)
-- Dependencies: 285
-- Name: TABLE recorded_a_line; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.recorded_a_line TO readhearthis;


--
-- TOC entry 6551 (class 0 OID 0)
-- Dependencies: 286
-- Name: TABLE recording_clip; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.recording_clip TO readhearthis;


--
-- TOC entry 6552 (class 0 OID 0)
-- Dependencies: 274
-- Name: TABLE set_project; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.set_project TO readhearthis;


--
-- TOC entry 6553 (class 0 OID 0)
-- Dependencies: 283
-- Name: TABLE tracks; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.tracks TO readhearthis;


--
-- TOC entry 6554 (class 0 OID 0)
-- Dependencies: 275
-- Name: TABLE upgrade; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.upgrade TO readhearthis;


--
-- TOC entry 6555 (class 0 OID 0)
-- Dependencies: 281
-- Name: TABLE users; Type: ACL; Schema: hearthis; Owner: segment
--

GRANT SELECT ON TABLE hearthis.users TO readhearthis;


--
-- TOC entry 6556 (class 0 OID 0)
-- Dependencies: 374
-- Name: TABLE countrycodes; Type: ACL; Schema: public; Owner: silpgadmin
--

GRANT SELECT ON TABLE public.countrycodes TO readbloomtester;
GRANT SELECT ON TABLE public.countrycodes TO readbloom;


--
-- TOC entry 6558 (class 0 OID 0)
-- Dependencies: 576
-- Name: TABLE geography_city_centers; Type: ACL; Schema: public; Owner: silpgadmin
--

GRANT SELECT ON TABLE public.geography_city_centers TO readbloom;
GRANT SELECT ON TABLE public.geography_city_centers TO segment;


--
-- TOC entry 6559 (class 0 OID 0)
-- Dependencies: 575
-- Name: TABLE geography_regioncodes; Type: ACL; Schema: public; Owner: silpgadmin
--

GRANT SELECT ON TABLE public.geography_regioncodes TO readbloom;


--
-- TOC entry 6560 (class 0 OID 0)
-- Dependencies: 464
-- Name: TABLE ip2location_as_of_2019_01_08; Type: ACL; Schema: public; Owner: segment
--

GRANT ALL ON TABLE public.ip2location_as_of_2019_01_08 TO bloomappuser;
GRANT ALL ON TABLE public.ip2location_as_of_2019_01_08 TO readbloom;
GRANT ALL ON TABLE public.ip2location_as_of_2019_01_08 TO readbloomtester;
GRANT ALL ON TABLE public.ip2location_as_of_2019_01_08 TO silpgadmin;


--
-- TOC entry 6561 (class 0 OID 0)
-- Dependencies: 463
-- Name: TABLE ip2location_up_to_2019_01_08; Type: ACL; Schema: public; Owner: segment
--

GRANT ALL ON TABLE public.ip2location_up_to_2019_01_08 TO bloomappuser;
GRANT ALL ON TABLE public.ip2location_up_to_2019_01_08 TO readbloom;
GRANT ALL ON TABLE public.ip2location_up_to_2019_01_08 TO readbloomtester;
GRANT ALL ON TABLE public.ip2location_up_to_2019_01_08 TO silpgadmin;


--
-- TOC entry 6562 (class 0 OID 0)
-- Dependencies: 406
-- Name: TABLE ipv42location; Type: ACL; Schema: public; Owner: segment
--

GRANT ALL ON TABLE public.ipv42location TO bloomappuser;
GRANT ALL ON TABLE public.ipv42location TO readbloom;
GRANT ALL ON TABLE public.ipv42location TO readbloomtester;
GRANT ALL ON TABLE public.ipv42location TO silpgadmin;


--
-- TOC entry 6563 (class 0 OID 0)
-- Dependencies: 407
-- Name: TABLE ipv62location; Type: ACL; Schema: public; Owner: segment
--

GRANT ALL ON TABLE public.ipv62location TO bloomappuser;
GRANT ALL ON TABLE public.ipv62location TO readbloom;
GRANT ALL ON TABLE public.ipv62location TO readbloomtester;
GRANT ALL ON TABLE public.ipv62location TO silpgadmin;


--
-- TOC entry 6564 (class 0 OID 0)
-- Dependencies: 272
-- Name: TABLE pg_buffercache; Type: ACL; Schema: public; Owner: azure_superuser
--

GRANT SELECT ON TABLE public.pg_buffercache TO readbloom;


--
-- TOC entry 6565 (class 0 OID 0)
-- Dependencies: 271
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: public; Owner: azure_superuser
--

GRANT SELECT ON TABLE public.pg_stat_statements TO readbloom;


--
-- TOC entry 4679 (class 826 OID 991111)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: bloomreader; Owner: segment
--

ALTER DEFAULT PRIVILEGES FOR ROLE segment IN SCHEMA bloomreader REVOKE ALL ON TABLES  FROM segment;
ALTER DEFAULT PRIVILEGES FOR ROLE segment IN SCHEMA bloomreader GRANT SELECT ON TABLES  TO readbloom;


--
-- TOC entry 4680 (class 826 OID 991220)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: bloomreader; Owner: silpgadmin
--

ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA bloomreader REVOKE ALL ON TABLES  FROM silpgadmin;
ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA bloomreader GRANT SELECT ON TABLES  TO readbloom;


--
-- TOC entry 4681 (class 826 OID 1001282)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: bloomreaderbeta; Owner: silpgadmin
--

ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA bloomreaderbeta REVOKE ALL ON TABLES  FROM silpgadmin;
ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA bloomreaderbeta GRANT SELECT ON TABLES  TO readbloom;


--
-- TOC entry 4678 (class 826 OID 112255)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: bloomreadertest; Owner: silpgadmin
--

ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA bloomreadertest REVOKE ALL ON TABLES  FROM silpgadmin;
ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA bloomreadertest GRANT SELECT,INSERT,DELETE,UPDATE ON TABLES  TO silpgadmin;


--
-- TOC entry 4682 (class 826 OID 1001300)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: silpgadmin
--

ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA public REVOKE ALL ON TABLES  FROM silpgadmin;
ALTER DEFAULT PRIVILEGES FOR ROLE silpgadmin IN SCHEMA public GRANT SELECT ON TABLES  TO readbloom;


-- Completed on 2020-08-17 12:35:23

--
-- PostgreSQL database dump complete
--

